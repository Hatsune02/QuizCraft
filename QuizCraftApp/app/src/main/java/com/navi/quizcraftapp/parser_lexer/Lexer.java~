// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Lexer.flex

package com.navi.quizcraftapp.parser_lexer;
import java_cup.runtime.*;
import static com.navi.quizcraftapp.parser_lexer.sym.*;

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\5\0\1\6\1\7\2\0\1\10\1\0"+
    "\1\11\1\0\12\12\1\13\1\0\1\14\1\0\1\15"+
    "\2\0\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\27\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\2\27\3\0\1\27\1\45\1\0\1\46\1\47"+
    "\1\27\1\50\1\51\1\52\2\27\1\53\4\27\1\54"+
    "\1\55\1\56\1\27\1\57\1\60\1\61\1\62\1\63"+
    "\4\27\1\64\1\0\1\65\43\0\1\27\10\0\1\27"+
    "\1\0\1\27\3\0\1\27\4\0\1\27\4\0\1\27"+
    "\4\0\30\27\1\0\37\27\1\0\u01ca\27\4\0\14\27"+
    "\16\0\5\27\7\0\1\27\1\0\1\27\21\0\165\27"+
    "\1\0\2\27\2\0\4\27\1\0\1\27\6\0\1\27"+
    "\1\0\3\27\1\0\1\27\1\0\24\27\1\0\123\27"+
    "\1\0\213\27\1\0\255\27\1\0\46\27\2\0\1\27"+
    "\6\0\51\27\10\0\55\27\1\0\1\27\1\0\2\27"+
    "\1\0\2\27\1\0\1\27\10\0\33\27\4\0\4\27"+
    "\35\0\13\27\5\0\112\27\4\0\146\27\1\0\10\27"+
    "\2\0\12\27\1\0\23\27\2\0\1\27\20\0\73\27"+
    "\2\0\145\27\16\0\66\27\4\0\1\27\2\0\1\27"+
    "\2\0\56\27\22\0\34\27\4\0\13\27\65\0\25\27"+
    "\1\0\10\27\25\0\17\27\1\0\201\27\2\0\12\27"+
    "\1\0\23\27\1\0\10\27\2\0\2\27\2\0\26\27"+
    "\1\0\7\27\1\0\1\27\3\0\4\27\2\0\11\27"+
    "\2\0\2\27\2\0\4\27\10\0\1\27\4\0\2\27"+
    "\1\0\5\27\2\0\14\27\12\0\1\27\1\0\1\27"+
    "\2\0\3\27\1\0\6\27\4\0\2\27\2\0\26\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\27\1\0\2\27"+
    "\2\0\1\27\1\0\5\27\4\0\2\27\2\0\3\27"+
    "\3\0\1\27\7\0\4\27\1\0\1\27\7\0\20\27"+
    "\13\0\3\27\1\0\11\27\1\0\3\27\1\0\26\27"+
    "\1\0\7\27\1\0\2\27\1\0\5\27\2\0\12\27"+
    "\1\0\3\27\1\0\3\27\2\0\1\27\17\0\4\27"+
    "\2\0\12\27\11\0\7\27\1\0\3\27\1\0\10\27"+
    "\2\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27"+
    "\1\0\5\27\2\0\11\27\2\0\2\27\2\0\3\27"+
    "\10\0\2\27\4\0\2\27\1\0\5\27\2\0\12\27"+
    "\1\0\1\27\20\0\2\27\1\0\6\27\3\0\3\27"+
    "\1\0\4\27\3\0\2\27\1\0\1\27\1\0\2\27"+
    "\3\0\2\27\3\0\3\27\3\0\14\27\4\0\5\27"+
    "\3\0\3\27\1\0\4\27\2\0\1\27\6\0\1\27"+
    "\16\0\12\27\20\0\15\27\1\0\3\27\1\0\27\27"+
    "\1\0\20\27\3\0\10\27\1\0\3\27\1\0\4\27"+
    "\7\0\2\27\1\0\3\27\5\0\4\27\2\0\12\27"+
    "\20\0\4\27\1\0\10\27\1\0\3\27\1\0\27\27"+
    "\1\0\12\27\1\0\5\27\2\0\11\27\1\0\3\27"+
    "\1\0\4\27\7\0\2\27\7\0\1\27\1\0\4\27"+
    "\2\0\12\27\1\0\2\27\15\0\4\27\1\0\10\27"+
    "\1\0\3\27\1\0\63\27\1\0\3\27\1\0\5\27"+
    "\5\0\4\27\7\0\5\27\2\0\12\27\12\0\6\27"+
    "\2\0\2\27\1\0\22\27\3\0\30\27\1\0\11\27"+
    "\1\0\1\27\2\0\7\27\3\0\1\27\4\0\6\27"+
    "\1\0\1\27\1\0\10\27\6\0\12\27\2\0\2\27"+
    "\15\0\72\27\5\0\17\27\1\0\12\27\47\0\2\27"+
    "\1\0\1\27\1\0\5\27\1\0\30\27\1\0\1\27"+
    "\1\0\27\27\2\0\5\27\1\0\1\27\1\0\6\27"+
    "\2\0\12\27\2\0\4\27\40\0\1\27\27\0\2\27"+
    "\6\0\12\27\13\0\1\27\1\0\1\27\1\0\1\27"+
    "\4\0\12\27\1\0\44\27\4\0\24\27\1\0\22\27"+
    "\1\0\44\27\11\0\1\27\71\0\112\27\6\0\116\27"+
    "\2\0\46\27\1\0\1\27\5\0\1\27\2\0\53\27"+
    "\1\0\115\27\1\0\4\27\2\0\7\27\1\0\1\27"+
    "\1\0\4\27\2\0\51\27\1\0\4\27\2\0\41\27"+
    "\1\0\4\27\2\0\7\27\1\0\1\27\1\0\4\27"+
    "\2\0\17\27\1\0\71\27\1\0\4\27\2\0\103\27"+
    "\2\0\3\27\40\0\20\27\20\0\126\27\2\0\6\27"+
    "\3\0\u016c\27\2\0\21\27\1\0\32\27\5\0\113\27"+
    "\3\0\13\27\7\0\15\27\1\0\7\27\13\0\25\27"+
    "\13\0\24\27\14\0\15\27\1\0\3\27\1\0\2\27"+
    "\14\0\124\27\3\0\1\27\4\0\2\27\2\0\12\27"+
    "\41\0\3\27\2\0\12\27\6\0\131\27\7\0\53\27"+
    "\5\0\106\27\12\0\37\27\1\0\14\27\4\0\14\27"+
    "\12\0\50\27\2\0\5\27\13\0\54\27\4\0\32\27"+
    "\6\0\12\27\46\0\34\27\4\0\77\27\1\0\35\27"+
    "\2\0\13\27\6\0\12\27\15\0\1\27\10\0\17\27"+
    "\101\0\114\27\4\0\12\27\21\0\11\27\14\0\164\27"+
    "\14\0\70\27\10\0\12\27\3\0\61\27\2\0\11\27"+
    "\7\0\53\27\2\0\3\27\20\0\3\27\1\0\47\27"+
    "\5\0\372\27\1\0\33\27\2\0\6\27\2\0\46\27"+
    "\2\0\6\27\2\0\10\27\1\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\37\27\2\0\65\27\1\0\7\27"+
    "\1\0\1\27\3\0\3\27\1\0\7\27\3\0\4\27"+
    "\2\0\6\27\4\0\15\27\5\0\3\27\1\0\7\27"+
    "\102\0\2\27\23\0\1\27\34\0\1\27\15\0\1\27"+
    "\20\0\15\27\63\0\41\27\21\0\1\27\4\0\1\27"+
    "\2\0\12\27\1\0\1\27\3\0\5\27\6\0\1\27"+
    "\1\0\1\27\1\0\1\27\1\0\4\27\1\0\13\27"+
    "\2\0\4\27\5\0\5\27\4\0\1\27\21\0\51\27"+
    "\u022d\0\64\27\26\0\57\27\1\0\57\27\1\0\205\27"+
    "\6\0\11\27\14\0\46\27\1\0\1\27\5\0\1\27"+
    "\2\0\70\27\7\0\1\27\17\0\30\27\11\0\7\27"+
    "\1\0\7\27\1\0\7\27\1\0\7\27\1\0\7\27"+
    "\1\0\7\27\1\0\7\27\1\0\7\27\1\0\40\27"+
    "\57\0\1\27\325\0\3\27\31\0\17\27\1\0\5\27"+
    "\2\0\5\27\4\0\126\27\2\0\2\27\2\0\3\27"+
    "\1\0\132\27\1\0\4\27\5\0\53\27\1\0\136\27"+
    "\21\0\33\27\65\0\306\27\112\0\360\27\20\0\215\27"+
    "\103\0\56\27\2\0\15\27\3\0\34\27\24\0\63\27"+
    "\1\0\12\27\1\0\163\27\45\0\11\27\2\0\147\27"+
    "\2\0\65\27\2\0\5\27\60\0\61\27\30\0\64\27"+
    "\14\0\106\27\12\0\12\27\6\0\30\27\3\0\1\27"+
    "\1\0\61\27\2\0\44\27\14\0\35\27\3\0\101\27"+
    "\16\0\13\27\6\0\37\27\1\0\67\27\11\0\16\27"+
    "\2\0\12\27\6\0\27\27\3\0\111\27\30\0\3\27"+
    "\2\0\20\27\2\0\5\27\12\0\6\27\2\0\6\27"+
    "\2\0\6\27\11\0\7\27\1\0\7\27\1\0\53\27"+
    "\1\0\14\27\10\0\173\27\1\0\2\27\2\0\12\27"+
    "\6\0\244\27\14\0\27\27\4\0\61\27\4\0\156\27"+
    "\2\0\152\27\46\0\7\27\14\0\5\27\5\0\14\27"+
    "\1\0\15\27\1\0\5\27\1\0\1\27\1\0\2\27"+
    "\1\0\2\27\1\0\154\27\41\0\153\27\22\0\100\27"+
    "\2\0\66\27\50\0\14\27\4\0\20\27\20\0\20\27"+
    "\3\0\2\27\30\0\3\27\40\0\5\27\1\0\207\27"+
    "\23\0\12\27\7\0\32\27\4\0\1\27\1\0\32\27"+
    "\13\0\131\27\3\0\6\27\2\0\6\27\2\0\6\27"+
    "\2\0\3\27\43\0\14\27\1\0\32\27\1\0\23\27"+
    "\1\0\2\27\1\0\17\27\2\0\16\27\42\0\173\27"+
    "\105\0\65\27\210\0\1\27\202\0\35\27\3\0\61\27"+
    "\17\0\1\27\37\0\40\27\15\0\36\27\5\0\53\27"+
    "\5\0\36\27\2\0\44\27\4\0\10\27\1\0\5\27"+
    "\52\0\236\27\2\0\12\27\6\0\44\27\4\0\44\27"+
    "\4\0\50\27\10\0\64\27\234\0\67\27\11\0\26\27"+
    "\12\0\10\27\230\0\6\27\2\0\1\27\1\0\54\27"+
    "\1\0\2\27\3\0\1\27\2\0\27\27\12\0\27\27"+
    "\11\0\37\27\101\0\23\27\1\0\2\27\12\0\26\27"+
    "\12\0\32\27\106\0\70\27\6\0\2\27\100\0\4\27"+
    "\1\0\2\27\5\0\10\27\1\0\3\27\1\0\35\27"+
    "\2\0\3\27\4\0\1\27\40\0\35\27\3\0\35\27"+
    "\43\0\10\27\1\0\36\27\31\0\66\27\12\0\26\27"+
    "\12\0\23\27\15\0\22\27\156\0\111\27\67\0\63\27"+
    "\15\0\63\27\15\0\50\27\10\0\12\27\306\0\35\27"+
    "\12\0\1\27\10\0\41\27\217\0\27\27\11\0\107\27"+
    "\37\0\12\27\17\0\74\27\25\0\31\27\7\0\12\27"+
    "\6\0\65\27\1\0\12\27\4\0\3\27\11\0\44\27"+
    "\2\0\1\27\11\0\105\27\4\0\4\27\3\0\13\27"+
    "\1\0\1\27\43\0\22\27\1\0\45\27\6\0\1\27"+
    "\101\0\7\27\1\0\1\27\1\0\4\27\1\0\17\27"+
    "\1\0\12\27\7\0\73\27\5\0\12\27\6\0\4\27"+
    "\1\0\10\27\2\0\2\27\2\0\26\27\1\0\7\27"+
    "\1\0\2\27\1\0\5\27\1\0\12\27\2\0\2\27"+
    "\2\0\3\27\2\0\1\27\6\0\1\27\5\0\7\27"+
    "\2\0\7\27\3\0\5\27\213\0\113\27\5\0\12\27"+
    "\4\0\2\27\40\0\106\27\1\0\1\27\10\0\12\27"+
    "\246\0\66\27\2\0\11\27\27\0\6\27\42\0\101\27"+
    "\3\0\1\27\13\0\12\27\46\0\71\27\7\0\12\27"+
    "\66\0\33\27\2\0\17\27\4\0\12\27\306\0\73\27"+
    "\145\0\112\27\25\0\1\27\240\0\10\27\2\0\56\27"+
    "\2\0\10\27\1\0\2\27\33\0\77\27\10\0\1\27"+
    "\10\0\112\27\3\0\1\27\42\0\71\27\7\0\11\27"+
    "\1\0\55\27\1\0\11\27\17\0\12\27\30\0\36\27"+
    "\2\0\26\27\1\0\16\27\111\0\7\27\1\0\2\27"+
    "\1\0\54\27\3\0\1\27\1\0\2\27\1\0\11\27"+
    "\10\0\12\27\6\0\6\27\1\0\2\27\1\0\45\27"+
    "\1\0\2\27\1\0\6\27\7\0\12\27\u0136\0\27\27"+
    "\11\0\232\27\146\0\157\27\21\0\304\27\274\0\57\27"+
    "\321\0\107\27\271\0\71\27\7\0\37\27\1\0\12\27"+
    "\146\0\36\27\2\0\5\27\13\0\67\27\11\0\4\27"+
    "\14\0\12\27\11\0\25\27\5\0\23\27\260\0\100\27"+
    "\200\0\113\27\4\0\71\27\7\0\21\27\100\0\2\27"+
    "\1\0\1\27\34\0\370\27\10\0\363\27\15\0\37\27"+
    "\61\0\3\27\21\0\4\27\10\0\u018c\27\4\0\153\27"+
    "\5\0\15\27\3\0\11\27\7\0\12\27\3\0\2\27"+
    "\306\0\5\27\3\0\6\27\10\0\10\27\2\0\7\27"+
    "\36\0\4\27\224\0\3\27\273\0\125\27\1\0\107\27"+
    "\1\0\2\27\2\0\1\27\2\0\2\27\2\0\4\27"+
    "\1\0\14\27\1\0\1\27\1\0\7\27\1\0\101\27"+
    "\1\0\4\27\2\0\10\27\1\0\7\27\1\0\34\27"+
    "\1\0\4\27\1\0\5\27\1\0\1\27\3\0\7\27"+
    "\1\0\u0154\27\2\0\31\27\1\0\31\27\1\0\37\27"+
    "\1\0\31\27\1\0\37\27\1\0\31\27\1\0\37\27"+
    "\1\0\31\27\1\0\37\27\1\0\31\27\1\0\10\27"+
    "\2\0\151\27\4\0\62\27\10\0\1\27\16\0\1\27"+
    "\26\0\5\27\1\0\17\27\120\0\7\27\1\0\21\27"+
    "\2\0\7\27\1\0\2\27\1\0\5\27\325\0\55\27"+
    "\3\0\16\27\2\0\12\27\4\0\1\27\u0171\0\72\27"+
    "\6\0\305\27\13\0\7\27\51\0\114\27\4\0\12\27"+
    "\246\0\4\27\1\0\33\27\1\0\2\27\1\0\1\27"+
    "\2\0\1\27\1\0\12\27\1\0\4\27\1\0\1\27"+
    "\1\0\1\27\6\0\1\27\4\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\3\27\1\0\2\27\1\0\1\27"+
    "\2\0\1\27\1\0\1\27\1\0\1\27\1\0\1\27"+
    "\1\0\1\27\1\0\2\27\1\0\1\27\2\0\4\27"+
    "\1\0\7\27\1\0\4\27\1\0\4\27\1\0\1\27"+
    "\1\0\12\27\1\0\21\27\5\0\3\27\1\0\5\27"+
    "\1\0\21\27\164\0\32\27\6\0\32\27\6\0\32\27"+
    "\166\0\327\27\51\0\65\27\13\0\336\27\2\0\u0182\27"+
    "\16\0\u0131\27\37\0\36\27\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\4\13\1\14\1\15\15\0"+
    "\3\13\1\16\26\0\2\13\12\0\1\17\21\0\2\13"+
    "\34\0\2\13\17\0\1\20\5\0\1\21\6\0\2\13"+
    "\3\0\1\22\6\0\1\23\7\0\1\24\6\0\1\25"+
    "\2\13\5\0\1\26\5\0\1\27\1\0\1\30\2\0"+
    "\1\31\3\0\1\32\2\0\2\13\10\0\1\33\10\0"+
    "\1\34\1\0\1\35\2\13\2\0\1\36\1\37\6\0"+
    "\1\40\1\41\5\0\2\13\6\0\1\42\1\0\1\43"+
    "\4\0\2\13\1\44\2\0\1\45\7\0\2\13\1\46"+
    "\3\0\1\47\4\0\2\13\5\0\1\50\1\0\2\13"+
    "\3\0\1\51\2\0\1\52\1\13\1\0\1\53\3\0"+
    "\1\13\2\0\1\54\1\0\1\13\2\0\1\55\1\13"+
    "\1\56\1\0\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\66\0\242\0\66\0\66"+
    "\0\66\0\330\0\66\0\66\0\66\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\66\0\66\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\66\0\u0546\0\u057c\0\u05b2\0\u05e8"+
    "\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798"+
    "\0\u07ce\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948"+
    "\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\66\0\u0c72"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332"+
    "\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2"+
    "\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692"+
    "\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\66"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\66\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6"+
    "\0\u1d1c\0\66\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60"+
    "\0\66\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda"+
    "\0\66\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\66"+
    "\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\66"+
    "\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\66\0\u23dc\0\66"+
    "\0\u2412\0\u2448\0\66\0\u247e\0\u24b4\0\u24ea\0\66\0\u2520"+
    "\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0"+
    "\0\u2706\0\u273c\0\u2772\0\66\0\u27a8\0\u27de\0\u2814\0\u284a"+
    "\0\u2880\0\u28b6\0\u28ec\0\u2922\0\66\0\u2958\0\66\0\u298e"+
    "\0\u29c4\0\u29fa\0\u2a30\0\66\0\66\0\u2a66\0\u2a9c\0\u2ad2"+
    "\0\u2b08\0\u2b3e\0\u2b74\0\66\0\66\0\u2baa\0\u2be0\0\u2c16"+
    "\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6"+
    "\0\u2dfc\0\u2e32\0\66\0\u2e68\0\66\0\u2e9e\0\u2ed4\0\u2f0a"+
    "\0\u2f40\0\u2f76\0\u2fac\0\66\0\u2fe2\0\u3018\0\66\0\u304e"+
    "\0\u3084\0\u30ba\0\u30f0\0\u3126\0\u315c\0\u3192\0\u31c8\0\u31fe"+
    "\0\66\0\u3234\0\u326a\0\u32a0\0\66\0\u32d6\0\u330c\0\u3342"+
    "\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2"+
    "\0\66\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600\0\u3636\0\66"+
    "\0\u366c\0\u36a2\0\u010e\0\u36d8\0\u370e\0\66\0\u3744\0\u377a"+
    "\0\u37b0\0\u37e6\0\u381c\0\u3852\0\66\0\u3888\0\u38be\0\u38f4"+
    "\0\u392a\0\66\0\u3960\0\66\0\u3996\0\u010e\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\32\16\1\17\1\20"+
    "\1\21\11\16\1\22\1\23\70\0\1\3\63\0\5\24"+
    "\1\0\10\24\1\25\1\24\1\26\1\27\1\30\1\31"+
    "\2\24\1\32\4\24\1\33\1\34\1\35\1\36\1\24"+
    "\1\37\1\40\24\24\12\0\1\12\3\0\46\16\14\0"+
    "\1\16\3\0\46\16\14\0\1\16\3\0\31\16\1\41"+
    "\14\16\14\0\1\16\3\0\36\16\1\42\7\16\14\0"+
    "\1\16\3\0\35\16\1\43\10\16\2\0\5\24\1\44"+
    "\65\24\1\44\30\24\1\45\34\24\1\44\10\24\1\46"+
    "\6\24\1\47\3\24\1\50\2\24\1\51\36\24\1\44"+
    "\10\24\1\52\54\24\1\44\31\24\1\53\33\24\1\44"+
    "\14\24\1\54\3\24\1\55\44\24\1\44\13\24\1\56"+
    "\11\24\1\57\37\24\1\44\26\24\1\60\36\24\1\44"+
    "\27\24\1\61\35\24\1\44\10\24\1\62\22\24\1\63"+
    "\31\24\1\44\10\24\1\64\3\24\1\65\50\24\1\44"+
    "\14\24\1\66\3\24\1\67\7\24\1\70\34\24\1\44"+
    "\31\24\1\71\26\24\11\0\1\72\1\16\3\0\46\16"+
    "\14\0\1\16\3\0\45\16\1\73\14\0\1\16\3\0"+
    "\36\16\1\74\7\16\2\0\5\24\1\44\14\24\1\75"+
    "\50\24\1\44\24\24\1\76\40\24\1\44\14\24\1\77"+
    "\50\24\1\44\10\24\1\100\54\24\1\44\23\24\1\101"+
    "\41\24\1\44\32\24\1\102\32\24\1\44\32\24\1\103"+
    "\32\24\1\44\12\24\1\104\52\24\1\44\12\24\1\105"+
    "\10\24\1\106\41\24\1\107\37\24\1\110\25\24\1\44"+
    "\13\24\1\111\15\24\1\112\33\24\1\44\24\24\1\113"+
    "\1\114\37\24\1\44\12\24\1\115\52\24\1\44\31\24"+
    "\1\116\33\24\1\44\25\24\1\117\37\24\1\44\13\24"+
    "\1\120\51\24\1\44\31\24\1\121\33\24\1\44\24\24"+
    "\1\122\11\24\1\123\26\24\1\44\14\24\1\124\50\24"+
    "\1\44\20\24\1\125\44\24\1\44\33\24\1\126\24\24"+
    "\61\0\1\127\1\130\15\0\1\16\3\0\35\16\1\131"+
    "\10\16\14\0\1\16\3\0\27\16\1\132\16\16\2\0"+
    "\5\24\1\44\10\24\1\133\54\24\1\44\27\24\1\134"+
    "\35\24\1\44\12\24\1\135\52\24\1\44\31\24\1\136"+
    "\33\24\1\44\33\24\1\137\31\24\1\44\26\24\1\140"+
    "\36\24\1\44\10\24\1\141\17\24\1\142\34\24\1\44"+
    "\17\24\1\143\45\24\1\44\17\24\1\144\45\24\1\44"+
    "\10\24\1\145\54\24\1\44\32\24\1\146\32\24\1\44"+
    "\20\24\1\147\44\24\1\44\32\24\1\150\32\24\1\44"+
    "\11\24\1\151\53\24\1\44\14\24\1\152\50\24\1\44"+
    "\20\24\1\153\44\24\1\44\31\24\1\154\33\24\1\44"+
    "\32\24\1\155\32\24\1\44\20\24\1\156\44\24\1\44"+
    "\27\24\1\157\35\24\1\44\10\24\1\160\54\24\1\44"+
    "\32\24\1\161\32\24\1\44\24\24\1\162\40\24\1\44"+
    "\34\24\1\163\30\24\1\44\10\24\1\164\47\24\57\0"+
    "\1\165\66\0\1\166\17\0\1\16\3\0\37\16\1\167"+
    "\6\16\14\0\1\16\3\0\33\16\1\170\12\16\2\0"+
    "\5\24\1\44\37\24\1\171\25\24\1\44\26\24\1\172"+
    "\36\24\1\44\22\24\1\173\42\24\1\44\14\24\1\174"+
    "\50\24\1\44\24\24\1\175\40\24\1\44\31\24\1\176"+
    "\33\24\1\44\13\24\1\177\51\24\1\44\33\24\1\200"+
    "\31\24\1\44\10\24\1\201\54\24\1\44\14\24\1\202"+
    "\50\24\1\44\31\24\1\203\33\24\1\44\30\24\1\204"+
    "\34\24\1\44\12\24\1\205\52\24\1\44\20\24\1\206"+
    "\44\24\1\44\30\24\1\207\34\24\1\210\65\24\1\44"+
    "\26\24\1\211\36\24\1\44\35\24\1\212\27\24\1\44"+
    "\14\24\1\213\50\24\1\44\26\24\1\214\36\24\1\44"+
    "\33\24\1\215\31\24\1\216\65\24\1\44\26\24\1\217"+
    "\36\24\1\44\27\24\1\220\35\24\1\44\20\24\1\221"+
    "\44\24\1\44\30\24\1\222\27\24\53\0\1\223\63\0"+
    "\1\224\26\0\1\16\3\0\27\16\1\225\16\16\14\0"+
    "\1\16\3\0\36\16\1\226\7\16\2\0\5\24\1\44"+
    "\32\24\1\227\32\24\1\44\37\24\1\230\25\24\1\44"+
    "\11\24\1\231\53\24\1\232\65\24\1\44\25\24\1\233"+
    "\37\24\1\44\37\24\1\234\25\24\1\44\26\24\1\235"+
    "\36\24\1\44\12\24\1\236\52\24\1\44\37\24\1\237"+
    "\25\24\1\44\30\24\1\240\34\24\1\241\65\24\1\44"+
    "\20\24\1\242\44\24\1\44\14\24\1\243\50\24\1\44"+
    "\32\24\1\244\32\24\1\44\14\24\1\245\50\24\1\44"+
    "\25\24\1\246\37\24\1\44\26\24\1\247\36\24\1\44"+
    "\26\24\1\250\36\24\1\251\65\24\1\44\14\24\1\252"+
    "\50\24\1\44\37\24\1\253\25\24\1\44\26\24\1\254"+
    "\36\24\1\44\10\24\1\255\54\24\1\44\20\24\1\256"+
    "\37\24\63\0\1\257\61\0\1\260\20\0\1\16\3\0"+
    "\41\16\1\261\4\16\14\0\1\16\3\0\45\16\1\262"+
    "\2\0\5\24\1\44\14\24\1\263\50\24\1\44\32\24"+
    "\1\264\32\24\1\44\26\24\1\265\36\24\1\44\10\24"+
    "\1\266\54\24\1\44\30\24\1\267\34\24\1\270\65\24"+
    "\1\44\32\24\1\271\32\24\1\44\12\24\1\272\11\24"+
    "\1\273\40\24\1\44\26\24\1\274\36\24\1\44\34\24"+
    "\1\275\30\24\1\276\65\24\1\44\33\24\1\277\31\24"+
    "\1\300\65\24\1\44\14\24\1\301\50\24\1\44\30\24"+
    "\1\302\34\24\1\303\65\24\1\44\31\24\1\304\33\24"+
    "\1\44\34\24\1\305\30\24\1\44\37\24\1\306\25\24"+
    "\1\307\65\24\1\44\26\24\1\310\31\24\53\0\1\311"+
    "\24\0\1\16\3\0\33\16\1\312\12\16\14\0\1\16"+
    "\3\0\35\16\1\313\10\16\2\0\5\24\1\44\36\24"+
    "\1\314\26\24\1\44\14\24\1\315\50\24\1\44\36\24"+
    "\1\316\26\24\1\44\31\24\1\317\33\24\1\44\14\24"+
    "\1\320\50\24\1\44\33\24\1\321\31\24\1\44\30\24"+
    "\1\322\34\24\1\44\26\24\1\323\36\24\1\324\65\24"+
    "\1\44\20\24\1\325\44\24\1\44\12\24\1\326\52\24"+
    "\1\44\31\24\1\327\33\24\1\44\13\24\1\330\51\24"+
    "\1\44\32\24\1\331\32\24\1\44\20\24\1\332\44\24"+
    "\1\44\27\24\1\333\2\24\1\334\32\24\1\335\37\24"+
    "\1\336\20\24\46\0\1\337\31\0\1\16\3\0\42\16"+
    "\1\340\3\16\14\0\1\16\3\0\37\16\1\341\6\16"+
    "\2\0\5\24\1\44\32\24\1\342\32\24\1\44\36\24"+
    "\1\343\26\24\1\344\65\24\1\345\65\24\1\44\12\24"+
    "\1\346\52\24\1\44\30\24\1\347\34\24\1\44\14\24"+
    "\1\350\50\24\1\44\13\24\1\351\51\24\1\44\10\24"+
    "\1\352\54\24\1\44\20\24\1\353\44\24\1\354\65\24"+
    "\1\355\65\24\1\44\10\24\1\356\54\24\1\44\31\24"+
    "\1\357\33\24\1\44\30\24\1\360\34\24\1\44\26\24"+
    "\1\361\36\24\1\44\12\24\1\362\45\24\12\0\1\16"+
    "\3\0\40\16\1\363\5\16\14\0\1\16\3\0\27\16"+
    "\1\364\16\16\2\0\5\24\1\44\26\24\1\365\36\24"+
    "\1\44\32\24\1\366\32\24\1\44\26\24\1\367\36\24"+
    "\1\44\10\24\1\370\54\24\1\44\10\24\1\371\54\24"+
    "\1\44\20\24\1\372\44\24\1\373\65\24\1\44\26\24"+
    "\1\374\36\24\1\375\65\24\1\44\20\24\1\376\44\24"+
    "\1\44\14\24\1\377\50\24\1\44\32\24\1\u0100\32\24"+
    "\1\44\30\24\1\u0101\27\24\12\0\1\16\3\0\44\16"+
    "\1\u0102\1\16\14\0\1\16\3\0\41\16\1\u0103\4\16"+
    "\2\0\5\24\1\u0104\65\24\1\44\26\24\1\u0105\36\24"+
    "\1\44\27\24\1\u0106\35\24\1\u0107\65\24\1\44\12\24"+
    "\1\u0108\52\24\1\44\15\24\1\u0109\47\24\1\44\25\24"+
    "\1\u010a\37\24\1\44\11\24\1\u010b\53\24\1\44\16\24"+
    "\1\u010c\46\24\1\44\10\24\1\u010d\54\24\1\44\14\24"+
    "\1\u010e\43\24\12\0\1\16\3\0\33\16\1\u010f\12\16"+
    "\14\0\1\16\3\0\33\16\1\u0110\12\16\2\0\5\24"+
    "\1\u0111\65\24\1\44\20\24\1\u0112\44\24\1\44\20\24"+
    "\1\u0113\44\24\1\44\20\24\1\u0114\44\24\1\u0115\65\24"+
    "\1\44\23\24\1\u0116\41\24\1\44\33\24\1\u0117\31\24"+
    "\1\44\23\24\1\u0118\41\24\1\44\10\24\1\u0119\47\24"+
    "\12\0\1\16\3\0\42\16\1\u011a\3\16\14\0\1\16"+
    "\3\0\42\16\1\u011b\3\16\2\0\5\24\1\44\23\24"+
    "\1\u011c\41\24\1\44\26\24\1\u011d\36\24\1\44\12\24"+
    "\1\u011e\52\24\1\44\14\24\1\u011f\50\24\1\44\25\24"+
    "\1\u0120\37\24\1\u0121\65\24\1\44\12\24\1\u0122\45\24"+
    "\12\0\1\16\3\0\43\16\1\u0123\2\16\14\0\1\16"+
    "\3\0\40\16\1\u0124\5\16\2\0\5\24\1\44\10\24"+
    "\1\u0125\54\24\1\44\25\24\1\u0126\37\24\1\44\10\24"+
    "\1\u0127\54\24\1\u0128\65\24\1\44\32\24\1\u0129\32\24"+
    "\1\44\20\24\1\u012a\37\24\12\0\1\16\3\0\30\16"+
    "\1\u012b\15\16\14\0\1\16\3\0\44\16\1\u012c\1\16"+
    "\2\0\5\24\1\44\13\24\1\u012d\51\24\1\u012e\65\24"+
    "\1\44\12\24\1\u012f\52\24\1\44\10\24\1\u0130\54\24"+
    "\1\44\26\24\1\u0131\31\24\12\0\1\16\3\0\33\16"+
    "\1\u0132\12\16\2\0\5\24\1\44\26\24\1\u0133\36\24"+
    "\1\44\20\24\1\u0134\44\24\1\u0135\65\24\1\44\25\24"+
    "\1\u0136\32\24\12\0\1\16\3\0\42\16\1\u0137\3\16"+
    "\2\0\5\24\1\44\31\24\1\u0138\33\24\1\44\26\24"+
    "\1\u0139\36\24\1\u013a\60\24\12\0\1\16\3\0\43\16"+
    "\1\u013b\2\16\2\0\5\24\1\u013c\65\24\1\44\25\24"+
    "\1\u013d\32\24\12\0\1\16\3\0\30\16\1\u013e\15\16"+
    "\2\0\5\24\1\u013f\60\24";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14796];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\3\11\1\1\3\11"+
    "\4\1\2\11\15\0\3\1\1\11\26\0\2\1\12\0"+
    "\1\11\21\0\2\1\34\0\2\1\17\0\1\11\5\0"+
    "\1\11\6\0\2\1\3\0\1\11\6\0\1\11\7\0"+
    "\1\11\6\0\1\11\2\1\5\0\1\11\5\0\1\11"+
    "\1\0\1\11\2\0\1\11\3\0\1\11\2\0\2\1"+
    "\10\0\1\11\10\0\1\11\1\0\1\11\2\1\2\0"+
    "\2\11\6\0\2\11\5\0\2\1\6\0\1\11\1\0"+
    "\1\11\4\0\2\1\1\11\2\0\1\11\7\0\2\1"+
    "\1\11\3\0\1\11\4\0\2\1\5\0\1\11\1\0"+
    "\2\1\3\0\1\11\2\0\2\1\1\0\1\11\3\0"+
    "\1\1\2\0\1\11\1\0\1\1\2\0\1\11\1\1"+
    "\1\11\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[319];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type){
        return new Symbol(type, yyline+1,yycolumn+1);
    }
    private Symbol symbol(int type, Object value){
        //System.out.println(type + " line: " + (yyline+1) + " col: "+(yycolumn+1) + " " + value);
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }
    private void error(){
        //ErrorsLP.addError(yytext(), yyline+1, yycolumn+1, "Error Léxico","Cadena no definida");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error();
            }
          // fall through
          case 49: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 50: break;
          case 3:
            { return symbol(EX, yytext());
            }
          // fall through
          case 51: break;
          case 4:
            { return symbol(LPAREN, yytext());
            }
          // fall through
          case 52: break;
          case 5:
            { return symbol(RPAREN, yytext());
            }
          // fall through
          case 53: break;
          case 6:
            { return symbol(COMMA, yytext());
            }
          // fall through
          case 54: break;
          case 7:
            { return symbol(DIGIT, Integer.parseInt(yytext()));
            }
          // fall through
          case 55: break;
          case 8:
            { return symbol(COLON, yytext());
            }
          // fall through
          case 56: break;
          case 9:
            { return symbol(LT, yytext());
            }
          // fall through
          case 57: break;
          case 10:
            { return symbol(GT, yytext());
            }
          // fall through
          case 58: break;
          case 11:
            {
            }
          // fall through
          case 59: break;
          case 12:
            { return symbol(LBRACE, yytext());
            }
          // fall through
          case 60: break;
          case 13:
            { return symbol(RBRACE, yytext());
            }
          // fall through
          case 61: break;
          case 14:
            { return symbol(STRING, yytext());
            }
          // fall through
          case 62: break;
          case 15:
            { return symbol(ID, yytext());
            }
          // fall through
          case 63: break;
          case 16:
            { return symbol(COMBO, yytext());
            }
          // fall through
          case 64: break;
          case 17:
            { return symbol(TEMA, yytext());
            }
          // fall through
          case 65: break;
          case 18:
            { return symbol(CLASE, yytext());
            }
          // fall through
          case 66: break;
          case 19:
            { return symbol(FILAS, yytext());
            }
          // fall through
          case 67: break;
          case 20:
            { return symbol(RADIO, yytext());
            }
          // fall through
          case 68: break;
          case 21:
            { return symbol(DB_USER, yytext());
            }
          // fall through
          case 69: break;
          case 22:
            { return symbol(ESTADO, yytext());
            }
          // fall through
          case 70: break;
          case 23:
            { return symbol(INDICE, yytext());
            }
          // fall through
          case 71: break;
          case 24:
            { return symbol(NOMBRE, yytext());
            }
          // fall through
          case 72: break;
          case 25:
            { return symbol(PUNTEO, yytext());
            }
          // fall through
          case 73: break;
          case 26:
            { return symbol(TRIVIA, yytext());
            }
          // fall through
          case 74: break;
          case 27:
            { return symbol(FICHERO, yytext());
            }
          // fall through
          case 75: break;
          case 28:
            { return symbol(USUARIO, yytext());
            }
          // fall through
          case 76: break;
          case 29:
            { return symbol(DB_TRIVIA, yytext());
            }
          // fall through
          case 77: break;
          case 30:
            { return symbol(CHECKBOX, yytext());
            }
          // fall through
          case 78: break;
          case 31:
            { return symbol(COLUMNAS, yytext());
            }
          // fall through
          case 79: break;
          case 32:
            { return symbol(OPCIONES, yytext());
            }
          // fall through
          case 80: break;
          case 33:
            { return symbol(PASSWORD, yytext());
            }
          // fall through
          case 81: break;
          case 34:
            { return symbol(ID_TRIVIA, yytext());
            }
          // fall through
          case 82: break;
          case 35:
            { return symbol(RESPUESTA, yytext());
            }
          // fall through
          case 83: break;
          case 36:
            { return symbol(AREA_TEXTO, yytext());
            }
          // fall through
          case 84: break;
          case 37:
            { return symbol(ESTRUCTURA, yytext());
            }
          // fall through
          case 85: break;
          case 38:
            { return symbol(CAMPO_TEXTO, yytext());
            }
          // fall through
          case 86: break;
          case 39:
            { return symbol(INSTITUCION, yytext());
            }
          // fall through
          case 87: break;
          case 40:
            { return symbol(TIEMPO_TOTAL, yytext());
            }
          // fall through
          case 88: break;
          case 41:
            { return symbol(TEXTO_VISIBLE, yytext());
            }
          // fall through
          case 89: break;
          case 42:
            { return symbol(ENVIO_RESPUESTA, yytext());
            }
          // fall through
          case 90: break;
          case 43:
            { return symbol(FECHA_CREACION, yytext());
            }
          // fall through
          case 91: break;
          case 44:
            { return symbol(TIEMPO_PREGUNTA, yytext());
            }
          // fall through
          case 92: break;
          case 45:
            { return symbol(USUARIO_CREACION, yytext());
            }
          // fall through
          case 93: break;
          case 46:
            { return symbol(DATOS_RECOPILADOS, yytext());
            }
          // fall through
          case 94: break;
          case 47:
            { return symbol(FIN_ENVIO_RESPUESTA, yytext());
            }
          // fall through
          case 95: break;
          case 48:
            { return symbol(FECHA_MODIFICACION, yytext());
            }
          // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
