// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: Lexer.flex

package com.navi.quizcraftapp.parser_lexer;
import java_cup.runtime.*;
import static com.navi.quizcraftapp.parser_lexer.sym.*;

@SuppressWarnings("fallthrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\5\0\1\6\1\7\2\0\1\10\3\0"+
    "\12\11\1\12\1\0\1\13\1\0\1\14\2\0\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\26"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\2\26"+
    "\3\0\1\26\1\44\1\0\1\45\3\26\1\46\1\47"+
    "\2\26\1\50\4\26\1\51\1\52\1\53\1\26\1\54"+
    "\1\55\1\56\1\57\1\60\4\26\1\61\1\0\1\62"+
    "\43\0\1\26\10\0\1\26\1\0\1\26\3\0\1\26"+
    "\4\0\1\26\4\0\1\26\4\0\30\26\1\0\37\26"+
    "\1\0\u01ca\26\4\0\14\26\16\0\5\26\7\0\1\26"+
    "\1\0\1\26\21\0\165\26\1\0\2\26\2\0\4\26"+
    "\1\0\1\26\6\0\1\26\1\0\3\26\1\0\1\26"+
    "\1\0\24\26\1\0\123\26\1\0\213\26\1\0\255\26"+
    "\1\0\46\26\2\0\1\26\6\0\51\26\10\0\55\26"+
    "\1\0\1\26\1\0\2\26\1\0\2\26\1\0\1\26"+
    "\10\0\33\26\4\0\4\26\35\0\13\26\5\0\112\26"+
    "\4\0\146\26\1\0\10\26\2\0\12\26\1\0\23\26"+
    "\2\0\1\26\20\0\73\26\2\0\145\26\16\0\66\26"+
    "\4\0\1\26\2\0\1\26\2\0\56\26\22\0\34\26"+
    "\4\0\13\26\65\0\25\26\1\0\10\26\25\0\17\26"+
    "\1\0\201\26\2\0\12\26\1\0\23\26\1\0\10\26"+
    "\2\0\2\26\2\0\26\26\1\0\7\26\1\0\1\26"+
    "\3\0\4\26\2\0\11\26\2\0\2\26\2\0\4\26"+
    "\10\0\1\26\4\0\2\26\1\0\5\26\2\0\14\26"+
    "\12\0\1\26\1\0\1\26\2\0\3\26\1\0\6\26"+
    "\4\0\2\26\2\0\26\26\1\0\7\26\1\0\2\26"+
    "\1\0\2\26\1\0\2\26\2\0\1\26\1\0\5\26"+
    "\4\0\2\26\2\0\3\26\3\0\1\26\7\0\4\26"+
    "\1\0\1\26\7\0\20\26\13\0\3\26\1\0\11\26"+
    "\1\0\3\26\1\0\26\26\1\0\7\26\1\0\2\26"+
    "\1\0\5\26\2\0\12\26\1\0\3\26\1\0\3\26"+
    "\2\0\1\26\17\0\4\26\2\0\12\26\11\0\7\26"+
    "\1\0\3\26\1\0\10\26\2\0\2\26\2\0\26\26"+
    "\1\0\7\26\1\0\2\26\1\0\5\26\2\0\11\26"+
    "\2\0\2\26\2\0\3\26\10\0\2\26\4\0\2\26"+
    "\1\0\5\26\2\0\12\26\1\0\1\26\20\0\2\26"+
    "\1\0\6\26\3\0\3\26\1\0\4\26\3\0\2\26"+
    "\1\0\1\26\1\0\2\26\3\0\2\26\3\0\3\26"+
    "\3\0\14\26\4\0\5\26\3\0\3\26\1\0\4\26"+
    "\2\0\1\26\6\0\1\26\16\0\12\26\20\0\15\26"+
    "\1\0\3\26\1\0\27\26\1\0\20\26\3\0\10\26"+
    "\1\0\3\26\1\0\4\26\7\0\2\26\1\0\3\26"+
    "\5\0\4\26\2\0\12\26\20\0\4\26\1\0\10\26"+
    "\1\0\3\26\1\0\27\26\1\0\12\26\1\0\5\26"+
    "\2\0\11\26\1\0\3\26\1\0\4\26\7\0\2\26"+
    "\7\0\1\26\1\0\4\26\2\0\12\26\1\0\2\26"+
    "\15\0\4\26\1\0\10\26\1\0\3\26\1\0\63\26"+
    "\1\0\3\26\1\0\5\26\5\0\4\26\7\0\5\26"+
    "\2\0\12\26\12\0\6\26\2\0\2\26\1\0\22\26"+
    "\3\0\30\26\1\0\11\26\1\0\1\26\2\0\7\26"+
    "\3\0\1\26\4\0\6\26\1\0\1\26\1\0\10\26"+
    "\6\0\12\26\2\0\2\26\15\0\72\26\5\0\17\26"+
    "\1\0\12\26\47\0\2\26\1\0\1\26\1\0\5\26"+
    "\1\0\30\26\1\0\1\26\1\0\27\26\2\0\5\26"+
    "\1\0\1\26\1\0\6\26\2\0\12\26\2\0\4\26"+
    "\40\0\1\26\27\0\2\26\6\0\12\26\13\0\1\26"+
    "\1\0\1\26\1\0\1\26\4\0\12\26\1\0\44\26"+
    "\4\0\24\26\1\0\22\26\1\0\44\26\11\0\1\26"+
    "\71\0\112\26\6\0\116\26\2\0\46\26\1\0\1\26"+
    "\5\0\1\26\2\0\53\26\1\0\115\26\1\0\4\26"+
    "\2\0\7\26\1\0\1\26\1\0\4\26\2\0\51\26"+
    "\1\0\4\26\2\0\41\26\1\0\4\26\2\0\7\26"+
    "\1\0\1\26\1\0\4\26\2\0\17\26\1\0\71\26"+
    "\1\0\4\26\2\0\103\26\2\0\3\26\40\0\20\26"+
    "\20\0\126\26\2\0\6\26\3\0\u016c\26\2\0\21\26"+
    "\1\0\32\26\5\0\113\26\3\0\13\26\7\0\15\26"+
    "\1\0\7\26\13\0\25\26\13\0\24\26\14\0\15\26"+
    "\1\0\3\26\1\0\2\26\14\0\124\26\3\0\1\26"+
    "\4\0\2\26\2\0\12\26\41\0\3\26\2\0\12\26"+
    "\6\0\131\26\7\0\53\26\5\0\106\26\12\0\37\26"+
    "\1\0\14\26\4\0\14\26\12\0\50\26\2\0\5\26"+
    "\13\0\54\26\4\0\32\26\6\0\12\26\46\0\34\26"+
    "\4\0\77\26\1\0\35\26\2\0\13\26\6\0\12\26"+
    "\15\0\1\26\10\0\17\26\101\0\114\26\4\0\12\26"+
    "\21\0\11\26\14\0\164\26\14\0\70\26\10\0\12\26"+
    "\3\0\61\26\2\0\11\26\7\0\53\26\2\0\3\26"+
    "\20\0\3\26\1\0\47\26\5\0\372\26\1\0\33\26"+
    "\2\0\6\26\2\0\46\26\2\0\6\26\2\0\10\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\37\26"+
    "\2\0\65\26\1\0\7\26\1\0\1\26\3\0\3\26"+
    "\1\0\7\26\3\0\4\26\2\0\6\26\4\0\15\26"+
    "\5\0\3\26\1\0\7\26\102\0\2\26\23\0\1\26"+
    "\34\0\1\26\15\0\1\26\20\0\15\26\63\0\41\26"+
    "\21\0\1\26\4\0\1\26\2\0\12\26\1\0\1\26"+
    "\3\0\5\26\6\0\1\26\1\0\1\26\1\0\1\26"+
    "\1\0\4\26\1\0\13\26\2\0\4\26\5\0\5\26"+
    "\4\0\1\26\21\0\51\26\u022d\0\64\26\26\0\57\26"+
    "\1\0\57\26\1\0\205\26\6\0\11\26\14\0\46\26"+
    "\1\0\1\26\5\0\1\26\2\0\70\26\7\0\1\26"+
    "\17\0\30\26\11\0\7\26\1\0\7\26\1\0\7\26"+
    "\1\0\7\26\1\0\7\26\1\0\7\26\1\0\7\26"+
    "\1\0\7\26\1\0\40\26\57\0\1\26\325\0\3\26"+
    "\31\0\17\26\1\0\5\26\2\0\5\26\4\0\126\26"+
    "\2\0\2\26\2\0\3\26\1\0\132\26\1\0\4\26"+
    "\5\0\53\26\1\0\136\26\21\0\33\26\65\0\306\26"+
    "\112\0\360\26\20\0\215\26\103\0\56\26\2\0\15\26"+
    "\3\0\34\26\24\0\63\26\1\0\12\26\1\0\163\26"+
    "\45\0\11\26\2\0\147\26\2\0\65\26\2\0\5\26"+
    "\60\0\61\26\30\0\64\26\14\0\106\26\12\0\12\26"+
    "\6\0\30\26\3\0\1\26\1\0\61\26\2\0\44\26"+
    "\14\0\35\26\3\0\101\26\16\0\13\26\6\0\37\26"+
    "\1\0\67\26\11\0\16\26\2\0\12\26\6\0\27\26"+
    "\3\0\111\26\30\0\3\26\2\0\20\26\2\0\5\26"+
    "\12\0\6\26\2\0\6\26\2\0\6\26\11\0\7\26"+
    "\1\0\7\26\1\0\53\26\1\0\14\26\10\0\173\26"+
    "\1\0\2\26\2\0\12\26\6\0\244\26\14\0\27\26"+
    "\4\0\61\26\4\0\156\26\2\0\152\26\46\0\7\26"+
    "\14\0\5\26\5\0\14\26\1\0\15\26\1\0\5\26"+
    "\1\0\1\26\1\0\2\26\1\0\2\26\1\0\154\26"+
    "\41\0\153\26\22\0\100\26\2\0\66\26\50\0\14\26"+
    "\4\0\20\26\20\0\20\26\3\0\2\26\30\0\3\26"+
    "\40\0\5\26\1\0\207\26\23\0\12\26\7\0\32\26"+
    "\4\0\1\26\1\0\32\26\13\0\131\26\3\0\6\26"+
    "\2\0\6\26\2\0\6\26\2\0\3\26\43\0\14\26"+
    "\1\0\32\26\1\0\23\26\1\0\2\26\1\0\17\26"+
    "\2\0\16\26\42\0\173\26\105\0\65\26\210\0\1\26"+
    "\202\0\35\26\3\0\61\26\17\0\1\26\37\0\40\26"+
    "\15\0\36\26\5\0\53\26\5\0\36\26\2\0\44\26"+
    "\4\0\10\26\1\0\5\26\52\0\236\26\2\0\12\26"+
    "\6\0\44\26\4\0\44\26\4\0\50\26\10\0\64\26"+
    "\234\0\67\26\11\0\26\26\12\0\10\26\230\0\6\26"+
    "\2\0\1\26\1\0\54\26\1\0\2\26\3\0\1\26"+
    "\2\0\27\26\12\0\27\26\11\0\37\26\101\0\23\26"+
    "\1\0\2\26\12\0\26\26\12\0\32\26\106\0\70\26"+
    "\6\0\2\26\100\0\4\26\1\0\2\26\5\0\10\26"+
    "\1\0\3\26\1\0\35\26\2\0\3\26\4\0\1\26"+
    "\40\0\35\26\3\0\35\26\43\0\10\26\1\0\36\26"+
    "\31\0\66\26\12\0\26\26\12\0\23\26\15\0\22\26"+
    "\156\0\111\26\67\0\63\26\15\0\63\26\15\0\50\26"+
    "\10\0\12\26\306\0\35\26\12\0\1\26\10\0\41\26"+
    "\217\0\27\26\11\0\107\26\37\0\12\26\17\0\74\26"+
    "\25\0\31\26\7\0\12\26\6\0\65\26\1\0\12\26"+
    "\4\0\3\26\11\0\44\26\2\0\1\26\11\0\105\26"+
    "\4\0\4\26\3\0\13\26\1\0\1\26\43\0\22\26"+
    "\1\0\45\26\6\0\1\26\101\0\7\26\1\0\1\26"+
    "\1\0\4\26\1\0\17\26\1\0\12\26\7\0\73\26"+
    "\5\0\12\26\6\0\4\26\1\0\10\26\2\0\2\26"+
    "\2\0\26\26\1\0\7\26\1\0\2\26\1\0\5\26"+
    "\1\0\12\26\2\0\2\26\2\0\3\26\2\0\1\26"+
    "\6\0\1\26\5\0\7\26\2\0\7\26\3\0\5\26"+
    "\213\0\113\26\5\0\12\26\4\0\2\26\40\0\106\26"+
    "\1\0\1\26\10\0\12\26\246\0\66\26\2\0\11\26"+
    "\27\0\6\26\42\0\101\26\3\0\1\26\13\0\12\26"+
    "\46\0\71\26\7\0\12\26\66\0\33\26\2\0\17\26"+
    "\4\0\12\26\306\0\73\26\145\0\112\26\25\0\1\26"+
    "\240\0\10\26\2\0\56\26\2\0\10\26\1\0\2\26"+
    "\33\0\77\26\10\0\1\26\10\0\112\26\3\0\1\26"+
    "\42\0\71\26\7\0\11\26\1\0\55\26\1\0\11\26"+
    "\17\0\12\26\30\0\36\26\2\0\26\26\1\0\16\26"+
    "\111\0\7\26\1\0\2\26\1\0\54\26\3\0\1\26"+
    "\1\0\2\26\1\0\11\26\10\0\12\26\6\0\6\26"+
    "\1\0\2\26\1\0\45\26\1\0\2\26\1\0\6\26"+
    "\7\0\12\26\u0136\0\27\26\11\0\232\26\146\0\157\26"+
    "\21\0\304\26\274\0\57\26\321\0\107\26\271\0\71\26"+
    "\7\0\37\26\1\0\12\26\146\0\36\26\2\0\5\26"+
    "\13\0\67\26\11\0\4\26\14\0\12\26\11\0\25\26"+
    "\5\0\23\26\260\0\100\26\200\0\113\26\4\0\71\26"+
    "\7\0\21\26\100\0\2\26\1\0\1\26\34\0\370\26"+
    "\10\0\363\26\15\0\37\26\61\0\3\26\21\0\4\26"+
    "\10\0\u018c\26\4\0\153\26\5\0\15\26\3\0\11\26"+
    "\7\0\12\26\3\0\2\26\306\0\5\26\3\0\6\26"+
    "\10\0\10\26\2\0\7\26\36\0\4\26\224\0\3\26"+
    "\273\0\125\26\1\0\107\26\1\0\2\26\2\0\1\26"+
    "\2\0\2\26\2\0\4\26\1\0\14\26\1\0\1\26"+
    "\1\0\7\26\1\0\101\26\1\0\4\26\2\0\10\26"+
    "\1\0\7\26\1\0\34\26\1\0\4\26\1\0\5\26"+
    "\1\0\1\26\3\0\7\26\1\0\u0154\26\2\0\31\26"+
    "\1\0\31\26\1\0\37\26\1\0\31\26\1\0\37\26"+
    "\1\0\31\26\1\0\37\26\1\0\31\26\1\0\37\26"+
    "\1\0\31\26\1\0\10\26\2\0\151\26\4\0\62\26"+
    "\10\0\1\26\16\0\1\26\26\0\5\26\1\0\17\26"+
    "\120\0\7\26\1\0\21\26\2\0\7\26\1\0\2\26"+
    "\1\0\5\26\325\0\55\26\3\0\16\26\2\0\12\26"+
    "\4\0\1\26\u0171\0\72\26\6\0\305\26\13\0\7\26"+
    "\51\0\114\26\4\0\12\26\246\0\4\26\1\0\33\26"+
    "\1\0\2\26\1\0\1\26\2\0\1\26\1\0\12\26"+
    "\1\0\4\26\1\0\1\26\1\0\1\26\6\0\1\26"+
    "\4\0\1\26\1\0\1\26\1\0\1\26\1\0\3\26"+
    "\1\0\2\26\1\0\1\26\2\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\1\26\1\0\1\26\1\0\2\26"+
    "\1\0\1\26\2\0\4\26\1\0\7\26\1\0\4\26"+
    "\1\0\4\26\1\0\1\26\1\0\12\26\1\0\21\26"+
    "\5\0\3\26\1\0\5\26\1\0\21\26\164\0\32\26"+
    "\6\0\32\26\6\0\32\26\166\0\327\26\51\0\65\26"+
    "\13\0\336\26\2\0\u0182\26\16\0\u0131\26\37\0\36\26"+
    "\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\3\13\1\14\1\15\15\0"+
    "\2\13\1\16\25\0\2\13\12\0\1\17\17\0\2\13"+
    "\32\0\2\13\17\0\1\20\5\0\1\21\4\0\2\13"+
    "\3\0\1\22\6\0\1\23\7\0\1\24\5\0\2\13"+
    "\5\0\1\25\5\0\1\26\1\0\1\27\2\0\1\30"+
    "\3\0\1\31\1\0\2\13\10\0\1\32\10\0\1\33"+
    "\1\0\2\13\2\0\1\34\1\35\6\0\1\36\1\37"+
    "\5\0\2\13\6\0\1\40\1\0\1\41\4\0\2\13"+
    "\1\42\2\0\1\43\7\0\2\13\1\44\3\0\1\45"+
    "\4\0\2\13\5\0\1\46\1\0\2\13\3\0\1\47"+
    "\2\0\1\50\1\13\1\0\1\51\3\0\1\13\2\0"+
    "\1\52\1\0\1\13\2\0\1\53\1\13\1\54\1\0"+
    "\1\55\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\146\0\63\0\231\0\63\0\63"+
    "\0\63\0\314\0\63\0\63\0\63\0\377\0\u0132\0\u0165"+
    "\0\63\0\63\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\63\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594"+
    "\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693\0\u06c6\0\u06f9\0\u072c"+
    "\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4"+
    "\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c"+
    "\0\u0a8f\0\u0ac2\0\u0af5\0\63\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1"+
    "\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1"+
    "\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089"+
    "\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221"+
    "\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9"+
    "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9"+
    "\0\63\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\63\0\u181b"+
    "\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3"+
    "\0\63\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\63"+
    "\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u1c4a\0\63"+
    "\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\u1daf\0\u1de2"+
    "\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\63\0\u1ee1\0\u1f14\0\u1f47"+
    "\0\u1f7a\0\u1fad\0\63\0\u1fe0\0\63\0\u2013\0\u2046\0\63"+
    "\0\u2079\0\u20ac\0\u20df\0\63\0\u2112\0\u2145\0\u2178\0\u21ab"+
    "\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd\0\u2310\0\63"+
    "\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u240f\0\u2442\0\u2475\0\u24a8"+
    "\0\63\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7\0\63\0\63"+
    "\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\u26d9\0\63\0\63"+
    "\0\u270c\0\u273f\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\u2871"+
    "\0\u28a4\0\u28d7\0\u290a\0\u293d\0\u2970\0\63\0\u29a3\0\63"+
    "\0\u29d6\0\u2a09\0\u2a3c\0\u2a6f\0\u2aa2\0\u2ad5\0\63\0\u2b08"+
    "\0\u2b3b\0\63\0\u2b6e\0\u2ba1\0\u2bd4\0\u2c07\0\u2c3a\0\u2c6d"+
    "\0\u2ca0\0\u2cd3\0\u2d06\0\63\0\u2d39\0\u2d6c\0\u2d9f\0\63"+
    "\0\u2dd2\0\u2e05\0\u2e38\0\u2e6b\0\u2e9e\0\u2ed1\0\u2f04\0\u2f37"+
    "\0\u2f6a\0\u2f9d\0\u2fd0\0\63\0\u3003\0\u3036\0\u3069\0\u309c"+
    "\0\u30cf\0\u3102\0\63\0\u3135\0\u3168\0\377\0\u319b\0\u31ce"+
    "\0\63\0\u3201\0\u3234\0\u3267\0\u329a\0\u32cd\0\u3300\0\63"+
    "\0\u3333\0\u3366\0\u3399\0\u33cc\0\63\0\u33ff\0\63\0\u3432"+
    "\0\377\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\31\16\1\17\1\20\11\16"+
    "\1\21\1\22\65\0\1\3\60\0\5\23\1\0\7\23"+
    "\1\24\1\23\1\25\1\26\1\27\1\30\2\23\1\31"+
    "\4\23\1\32\1\33\1\34\1\35\1\23\1\36\1\37"+
    "\22\23\11\0\1\12\3\0\44\16\13\0\1\16\3\0"+
    "\44\16\13\0\1\16\3\0\34\16\1\40\7\16\13\0"+
    "\1\16\3\0\33\16\1\41\10\16\2\0\5\23\1\42"+
    "\62\23\1\42\27\23\1\43\32\23\1\42\7\23\1\44"+
    "\6\23\1\45\3\23\1\46\2\23\1\47\34\23\1\42"+
    "\7\23\1\50\52\23\1\42\30\23\1\51\31\23\1\42"+
    "\13\23\1\52\3\23\1\53\42\23\1\42\12\23\1\54"+
    "\11\23\1\55\35\23\1\42\25\23\1\56\34\23\1\42"+
    "\26\23\1\57\33\23\1\42\7\23\1\60\22\23\1\61"+
    "\27\23\1\42\7\23\1\62\3\23\1\63\46\23\1\42"+
    "\13\23\1\64\3\23\1\65\7\23\1\66\32\23\1\42"+
    "\30\23\1\67\24\23\11\0\1\16\3\0\43\16\1\70"+
    "\13\0\1\16\3\0\34\16\1\71\7\16\2\0\5\23"+
    "\1\42\13\23\1\72\46\23\1\42\23\23\1\73\36\23"+
    "\1\42\13\23\1\74\46\23\1\42\7\23\1\75\52\23"+
    "\1\42\22\23\1\76\37\23\1\42\31\23\1\77\30\23"+
    "\1\42\31\23\1\100\30\23\1\42\11\23\1\101\50\23"+
    "\1\42\11\23\1\102\10\23\1\103\37\23\1\104\36\23"+
    "\1\105\23\23\1\42\12\23\1\106\15\23\1\107\31\23"+
    "\1\42\23\23\1\110\1\111\35\23\1\42\11\23\1\112"+
    "\50\23\1\42\30\23\1\113\31\23\1\42\24\23\1\114"+
    "\35\23\1\42\12\23\1\115\47\23\1\42\30\23\1\116"+
    "\31\23\1\42\23\23\1\117\11\23\1\120\24\23\1\42"+
    "\13\23\1\121\46\23\1\42\17\23\1\122\42\23\1\42"+
    "\32\23\1\123\22\23\11\0\1\16\3\0\33\16\1\124"+
    "\10\16\13\0\1\16\3\0\27\16\1\125\14\16\2\0"+
    "\5\23\1\42\7\23\1\126\52\23\1\42\26\23\1\127"+
    "\33\23\1\42\11\23\1\130\50\23\1\42\30\23\1\131"+
    "\31\23\1\42\32\23\1\132\27\23\1\42\25\23\1\133"+
    "\34\23\1\42\7\23\1\134\17\23\1\135\32\23\1\42"+
    "\16\23\1\136\43\23\1\42\16\23\1\137\43\23\1\42"+
    "\7\23\1\140\52\23\1\42\31\23\1\141\30\23\1\42"+
    "\17\23\1\142\42\23\1\42\31\23\1\143\30\23\1\42"+
    "\10\23\1\144\51\23\1\42\13\23\1\145\46\23\1\42"+
    "\17\23\1\146\42\23\1\42\30\23\1\147\31\23\1\42"+
    "\31\23\1\150\30\23\1\42\17\23\1\151\42\23\1\42"+
    "\26\23\1\152\33\23\1\42\7\23\1\153\52\23\1\42"+
    "\31\23\1\154\30\23\1\42\23\23\1\155\36\23\1\42"+
    "\33\23\1\156\26\23\1\42\7\23\1\157\45\23\11\0"+
    "\1\16\3\0\35\16\1\160\6\16\13\0\1\16\3\0"+
    "\31\16\1\161\12\16\2\0\5\23\1\42\36\23\1\162"+
    "\23\23\1\42\25\23\1\163\34\23\1\42\21\23\1\164"+
    "\40\23\1\42\13\23\1\165\46\23\1\42\23\23\1\166"+
    "\36\23\1\42\30\23\1\167\31\23\1\42\12\23\1\170"+
    "\47\23\1\42\32\23\1\171\27\23\1\42\7\23\1\172"+
    "\52\23\1\42\13\23\1\173\46\23\1\42\30\23\1\174"+
    "\31\23\1\42\27\23\1\175\32\23\1\42\11\23\1\176"+
    "\50\23\1\42\17\23\1\177\42\23\1\42\27\23\1\200"+
    "\32\23\1\201\62\23\1\42\25\23\1\202\34\23\1\42"+
    "\34\23\1\203\25\23\1\42\13\23\1\204\46\23\1\42"+
    "\25\23\1\205\34\23\1\42\32\23\1\206\27\23\1\207"+
    "\62\23\1\42\25\23\1\210\34\23\1\42\26\23\1\211"+
    "\33\23\1\42\17\23\1\212\42\23\1\42\27\23\1\213"+
    "\25\23\11\0\1\16\3\0\27\16\1\214\14\16\13\0"+
    "\1\16\3\0\34\16\1\215\7\16\2\0\5\23\1\42"+
    "\31\23\1\216\30\23\1\42\36\23\1\217\23\23\1\42"+
    "\10\23\1\220\51\23\1\221\62\23\1\42\24\23\1\222"+
    "\35\23\1\42\36\23\1\223\23\23\1\42\25\23\1\224"+
    "\34\23\1\42\11\23\1\225\50\23\1\42\36\23\1\226"+
    "\23\23\1\42\27\23\1\227\32\23\1\230\62\23\1\42"+
    "\17\23\1\231\42\23\1\42\13\23\1\232\46\23\1\42"+
    "\31\23\1\233\30\23\1\42\13\23\1\234\46\23\1\42"+
    "\24\23\1\235\35\23\1\42\25\23\1\236\34\23\1\42"+
    "\25\23\1\237\34\23\1\240\62\23\1\42\13\23\1\241"+
    "\46\23\1\42\36\23\1\242\23\23\1\42\25\23\1\243"+
    "\34\23\1\42\7\23\1\244\52\23\1\42\17\23\1\245"+
    "\35\23\11\0\1\16\3\0\37\16\1\246\4\16\13\0"+
    "\1\16\3\0\43\16\1\247\2\0\5\23\1\42\13\23"+
    "\1\250\46\23\1\42\31\23\1\251\30\23\1\42\25\23"+
    "\1\252\34\23\1\42\7\23\1\253\52\23\1\42\27\23"+
    "\1\254\32\23\1\255\62\23\1\42\31\23\1\256\30\23"+
    "\1\42\11\23\1\257\11\23\1\260\36\23\1\42\25\23"+
    "\1\261\34\23\1\42\33\23\1\262\26\23\1\263\62\23"+
    "\1\42\32\23\1\264\27\23\1\265\62\23\1\42\13\23"+
    "\1\266\46\23\1\42\27\23\1\267\32\23\1\270\62\23"+
    "\1\42\30\23\1\271\31\23\1\42\33\23\1\272\26\23"+
    "\1\42\36\23\1\273\23\23\1\274\62\23\1\42\25\23"+
    "\1\275\27\23\11\0\1\16\3\0\31\16\1\276\12\16"+
    "\13\0\1\16\3\0\33\16\1\277\10\16\2\0\5\23"+
    "\1\42\35\23\1\300\24\23\1\42\13\23\1\301\46\23"+
    "\1\42\35\23\1\302\24\23\1\42\30\23\1\303\31\23"+
    "\1\42\13\23\1\304\46\23\1\42\32\23\1\305\27\23"+
    "\1\42\27\23\1\306\32\23\1\42\25\23\1\307\34\23"+
    "\1\310\62\23\1\42\17\23\1\311\42\23\1\42\11\23"+
    "\1\312\50\23\1\42\30\23\1\313\31\23\1\42\12\23"+
    "\1\314\47\23\1\42\31\23\1\315\30\23\1\42\17\23"+
    "\1\316\42\23\1\42\26\23\1\317\2\23\1\320\30\23"+
    "\1\321\36\23\1\322\16\23\11\0\1\16\3\0\40\16"+
    "\1\323\3\16\13\0\1\16\3\0\35\16\1\324\6\16"+
    "\2\0\5\23\1\42\31\23\1\325\30\23\1\42\35\23"+
    "\1\326\24\23\1\327\62\23\1\330\62\23\1\42\11\23"+
    "\1\331\50\23\1\42\27\23\1\332\32\23\1\42\13\23"+
    "\1\333\46\23\1\42\12\23\1\334\47\23\1\42\7\23"+
    "\1\335\52\23\1\42\17\23\1\336\42\23\1\337\62\23"+
    "\1\340\62\23\1\42\7\23\1\341\52\23\1\42\30\23"+
    "\1\342\31\23\1\42\27\23\1\343\32\23\1\42\25\23"+
    "\1\344\34\23\1\42\11\23\1\345\43\23\11\0\1\16"+
    "\3\0\36\16\1\346\5\16\13\0\1\16\3\0\27\16"+
    "\1\347\14\16\2\0\5\23\1\42\25\23\1\350\34\23"+
    "\1\42\31\23\1\351\30\23\1\42\25\23\1\352\34\23"+
    "\1\42\7\23\1\353\52\23\1\42\7\23\1\354\52\23"+
    "\1\42\17\23\1\355\42\23\1\356\62\23\1\42\25\23"+
    "\1\357\34\23\1\360\62\23\1\42\17\23\1\361\42\23"+
    "\1\42\13\23\1\362\46\23\1\42\31\23\1\363\30\23"+
    "\1\42\27\23\1\364\25\23\11\0\1\16\3\0\42\16"+
    "\1\365\1\16\13\0\1\16\3\0\37\16\1\366\4\16"+
    "\2\0\5\23\1\367\62\23\1\42\25\23\1\370\34\23"+
    "\1\42\26\23\1\371\33\23\1\372\62\23\1\42\11\23"+
    "\1\373\50\23\1\42\14\23\1\374\45\23\1\42\24\23"+
    "\1\375\35\23\1\42\10\23\1\376\51\23\1\42\15\23"+
    "\1\377\44\23\1\42\7\23\1\u0100\52\23\1\42\13\23"+
    "\1\u0101\41\23\11\0\1\16\3\0\31\16\1\u0102\12\16"+
    "\13\0\1\16\3\0\31\16\1\u0103\12\16\2\0\5\23"+
    "\1\u0104\62\23\1\42\17\23\1\u0105\42\23\1\42\17\23"+
    "\1\u0106\42\23\1\42\17\23\1\u0107\42\23\1\u0108\62\23"+
    "\1\42\22\23\1\u0109\37\23\1\42\32\23\1\u010a\27\23"+
    "\1\42\22\23\1\u010b\37\23\1\42\7\23\1\u010c\45\23"+
    "\11\0\1\16\3\0\40\16\1\u010d\3\16\13\0\1\16"+
    "\3\0\40\16\1\u010e\3\16\2\0\5\23\1\42\22\23"+
    "\1\u010f\37\23\1\42\25\23\1\u0110\34\23\1\42\11\23"+
    "\1\u0111\50\23\1\42\13\23\1\u0112\46\23\1\42\24\23"+
    "\1\u0113\35\23\1\u0114\62\23\1\42\11\23\1\u0115\43\23"+
    "\11\0\1\16\3\0\41\16\1\u0116\2\16\13\0\1\16"+
    "\3\0\36\16\1\u0117\5\16\2\0\5\23\1\42\7\23"+
    "\1\u0118\52\23\1\42\24\23\1\u0119\35\23\1\42\7\23"+
    "\1\u011a\52\23\1\u011b\62\23\1\42\31\23\1\u011c\30\23"+
    "\1\42\17\23\1\u011d\35\23\11\0\1\16\3\0\30\16"+
    "\1\u011e\13\16\13\0\1\16\3\0\42\16\1\u011f\1\16"+
    "\2\0\5\23\1\42\12\23\1\u0120\47\23\1\u0121\62\23"+
    "\1\42\11\23\1\u0122\50\23\1\42\7\23\1\u0123\52\23"+
    "\1\42\25\23\1\u0124\27\23\11\0\1\16\3\0\31\16"+
    "\1\u0125\12\16\2\0\5\23\1\42\25\23\1\u0126\34\23"+
    "\1\42\17\23\1\u0127\42\23\1\u0128\62\23\1\42\24\23"+
    "\1\u0129\30\23\11\0\1\16\3\0\40\16\1\u012a\3\16"+
    "\2\0\5\23\1\42\30\23\1\u012b\31\23\1\42\25\23"+
    "\1\u012c\34\23\1\u012d\55\23\11\0\1\16\3\0\41\16"+
    "\1\u012e\2\16\2\0\5\23\1\u012f\62\23\1\42\24\23"+
    "\1\u0130\30\23\11\0\1\16\3\0\30\16\1\u0131\13\16"+
    "\2\0\5\23\1\u0132\55\23";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13413];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\3\11\1\1\3\11"+
    "\3\1\2\11\15\0\2\1\1\11\25\0\2\1\12\0"+
    "\1\11\17\0\2\1\32\0\2\1\17\0\1\11\5\0"+
    "\1\11\4\0\2\1\3\0\1\11\6\0\1\11\7\0"+
    "\1\11\5\0\2\1\5\0\1\11\5\0\1\11\1\0"+
    "\1\11\2\0\1\11\3\0\1\11\1\0\2\1\10\0"+
    "\1\11\10\0\1\11\1\0\2\1\2\0\2\11\6\0"+
    "\2\11\5\0\2\1\6\0\1\11\1\0\1\11\4\0"+
    "\2\1\1\11\2\0\1\11\7\0\2\1\1\11\3\0"+
    "\1\11\4\0\2\1\5\0\1\11\1\0\2\1\3\0"+
    "\1\11\2\0\2\1\1\0\1\11\3\0\1\1\2\0"+
    "\1\11\1\0\1\1\2\0\1\11\1\1\1\11\1\0"+
    "\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[306];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type){
        return new Symbol(type, yyline+1,yycolumn+1);
    }
    private Symbol symbol(int type, Object value){
        //System.out.println(type + " line: " + (yyline+1) + " col: "+(yycolumn+1) + " " + value);
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }
    private void error(){
        //ErrorsLP.addError(yytext(), yyline+1, yycolumn+1, "Error Léxico","Cadena no definida");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error();
            }
          // fall through
          case 47: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 48: break;
          case 3:
            { return symbol(EX, yytext());
            }
          // fall through
          case 49: break;
          case 4:
            { return symbol(LPAREN, yytext());
            }
          // fall through
          case 50: break;
          case 5:
            { return symbol(RPAREN, yytext());
            }
          // fall through
          case 51: break;
          case 6:
            { return symbol(COMMA, yytext());
            }
          // fall through
          case 52: break;
          case 7:
            { return symbol(DIGIT, Integer.parseInt(yytext()));
            }
          // fall through
          case 53: break;
          case 8:
            { return symbol(COLON, yytext());
            }
          // fall through
          case 54: break;
          case 9:
            { return symbol(LT, yytext());
            }
          // fall through
          case 55: break;
          case 10:
            { return symbol(GT, yytext());
            }
          // fall through
          case 56: break;
          case 11:
            { 
            }
          // fall through
          case 57: break;
          case 12:
            { return symbol(LBRACE, yytext());
            }
          // fall through
          case 58: break;
          case 13:
            { return symbol(RBRACE, yytext());
            }
          // fall through
          case 59: break;
          case 14:
            { return symbol(STRING, yytext());
            }
          // fall through
          case 60: break;
          case 15:
            { return symbol(ID, yytext());
            }
          // fall through
          case 61: break;
          case 16:
            { return symbol(COMBO, yytext());
            }
          // fall through
          case 62: break;
          case 17:
            { return symbol(TEMA, yytext());
            }
          // fall through
          case 63: break;
          case 18:
            { return symbol(CLASE, yytext());
            }
          // fall through
          case 64: break;
          case 19:
            { return symbol(FILAS, yytext());
            }
          // fall through
          case 65: break;
          case 20:
            { return symbol(RADIO, yytext());
            }
          // fall through
          case 66: break;
          case 21:
            { return symbol(ESTADO, yytext());
            }
          // fall through
          case 67: break;
          case 22:
            { return symbol(INDICE, yytext());
            }
          // fall through
          case 68: break;
          case 23:
            { return symbol(NOMBRE, yytext());
            }
          // fall through
          case 69: break;
          case 24:
            { return symbol(PUNTEO, yytext());
            }
          // fall through
          case 70: break;
          case 25:
            { return symbol(TRIVIA, yytext());
            }
          // fall through
          case 71: break;
          case 26:
            { return symbol(FICHERO, yytext());
            }
          // fall through
          case 72: break;
          case 27:
            { return symbol(USUARIO, yytext());
            }
          // fall through
          case 73: break;
          case 28:
            { return symbol(CHECKBOX, yytext());
            }
          // fall through
          case 74: break;
          case 29:
            { return symbol(COLUMNAS, yytext());
            }
          // fall through
          case 75: break;
          case 30:
            { return symbol(OPCIONES, yytext());
            }
          // fall through
          case 76: break;
          case 31:
            { return symbol(PASSWORD, yytext());
            }
          // fall through
          case 77: break;
          case 32:
            { return symbol(ID_TRIVIA, yytext());
            }
          // fall through
          case 78: break;
          case 33:
            { return symbol(RESPUESTA, yytext());
            }
          // fall through
          case 79: break;
          case 34:
            { return symbol(AREA_TEXTO, yytext());
            }
          // fall through
          case 80: break;
          case 35:
            { return symbol(ESTRUCTURA, yytext());
            }
          // fall through
          case 81: break;
          case 36:
            { return symbol(CAMPO_TEXTO, yytext());
            }
          // fall through
          case 82: break;
          case 37:
            { return symbol(INSTITUCION, yytext());
            }
          // fall through
          case 83: break;
          case 38:
            { return symbol(TIEMPO_TOTAL, yytext());
            }
          // fall through
          case 84: break;
          case 39:
            { return symbol(TEXTO_VISIBLE, yytext());
            }
          // fall through
          case 85: break;
          case 40:
            { return symbol(ENVIO_RESPUESTA, yytext());
            }
          // fall through
          case 86: break;
          case 41:
            { return symbol(FECHA_CREACION, yytext());
            }
          // fall through
          case 87: break;
          case 42:
            { return symbol(TIEMPO_PREGUNTA, yytext());
            }
          // fall through
          case 88: break;
          case 43:
            { return symbol(USUARIO_CREACION, yytext());
            }
          // fall through
          case 89: break;
          case 44:
            { return symbol(DATOS_RECOPILADOS, yytext());
            }
          // fall through
          case 90: break;
          case 45:
            { return symbol(FIN_ENVIO_RESPUESTA, yytext());
            }
          // fall through
          case 91: break;
          case 46:
            { return symbol(FECHA_MODIFICACION, yytext());
            }
          // fall through
          case 92: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
