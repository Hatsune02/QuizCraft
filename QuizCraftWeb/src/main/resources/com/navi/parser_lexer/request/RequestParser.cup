package com.navi.quizcraftweb.backend.parser_lexer.request;
import java_cup.runtime.*;
import java.util.*;
import java.text.DecimalFormat;
import com.navi.quizcraftweb.backend.parser_lexer.*;
import com.navi.quizcraftweb.backend.model.*;
import com.navi.quizcraftweb.backend.parser_lexer.request.objs.*;

parser code
{:
    public ArrayList<RequestXSON> requests;

    public ArrayList<String> usernames = new ArrayList<>();
    public ArrayList<String> oldUsers = new ArrayList<>();
    public ArrayList<String> idsTrivia = new ArrayList<>();
    public ArrayList<String> idsComponent = new ArrayList<>();
    public ArrayList<String> idsTriviaC = new ArrayList<>();

    boolean hasUser, hasPassword , hasName, hasInstitution, hasCreateDate, hasOldUser,
    hasNewUser, hasNewPassword, hasUpdateDate, hasIdTrivia, hasQuestionTime, hasCreateUser,
    hasTopic, hasId, hasTrivia, hasClass, hasIndex, hasVisibleText, hasOptions, hasLine, hasColumns, hasAnswer;

    boolean hasTextC, hasAreaText, hasCheckbox, hasRadius, hasFile, hasCombo;

    public void resetBooleans(){
        hasUser = false;
        hasPassword = false;
        hasName = false;
        hasInstitution = false;
        hasCreateDate = false;
        hasOldUser = false;
        hasNewUser = false;
        hasNewPassword = false;
        hasUpdateDate = false;
        hasIdTrivia = false;
        hasQuestionTime = false;
        hasCreateUser = false;
        hasTopic = false;
        hasId = false;
        hasTrivia = false;
        hasClass = false;
        hasIndex = false;
        hasVisibleText = false;
        hasOptions = false;
        hasLine = false;
        hasColumns = false;
        hasAnswer = false;
        hasTextC = false;
        hasAreaText = false;
        hasCheckbox = false;
        hasRadius = false;
        hasFile = false;
        hasCombo = false;
    }
    public boolean validateNewUser(){
        boolean requiredCondition = hasUser && hasPassword && hasInstitution && hasName;
        boolean other = !(hasOldUser || hasNewUser || hasNewPassword || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);

        return requiredCondition && other;
    }
    public void errorsNewUser(HashMap<Integer, Parameter> parameters){
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateUpdateUser(){
        boolean requiredCondition = hasOldUser;
        boolean possibleCondition = hasNewUser || hasNewPassword || hasInstitution;
        boolean other = !(hasUser || hasPassword || hasName || hasCreateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);

        return requiredCondition && possibleCondition && other;
    }
    public void errorsUpdateUser(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateDeleteUser(){
        boolean requiredCondition = hasUser;
        boolean other = !(hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);

        return requiredCondition  && other;
    }
    public void errorsDeleteUser(HashMap<Integer, Parameter> parameters){
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateLogin(){
        boolean requiredCondition = hasUser && hasPassword;
        boolean other = !(hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);
        return requiredCondition && other;
    }
    public void errorsLogin(HashMap<Integer, Parameter> parameters){
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateNewTrivia(){
        boolean requiredCondition = hasIdTrivia && hasName && hasQuestionTime && hasTopic;
        boolean other = !(hasUser || hasPassword || hasInstitution ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasId || hasTrivia || hasClass || hasIndex || hasVisibleText ||
                hasOptions || hasLine || hasColumns || hasAnswer);
        return requiredCondition && other;
    }
    public void errorsNewTrivia(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateUpdateTrivia(){
        boolean requiredCondition = hasIdTrivia;
        boolean possibleCondition = hasQuestionTime || hasName || hasTopic;
        boolean other = !(hasUser || hasPassword || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasCreateUser || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);
        return requiredCondition && possibleCondition && other;
    }
    public void errorsUpdateTrivia(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateDeleteTrivia(){
        boolean requiredCondition = hasIdTrivia;
        boolean other = !(hasUser || hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);
        return requiredCondition && other;
    }
    public void errorsDeleteTrivia(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }


    public boolean validateNewComponent(){
        boolean requiredCondition = hasId && hasTrivia && hasClass && hasVisibleText && hasAnswer;
        boolean other = !(hasUser || hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic ||
                hasIndex);

        if(hasCheckbox || hasRadius || hasCombo){
            if(requiredCondition) requiredCondition = hasOptions;
        }
        else if(hasAreaText){
            if(requiredCondition) requiredCondition = hasLine && hasColumns;
        }
        else{
            if(other) other = !(hasOptions || hasLine || hasColumns);
        }

        return requiredCondition && other;
    }
    public void errorsNewComponent(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());

        if(hasCheckbox || hasRadius || hasCombo){
            if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
            if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        }
        else if(hasAreaText){
            if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        }
        else {
            if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
            if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
            if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        }
    }

    public boolean validateUpdateComponent(){
        boolean requiredCondition = hasId && hasTrivia;
        boolean possibleCondition = hasIndex || hasClass || hasVisibleText || hasAnswer;
        boolean other = !(hasUser || hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic);
        if(hasCheckbox || hasRadius || hasCombo){
            if(requiredCondition) requiredCondition = hasOptions;
        }
        else if(hasAreaText){
            if(requiredCondition) requiredCondition = hasLine && hasColumns;
        }
        else{
            if(other) other = !(hasOptions || hasLine || hasColumns);
        }
        return requiredCondition && possibleCondition && other;
    }
    public void errorsUpdateComponent(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());

        if(hasCheckbox || hasRadius || hasCombo){
            if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
            if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        }
        else if(hasAreaText){
            if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        }
        else {
            if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
            if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
            if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        }
    }

    public boolean validateDeleteComponent(){
        boolean requiredCondition = hasId && hasTrivia;
        boolean other = !(hasUser || hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic ||
                hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);
        return requiredCondition && other;
    }
    public void errorsDeleteComponent(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public RequestParser(RequestLexer lex) {
        super(lex);
        resetBooleans();
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        HashMap<String, String> symbolNames = Validate.getSymbolNames();
        List<Integer> tokens = expected_token_ids();
        String des = "Se esperaba: ";
        for(Integer i : tokens) {
            String fromId = symbl_name_from_id(i);
            String symbolName = symbolNames.get(fromId);
            if(symbolName != null){
                des += "'"+symbolName+ "' o ";
            }
            else{
                if(!fromId.equals("error") && !fromId.equals("EOF")){
                    des += fromId +" o ";
                }
            }
        }
        if(des.length() > 3) des = des.substring(0, des.length() - 3);
        addError(lexeme, line, col, des);
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        HashMap<String, String> symbolNames = Validate.getSymbolNames();
        List<Integer> tokens = expected_token_ids();
        String des = "Se esperaba: ";
        for(Integer i : tokens) {
            String fromId = symbl_name_from_id(i);
            String symbolName = symbolNames.get(fromId);
            if(symbolName != null){
                des += "'"+symbolName+ "' o ";
            }
            else{
                if(!fromId.equals("error") && !fromId.equals("EOF")){
                    des += fromId +" o ";
                }
            }
        }
        if(des.length() > 3) des = des.substring(0, des.length() - 3);
        addError(lexeme, line, col, des);
    }

    private void addError(String lexeme, int line, int col, String description){
        ErrorsLP.addError(lexeme, line, col, "Error Sintáctico", description);
    }

    private void addParameterError(String type, int line, int col){
        ErrorsLP.addError(type, line, col, "Semántico", "Parametro " + type + " duplicado");
    }
    private void addPError(String type, int line, int col){
        ErrorsLP.addError(type, line, col, "Semántico", "Parametro " + type + " no esperado");
    }
    protected int error_sync_size() {
            return 1;
    }
:}

terminal XSON, EQUAL, VERSION, ONE,
        REALIZAR_SOLICITUD, REALIZAR_SOLICITUDES, FIN_SOLICITUD_REALIZADA, FIN_SOLICITUDES_REALIZADA,

        MODIFICAR_USUARIO, USUARIO_ANTIGUO, NUEVO_PASSWORD, FECHA_MODIFICACION, ELIMINAR_USUARIO, LOGIN_USUARIO,
        NUEVA_TRIVIA, PARAMETROS_TRIVIA, ID_TRIVIA, TIEMPO_PREGUNTA, USUARIO_CREACION, TEMA, ELIMINAR_TRIVIA, MODIFICAR_TRIVIA,
        AGREGAR_COMPONENTE, PARAMETROS_COMPONENTE, ID, TRIVIA, CLASE, INDICE, TEXTO_VISIBLE, OPCIONES, FILAS, COLUMNAS, RESPUESTA,
        CAMPO_TEXTO, AREA_TEXTO, CHECKBOX, RADIO, FICHERO, COMBO, ELIMINAR_COMPONENTE, MODIFICAR_COMPONENTE, VERTICAL_BAR,
        VER_TRIVIAS, ADD_DATA, TIEMPO_TOTAL, ESTADO, PUNTEO,
        LBRACKET, RBRACKET, LBRACE, RBRACE, LT, GT, EX, Q;

terminal String STRINGCONTENT, IDENTIFIER;

terminal String USUARIO_NUEVO, DATOS_USUARIO, USUARIO, PASSWORD, INSTITUCION, NOMBRE, FECHA_CREACION,
                COLON, COMMA, QM;


terminal String DIGIT;

non terminal s, xson_label, open_request, close_request, open_requests, close_requests,
            open_user_data, close_data, open_trivia_data, open_component_data
            ;



non terminal Parameter<?> parameter;

non terminal Parameter<String>  user, password, name, institution, create_date, old_user,
                                new_user, new_password, update_date,
                                id_trivia, create_user, topic,
                                id, trivia, visible_text;

non terminal Parameter<?> options, answer;

non terminal Parameter<Integer> question_time, clase, index, line, columns;

non terminal HashMap<Integer, Parameter> data, data_user, data_trivia, data_component;

non terminal RequestXSON<User> new_user_request, update_user_request, delete_user_request, login_request;

non terminal RequestXSON<Trivia> new_trivia_request, update_trivia_request, delete_trivia_request;

non terminal RequestXSON<Component> new_component_request, update_component_request, delete_component_request;

non terminal RequestXSON<?> request;

non terminal ArrayList<RequestXSON> requestP, requests;

non terminal RequestXSON<?> view_trivias_request;

non terminal RequestXSON<CollectedData> add_data_request;

non terminal CollectedData data_collected_data;

non terminal Integer total_time, score;

non terminal String estado;

non terminal Integer clase_content;

non terminal String string_content, string_contentP;

non terminal ArrayList<String> multiple_string;



start with s;

s ::=  xson_label requests:rs
    {:
    requests = rs;
    :}
    | xson_label request:r
    {:
    requests = new ArrayList<>();
    requests.add(r);

    :}
    ;

requests ::= open_requests requestP:rs close_requests {: RESULT = rs; :};

requestP ::= request:r
            {:
            ArrayList<RequestXSON> rs = new ArrayList<>();
            rs.add(r);
            RESULT = rs;
            :}
            | requestP:rs request:r
            {:
            rs.add(r);
            RESULT = rs;
            :}
            ;

request ::=   new_user_request:r            {: resetBooleans(); RESULT = r; :}
            | new_trivia_request:r          {: resetBooleans(); RESULT = r; :}
            | new_component_request:r       {: resetBooleans(); RESULT = r; :}
            | update_user_request:r         {: resetBooleans(); RESULT = r; :}
            | update_trivia_request:r       {: resetBooleans(); RESULT = r; :}
            | update_component_request:r    {: resetBooleans(); RESULT = r; :}
            | delete_user_request:r         {: resetBooleans(); RESULT = r; :}
            | delete_trivia_request:r       {: resetBooleans(); RESULT = r; :}
            | delete_component_request:r    {: resetBooleans(); RESULT = r; :}
            | login_request:r               {: resetBooleans(); RESULT = r; :}
            | view_trivias_request:r        {: resetBooleans(); RESULT = r; :}
            | add_data_request:r            {: resetBooleans(); RESULT = r; :}
            | error
            ;

xson_label ::= LT QM XSON VERSION EQUAL Q ONE Q QM GT;

open_requests ::= LT EX REALIZAR_SOLICITUDES GT;

close_requests ::= LT EX FIN_SOLICITUDES_REALIZADA GT;

open_request ::= LT EX REALIZAR_SOLICITUD COLON;

close_request ::= LT FIN_SOLICITUD_REALIZADA EX GT;

new_user_request ::= open_request Q USUARIO_NUEVO Q GT data_user:d close_request
                {:
                User u = new User();
                if(validateNewUser()){
                    u.setNewUser(d, hasCreateDate);
                }
                else errorsNewUser(d);
                RequestXSON<User> r = new RequestXSON<>(u, RequestXSON.USUARIO_NUEVO);
                r.setLineCol(dleft, dright);
                RESULT = r;
                :}

                ;

open_user_data ::= LBRACE Q DATOS_USUARIO Q COLON LBRACKET LBRACE
                | error;

close_data ::= RBRACE RBRACKET RBRACE
                | error;

data_user ::= open_user_data data:d close_data
                {: RESULT = d; :}
                | error
                ;

update_user_request ::= open_request Q MODIFICAR_USUARIO Q GT data_user:d close_request
                {:
                User u = new User();
                String us = "";
                if(validateUpdateUser()){
                    u.setUpdateUser(d, hasNewUser, hasNewPassword, hasInstitution, hasUpdateDate);
                    us = (String) d.get(Parameter.OLD_USER).getParameter();
                }
                else errorsUpdateUser(d);

                RequestXSON<User> r = new RequestXSON<>(us, u, RequestXSON.MODIFICAR_USUARIO);
                r.setLineCol(dleft, dright);
                RESULT = r;
                :}
                ;

delete_user_request ::= open_request Q ELIMINAR_USUARIO Q GT data_user:d close_request
                {:
                String u = "";
                if(validateDeleteUser()) u = (String) d.get(Parameter.USER).getParameter();
                else errorsDeleteUser(d);

                RequestXSON<User> r = new RequestXSON<>(u, RequestXSON.ELIMINAR_USUARIO);
                r.setLineCol(dleft, dright);
                RESULT = r;
                :};

login_request ::= open_request Q LOGIN_USUARIO Q GT data_user:d close_request
                {:
                User u = new User();
                if(validateLogin()){
                    u.setLogin(d);
                }
                else errorsLogin(d);

                RequestXSON<User> r = new RequestXSON<>(u, RequestXSON.LOGIN_USUARIO);
                r.setLineCol(dleft, dright);
                RESULT = r;
                :};


open_trivia_data ::= LBRACE Q PARAMETROS_TRIVIA Q COLON LBRACKET LBRACE;

new_trivia_request ::= open_request Q NUEVA_TRIVIA Q GT data_trivia:d close_request
                    {:
                    Trivia t = new Trivia();
                    if(validateNewTrivia()){
                        t.setNewTrivia(d, hasCreateUser, hasCreateDate);
                    }
                    else errorsNewTrivia(d);

                    RequestXSON<Trivia> r = new RequestXSON<>(t, RequestXSON.NUEVA_TRIVIA);
                    r.setLineCol(dleft, dright);
                    RESULT = r;
                    :};

data_trivia ::= open_trivia_data data:d close_data
                {: RESULT = d; :}
                | error
                ;

update_trivia_request ::= open_request Q MODIFICAR_TRIVIA Q GT data_trivia:d close_request
                        {:
                        Trivia t = new Trivia();
                        if(validateUpdateTrivia()){
                            t.setUpdateTrivia(d, hasQuestionTime, hasName, hasTopic);
                        }
                        else errorsUpdateTrivia(d);

                        RequestXSON<Trivia> r = new RequestXSON<>(t, RequestXSON.MODIFICAR_TRIVIA);
                        r.setLineCol(dleft, dright);
                        RESULT = r;
                        :};

delete_trivia_request ::= open_request Q ELIMINAR_TRIVIA Q GT data_trivia:d close_request
                        {:
                        String s = "";
                        if(validateDeleteTrivia()) s = (String) d.get(Parameter.ID_TRIVIA).getParameter();

                        else errorsDeleteTrivia(d);

                        RequestXSON<Trivia> r = new RequestXSON<>(s, RequestXSON.ELIMINAR_TRIVIA);
                        r.setLineCol(dleft, dright);
                        RESULT = r;
                        :};



open_component_data ::= LBRACE Q PARAMETROS_COMPONENTE Q COLON LBRACKET LBRACE;

new_component_request ::= open_request Q AGREGAR_COMPONENTE Q GT data_component:d close_request
                        {:
                        Component c = new Component();
                        if(validateNewComponent()){
                            c.setNewComponent(d, hasOptions,  hasLine, hasColumns);
                        }
                        else errorsNewComponent(d);

                        RequestXSON<Component> r = new RequestXSON<>(c, RequestXSON.AGREGAR_COMPONENTE);
                        r.setLineCol(dleft, dright);
                        RESULT = r;
                        :};

data_component ::= open_component_data data:d close_data
                {: RESULT = d; :}
                | error
                ;

update_component_request ::= open_request Q MODIFICAR_COMPONENTE Q GT data_component:d close_request
                            {:
                            Component c = new Component();
                            if(validateUpdateComponent()){
                                c.setUpdateComponent(d, hasClass, hasVisibleText, hasAnswer, hasOptions,  hasLine, hasColumns);
                            }
                            else errorsUpdateComponent(d);

                            RequestXSON<Component> r = new RequestXSON<>(c, RequestXSON.MODIFICAR_COMPONENTE);
                            r.setLineCol(dleft, dright);
                            RESULT = r;
                            :};

delete_component_request ::= open_request Q ELIMINAR_COMPONENTE Q GT data_component:d close_request
                            {:
                            String s = "";
                            String s2 = "";
                            if(validateDeleteComponent()) {
                                s = (String) d.get(Parameter.ID).getParameter();
                                s2 = (String) d.get(Parameter.TRIVIA).getParameter();

                            }

                            else errorsDeleteComponent(d);

                            RequestXSON<Component> r = new RequestXSON<>(s, s2, RequestXSON.ELIMINAR_COMPONENTE);
                            r.setLineCol(dleft, dright);
                            RESULT = r;
                            :};


view_trivias_request ::= open_request Q VER_TRIVIAS Q GT close_request
                        {:
                        RequestXSON<Trivia> r = new RequestXSON<>("", RequestXSON.VER_TRIVIAS);
                        RESULT = r;
                        :};

add_data_request ::= open_request Q ADD_DATA Q GT data_collected_data:d close_request
                    {:
                    RequestXSON<CollectedData> r = new RequestXSON<>(d, RequestXSON.ADD_DATA);
                    RESULT = r;
                    :};

data_collected_data ::= LBRACE user:u COMMA trivia:t COMMA total_time:tt COMMA estado:e COMMA score:s RBRACE
                    {:
                    String user = (String) u.getParameter();
                    String trivia = (String) t.getParameter();
                    boolean state = e.equals("Completado");
                    CollectedData data = new CollectedData(user, trivia, tt, s, state);
                    RESULT = data;
                    :};

total_time ::= Q TIEMPO_TOTAL Q COLON DIGIT:d
            {: RESULT = Integer.parseInt(d); :};

estado ::= Q ESTADO Q COLON Q string_contentP:s Q
        {: RESULT = s; :};

score ::= Q PUNTEO Q COLON DIGIT:d
        {: RESULT = Integer.parseInt(d); :};


data ::= parameter:p
        {:
        HashMap<Integer, Parameter> parameters = new HashMap<>();
        parameters.put(p.getType(), p);
        RESULT = parameters;
        :}
        | data:d COMMA parameter:p
        {:
        d.put(p.getType(), p);
        RESULT = d;
        :}
        ;

parameter ::= user:p
            {:
            if(!hasUser) hasUser = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | password:p
            {:
            if(!hasPassword) hasPassword = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | name:p
            {:
            if(!hasName) hasName = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | institution:p
            {:
            if(!hasInstitution) hasInstitution = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | create_date:p
            {:
            if(!hasCreateDate) hasCreateDate = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | old_user:p
            {:
            if(!hasOldUser) hasOldUser = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | new_user:p
            {:
            if(!hasNewUser) hasNewUser = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | new_password:p
            {:
            if(!hasNewPassword) hasNewPassword = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | update_date:p
            {:
            if(!hasUpdateDate) hasUpdateDate = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | id_trivia:p
            {:
            if(!hasIdTrivia) hasIdTrivia = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | question_time:p
            {:
            if(!hasQuestionTime) hasQuestionTime = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | create_user:p
            {:
            if(!hasCreateUser) hasCreateUser = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | topic:p
            {:
            if(!hasTopic) hasTopic = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | id:p
            {:
            if(!hasId) hasId = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | trivia:p
            {:
            if(!hasTrivia) hasTrivia = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | clase:p
            {:
            if(!hasClass) hasClass = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | index:p
            {:
            if(!hasIndex) hasIndex = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | visible_text:p
            {:
            if(!hasVisibleText) hasVisibleText = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | options:p
            {:
            if(!hasOptions) hasOptions = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | line:p
            {:
            if(!hasLine) hasLine = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | columns:p
            {:
            if(!hasColumns) hasColumns = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | answer:p
            {:
            if(!hasAnswer) hasAnswer = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            :}
            | error {: RESULT = new Parameter<String>();:}
            ;


user ::= Q USUARIO Q COLON Q string_content:st Q
        {:
        usernames.add(st);
        Parameter<String> p = new Parameter<>(st, Parameter.USER, stleft, stright);
        RESULT = p;
        :}
        ;

password ::= Q PASSWORD Q COLON Q string_content:st Q
        {:
        Parameter<String> p = new Parameter<>(st, Parameter.PASSWORD, stleft, stright);
        RESULT = p;
        :}
        ;

name ::= Q NOMBRE Q COLON Q string_contentP:st Q
        {:
        Parameter<String> p = new Parameter<>(st, Parameter.NAME, stleft, stright);
        RESULT = p;
        :}
        ;

institution ::= Q INSTITUCION Q COLON Q string_contentP:st Q
        {:
        Parameter<String> p = new Parameter<>(st, Parameter.INSTITUTION, stleft, stright);
        RESULT = p;
        :}
        ;

create_date ::= Q FECHA_CREACION Q COLON Q string_content:st Q
        {:
        String regex = "\\d{4}-\\d{2}-\\d{2}";
        if(!st.matches(regex)) addError(st, stleft, stright, "Se esperaba una fecha correcta");

        Parameter<String> p = new Parameter<>(st, Parameter.CREATE_DATE, stleft, stright);
        RESULT = p;
        :}
        ;

old_user ::= Q USUARIO_ANTIGUO Q COLON Q string_content:st Q
        {:
        oldUsers.add(st);
        Parameter<String> p = new Parameter<>(st, Parameter.OLD_USER, stleft, stright);
        RESULT = p;
        :}
        ;

new_user ::= Q USUARIO_NUEVO Q COLON Q string_content:st Q
        {:
        Parameter<String> p = new Parameter<>(st, Parameter.NEW_USER, stleft, stright);
        RESULT = p;
        :}
        ;

new_password ::= Q NUEVO_PASSWORD Q COLON Q string_content:st Q
        {:
        Parameter<String> p = new Parameter<>(st, Parameter.NEW_PASSWORD, stleft, stright);
        RESULT = p;
        :};

update_date ::= Q FECHA_MODIFICACION Q COLON Q string_content:st Q
        {:
        String regex = "\\d{4}-\\d{2}-\\d{2}";
        if(!st.matches(regex)) addError(st, stleft, stright, "Se esperaba una fecha correcta");

        Parameter<String> p = new Parameter<>(st, Parameter.UPDATE_DATE, stleft, stright);
        RESULT = p;
        :};


id_trivia ::= Q ID_TRIVIA Q COLON Q IDENTIFIER:st Q
        {:
        idsTrivia.add(st);
        Parameter<String> p = new Parameter<>(st, Parameter.ID_TRIVIA, stleft, stright);
        RESULT = p;
        :};

question_time ::= Q TIEMPO_PREGUNTA Q COLON DIGIT:d
        {:
        Parameter<Integer> p = new Parameter<>(Integer.parseInt(d), Parameter.QUESTION_TIME, dleft, dright);
        RESULT = p;
        :};

create_user ::= Q USUARIO_CREACION Q COLON Q string_content:st Q
        {:
        Parameter<String> p = new Parameter<>(st, Parameter.CREATE_USER, stleft, stright);
        RESULT = p;
        :};

topic ::= Q TEMA Q COLON Q string_contentP:st Q
        {:
        Parameter<String> p = new Parameter<>(st, Parameter.TOPIC, stleft, stright);
        RESULT = p;
        :};


id ::= Q ID Q COLON Q IDENTIFIER:st Q
        {:
        idsComponent.add(st);
        Parameter<String> p = new Parameter<>(st, Parameter.ID, stleft, stright);
        RESULT = p;
        :};

trivia ::= Q TRIVIA Q COLON Q IDENTIFIER:st Q
        {:
        idsTriviaC.add(st);
        Parameter<String> p = new Parameter<>(st, Parameter.TRIVIA, stleft, stright);
        RESULT = p;
        :};

clase ::= Q CLASE Q COLON Q clase_content:st Q
        {:
        Parameter<Integer> p = new Parameter<>(st, Parameter.CLASS, stleft, stright);
        RESULT = p;
        :};

index ::= Q INDICE Q COLON Q DIGIT:d Q
        {:
        Parameter<Integer> p = new Parameter<>(Integer.parseInt(d), Parameter.INDEX, dleft, dright);
        RESULT = p;
        :};

visible_text ::= Q TEXTO_VISIBLE Q COLON Q string_contentP:st Q
        {:
        Parameter<String> p = new Parameter<>(st, Parameter.VISIBLE_TEXT, stleft, stright);
        RESULT = p;
        :};

options ::= Q OPCIONES Q COLON Q multiple_string:st Q
        {:
        Parameter<ArrayList<String>> p = new Parameter<>(st, Parameter.OPTIONS, stleft, stright);
        RESULT = p;
        :};

line ::= Q FILAS Q COLON Q DIGIT:d Q
        {:
        Parameter<Integer> p = new Parameter<>(Integer.parseInt(d), Parameter.LINE, dleft, dright);
        RESULT = p;
        :};

columns ::= Q COLUMNAS Q COLON Q DIGIT:d Q
        {:
        Parameter<Integer> p = new Parameter<>(Integer.parseInt(d), Parameter.COLUMNS, dleft, dright);
        RESULT = p;
        :};

answer ::= Q RESPUESTA Q COLON Q multiple_string:st Q
        {:
        Parameter<ArrayList<String>> p = new Parameter<>(st, Parameter.ANSWER, stleft, stright);
        RESULT = p;
        :};


clase_content ::= CAMPO_TEXTO:c
                {:
                if(!hasTextC) hasTextC = true;
                RESULT = Component.CAMPO_TEXTO;
                :}
                | AREA_TEXTO:c
                {:
                if(!hasAreaText) hasAreaText = true;
                RESULT = Component.AREA_TEXTO;
                :}
                | CHECKBOX:c
                {:
                if(!hasCheckbox) hasCheckbox = true;
                RESULT = Component.CHECKBOX;
                :}
                | RADIO:c
                {:
                if(!hasRadius) hasRadius = true;
                RESULT = Component.RADIO;
                :}
                | FICHERO:c
                {:
                if(!hasFile) hasFile = true;
                RESULT = Component.FICHERO;
                :}
                | COMBO:c
                {:
                if(!hasCombo) hasCombo = true;
                RESULT = Component.COMBO;
                :}
                ;
multiple_string ::= string_contentP:s
                {:
                ArrayList<String> op = new ArrayList<>();
                op.add(s);
                RESULT = op;
                :}
                | multiple_string:op VERTICAL_BAR string_contentP:s
                {:
                op.add(s);
                RESULT = op;
                :}
                ;

string_contentP ::= string_content:s {: RESULT = s;:}
                | string_contentP:s1 string_content:s2
                {:RESULT = s1 + " " + s2; :}
                ;

string_content ::= STRINGCONTENT:s  {:RESULT = s; :}
                | IDENTIFIER:s      {:RESULT = s; :}
                | DIGIT:s           {:RESULT = s; :}
                | NOMBRE:s          {:RESULT = s; :}
                | COLON:s           {:RESULT = s; :}
                | COMMA:s           {:RESULT = s; :}
                | QM:s              {:RESULT = s; :}
                ;
