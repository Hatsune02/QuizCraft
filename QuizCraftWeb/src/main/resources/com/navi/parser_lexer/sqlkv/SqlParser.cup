package com.navi.quizcraftweb.backend.parser_lexer.sqlkv;
import java_cup.runtime.*;
import com.navi.quizcraftweb.backend.parser_lexer.sqlkv.obj.*;
import com.navi.quizcraftweb.backend.parser_lexer.*;
import java.util.*;

parser code
{:
    public SqlParser(SqlLexer lex) {
        super(lex);
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINT√ÅCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
    }
    protected int error_sync_size() {
        return 10;
    }

:}

terminal SELECCIONAR, REPORTE, FILTRAR, POR, USUARIO,
        TIEMPO_TOTAL, PUNTEO, COMMA, AND, OR;

terminal String ID, DIGIT, STRING, REL_OP;


non terminal instruction;

non terminal String expr;

non terminal Integer reserved_word;

non terminal ArrayList<String> listC;

non terminal Condition condition;

non terminal ArrayList<Condition> conditions, filter;

non terminal s;


start with s;

s ::= instruction;

instruction ::= SELECCIONAR REPORTE listC
                {:

                :}
                | SELECCIONAR REPORTE
                | SELECCIONAR REPORTE listC filter
                | SELECCIONAR REPORTE  filter
                | error;

filter ::= FILTRAR POR conditions:c
            {: RESULT = c; :}
            ;

conditions ::= condition:c
            {:
            ArrayList<Condition> conditions = new ArrayList<>();
            conditions.add(c);
            RESULT = conditions;
            :}
            | conditions:cs AND condition:c
            {:
            c.setType(Condition.AND);
            cs.add(c);
            RESULT = cs;
            :}
            | conditions:cs OR condition:c
            {:
            c.setType(Condition.OR);
            cs.add(c);
            RESULT = cs;
            :}
            ;

condition ::= reserved_word:f REL_OP:s expr:v
            {:
            RESULT = new Condition(f,s,v);
            :};

listC       ::= ID:id
            {:
            ArrayList<String> trivias = new ArrayList<>();
            trivias.add(id);
            RESULT = trivias;
            :}
            | listC:t COMMA ID:id
            {:
            t.add(id);
            RESULT = t;
            :}
            ;
reserved_word ::= USUARIO           {: RESULT = Condition.USUARIO;:}
                | TIEMPO_TOTAL      {: RESULT = Condition.TIEMPO_TOTAL;:}
                | PUNTEO            {: RESULT = Condition.PUNTEO;:}
                ;

expr        ::= DIGIT:d {:RESULT = d;:}
            | STRING:s {:RESULT = s.toString().replace("\"","");:}
            ;

