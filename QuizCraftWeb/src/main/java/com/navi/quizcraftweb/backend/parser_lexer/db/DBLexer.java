// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: DBLexer.flex

package com.navi.quizcraftweb.backend.parser_lexer.db   ;
import java_cup.runtime.*;
import static com.navi.quizcraftweb.backend.parser_lexer.db.sym.*;
import com.navi.quizcraftweb.backend.parser_lexer.*;

@SuppressWarnings("fallthrough")
public class DBLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\0\1\4\5\0\1\5\1\6\2\0\1\7\1\0"+
    "\1\10\1\0\12\11\1\12\6\0\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\24\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\24\3\0\1\24"+
    "\1\42\1\0\1\43\1\44\1\24\1\45\1\46\3\24"+
    "\1\47\4\24\1\50\3\24\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\3\24\1\57\1\0\1\60\43\0\1\24"+
    "\10\0\1\24\1\0\1\24\3\0\1\24\4\0\1\24"+
    "\4\0\1\24\4\0\30\24\1\0\37\24\1\0\u01ca\24"+
    "\4\0\14\24\16\0\5\24\7\0\1\24\1\0\1\24"+
    "\21\0\165\24\1\0\2\24\2\0\4\24\1\0\1\24"+
    "\6\0\1\24\1\0\3\24\1\0\1\24\1\0\24\24"+
    "\1\0\123\24\1\0\213\24\1\0\255\24\1\0\46\24"+
    "\2\0\1\24\6\0\51\24\10\0\55\24\1\0\1\24"+
    "\1\0\2\24\1\0\2\24\1\0\1\24\10\0\33\24"+
    "\4\0\4\24\35\0\13\24\5\0\112\24\4\0\146\24"+
    "\1\0\10\24\2\0\12\24\1\0\23\24\2\0\1\24"+
    "\20\0\73\24\2\0\145\24\16\0\66\24\4\0\1\24"+
    "\2\0\1\24\2\0\56\24\22\0\34\24\4\0\13\24"+
    "\65\0\25\24\1\0\10\24\25\0\17\24\1\0\201\24"+
    "\2\0\12\24\1\0\23\24\1\0\10\24\2\0\2\24"+
    "\2\0\26\24\1\0\7\24\1\0\1\24\3\0\4\24"+
    "\2\0\11\24\2\0\2\24\2\0\4\24\10\0\1\24"+
    "\4\0\2\24\1\0\5\24\2\0\14\24\12\0\1\24"+
    "\1\0\1\24\2\0\3\24\1\0\6\24\4\0\2\24"+
    "\2\0\26\24\1\0\7\24\1\0\2\24\1\0\2\24"+
    "\1\0\2\24\2\0\1\24\1\0\5\24\4\0\2\24"+
    "\2\0\3\24\3\0\1\24\7\0\4\24\1\0\1\24"+
    "\7\0\20\24\13\0\3\24\1\0\11\24\1\0\3\24"+
    "\1\0\26\24\1\0\7\24\1\0\2\24\1\0\5\24"+
    "\2\0\12\24\1\0\3\24\1\0\3\24\2\0\1\24"+
    "\17\0\4\24\2\0\12\24\11\0\7\24\1\0\3\24"+
    "\1\0\10\24\2\0\2\24\2\0\26\24\1\0\7\24"+
    "\1\0\2\24\1\0\5\24\2\0\11\24\2\0\2\24"+
    "\2\0\3\24\10\0\2\24\4\0\2\24\1\0\5\24"+
    "\2\0\12\24\1\0\1\24\20\0\2\24\1\0\6\24"+
    "\3\0\3\24\1\0\4\24\3\0\2\24\1\0\1\24"+
    "\1\0\2\24\3\0\2\24\3\0\3\24\3\0\14\24"+
    "\4\0\5\24\3\0\3\24\1\0\4\24\2\0\1\24"+
    "\6\0\1\24\16\0\12\24\20\0\15\24\1\0\3\24"+
    "\1\0\27\24\1\0\20\24\3\0\10\24\1\0\3\24"+
    "\1\0\4\24\7\0\2\24\1\0\3\24\5\0\4\24"+
    "\2\0\12\24\20\0\4\24\1\0\10\24\1\0\3\24"+
    "\1\0\27\24\1\0\12\24\1\0\5\24\2\0\11\24"+
    "\1\0\3\24\1\0\4\24\7\0\2\24\7\0\1\24"+
    "\1\0\4\24\2\0\12\24\1\0\2\24\15\0\4\24"+
    "\1\0\10\24\1\0\3\24\1\0\63\24\1\0\3\24"+
    "\1\0\5\24\5\0\4\24\7\0\5\24\2\0\12\24"+
    "\12\0\6\24\2\0\2\24\1\0\22\24\3\0\30\24"+
    "\1\0\11\24\1\0\1\24\2\0\7\24\3\0\1\24"+
    "\4\0\6\24\1\0\1\24\1\0\10\24\6\0\12\24"+
    "\2\0\2\24\15\0\72\24\5\0\17\24\1\0\12\24"+
    "\47\0\2\24\1\0\1\24\1\0\5\24\1\0\30\24"+
    "\1\0\1\24\1\0\27\24\2\0\5\24\1\0\1\24"+
    "\1\0\6\24\2\0\12\24\2\0\4\24\40\0\1\24"+
    "\27\0\2\24\6\0\12\24\13\0\1\24\1\0\1\24"+
    "\1\0\1\24\4\0\12\24\1\0\44\24\4\0\24\24"+
    "\1\0\22\24\1\0\44\24\11\0\1\24\71\0\112\24"+
    "\6\0\116\24\2\0\46\24\1\0\1\24\5\0\1\24"+
    "\2\0\53\24\1\0\115\24\1\0\4\24\2\0\7\24"+
    "\1\0\1\24\1\0\4\24\2\0\51\24\1\0\4\24"+
    "\2\0\41\24\1\0\4\24\2\0\7\24\1\0\1\24"+
    "\1\0\4\24\2\0\17\24\1\0\71\24\1\0\4\24"+
    "\2\0\103\24\2\0\3\24\40\0\20\24\20\0\126\24"+
    "\2\0\6\24\3\0\u016c\24\2\0\21\24\1\0\32\24"+
    "\5\0\113\24\3\0\13\24\7\0\15\24\1\0\7\24"+
    "\13\0\25\24\13\0\24\24\14\0\15\24\1\0\3\24"+
    "\1\0\2\24\14\0\124\24\3\0\1\24\4\0\2\24"+
    "\2\0\12\24\41\0\3\24\2\0\12\24\6\0\131\24"+
    "\7\0\53\24\5\0\106\24\12\0\37\24\1\0\14\24"+
    "\4\0\14\24\12\0\50\24\2\0\5\24\13\0\54\24"+
    "\4\0\32\24\6\0\12\24\46\0\34\24\4\0\77\24"+
    "\1\0\35\24\2\0\13\24\6\0\12\24\15\0\1\24"+
    "\10\0\17\24\101\0\114\24\4\0\12\24\21\0\11\24"+
    "\14\0\164\24\14\0\70\24\10\0\12\24\3\0\61\24"+
    "\2\0\11\24\7\0\53\24\2\0\3\24\20\0\3\24"+
    "\1\0\47\24\5\0\372\24\1\0\33\24\2\0\6\24"+
    "\2\0\46\24\2\0\6\24\2\0\10\24\1\0\1\24"+
    "\1\0\1\24\1\0\1\24\1\0\37\24\2\0\65\24"+
    "\1\0\7\24\1\0\1\24\3\0\3\24\1\0\7\24"+
    "\3\0\4\24\2\0\6\24\4\0\15\24\5\0\3\24"+
    "\1\0\7\24\102\0\2\24\23\0\1\24\34\0\1\24"+
    "\15\0\1\24\20\0\15\24\63\0\41\24\21\0\1\24"+
    "\4\0\1\24\2\0\12\24\1\0\1\24\3\0\5\24"+
    "\6\0\1\24\1\0\1\24\1\0\1\24\1\0\4\24"+
    "\1\0\13\24\2\0\4\24\5\0\5\24\4\0\1\24"+
    "\21\0\51\24\u022d\0\64\24\26\0\57\24\1\0\57\24"+
    "\1\0\205\24\6\0\11\24\14\0\46\24\1\0\1\24"+
    "\5\0\1\24\2\0\70\24\7\0\1\24\17\0\30\24"+
    "\11\0\7\24\1\0\7\24\1\0\7\24\1\0\7\24"+
    "\1\0\7\24\1\0\7\24\1\0\7\24\1\0\7\24"+
    "\1\0\40\24\57\0\1\24\325\0\3\24\31\0\17\24"+
    "\1\0\5\24\2\0\5\24\4\0\126\24\2\0\2\24"+
    "\2\0\3\24\1\0\132\24\1\0\4\24\5\0\53\24"+
    "\1\0\136\24\21\0\33\24\65\0\306\24\112\0\360\24"+
    "\20\0\215\24\103\0\56\24\2\0\15\24\3\0\34\24"+
    "\24\0\63\24\1\0\12\24\1\0\163\24\45\0\11\24"+
    "\2\0\147\24\2\0\65\24\2\0\5\24\60\0\61\24"+
    "\30\0\64\24\14\0\106\24\12\0\12\24\6\0\30\24"+
    "\3\0\1\24\1\0\61\24\2\0\44\24\14\0\35\24"+
    "\3\0\101\24\16\0\13\24\6\0\37\24\1\0\67\24"+
    "\11\0\16\24\2\0\12\24\6\0\27\24\3\0\111\24"+
    "\30\0\3\24\2\0\20\24\2\0\5\24\12\0\6\24"+
    "\2\0\6\24\2\0\6\24\11\0\7\24\1\0\7\24"+
    "\1\0\53\24\1\0\14\24\10\0\173\24\1\0\2\24"+
    "\2\0\12\24\6\0\244\24\14\0\27\24\4\0\61\24"+
    "\4\0\156\24\2\0\152\24\46\0\7\24\14\0\5\24"+
    "\5\0\14\24\1\0\15\24\1\0\5\24\1\0\1\24"+
    "\1\0\2\24\1\0\2\24\1\0\154\24\41\0\153\24"+
    "\22\0\100\24\2\0\66\24\50\0\14\24\4\0\20\24"+
    "\20\0\20\24\3\0\2\24\30\0\3\24\40\0\5\24"+
    "\1\0\207\24\23\0\12\24\7\0\32\24\4\0\1\24"+
    "\1\0\32\24\13\0\131\24\3\0\6\24\2\0\6\24"+
    "\2\0\6\24\2\0\3\24\43\0\14\24\1\0\32\24"+
    "\1\0\23\24\1\0\2\24\1\0\17\24\2\0\16\24"+
    "\42\0\173\24\105\0\65\24\210\0\1\24\202\0\35\24"+
    "\3\0\61\24\17\0\1\24\37\0\40\24\15\0\36\24"+
    "\5\0\53\24\5\0\36\24\2\0\44\24\4\0\10\24"+
    "\1\0\5\24\52\0\236\24\2\0\12\24\6\0\44\24"+
    "\4\0\44\24\4\0\50\24\10\0\64\24\234\0\67\24"+
    "\11\0\26\24\12\0\10\24\230\0\6\24\2\0\1\24"+
    "\1\0\54\24\1\0\2\24\3\0\1\24\2\0\27\24"+
    "\12\0\27\24\11\0\37\24\101\0\23\24\1\0\2\24"+
    "\12\0\26\24\12\0\32\24\106\0\70\24\6\0\2\24"+
    "\100\0\4\24\1\0\2\24\5\0\10\24\1\0\3\24"+
    "\1\0\35\24\2\0\3\24\4\0\1\24\40\0\35\24"+
    "\3\0\35\24\43\0\10\24\1\0\36\24\31\0\66\24"+
    "\12\0\26\24\12\0\23\24\15\0\22\24\156\0\111\24"+
    "\67\0\63\24\15\0\63\24\15\0\50\24\10\0\12\24"+
    "\306\0\35\24\12\0\1\24\10\0\41\24\217\0\27\24"+
    "\11\0\107\24\37\0\12\24\17\0\74\24\25\0\31\24"+
    "\7\0\12\24\6\0\65\24\1\0\12\24\4\0\3\24"+
    "\11\0\44\24\2\0\1\24\11\0\105\24\4\0\4\24"+
    "\3\0\13\24\1\0\1\24\43\0\22\24\1\0\45\24"+
    "\6\0\1\24\101\0\7\24\1\0\1\24\1\0\4\24"+
    "\1\0\17\24\1\0\12\24\7\0\73\24\5\0\12\24"+
    "\6\0\4\24\1\0\10\24\2\0\2\24\2\0\26\24"+
    "\1\0\7\24\1\0\2\24\1\0\5\24\1\0\12\24"+
    "\2\0\2\24\2\0\3\24\2\0\1\24\6\0\1\24"+
    "\5\0\7\24\2\0\7\24\3\0\5\24\213\0\113\24"+
    "\5\0\12\24\4\0\2\24\40\0\106\24\1\0\1\24"+
    "\10\0\12\24\246\0\66\24\2\0\11\24\27\0\6\24"+
    "\42\0\101\24\3\0\1\24\13\0\12\24\46\0\71\24"+
    "\7\0\12\24\66\0\33\24\2\0\17\24\4\0\12\24"+
    "\306\0\73\24\145\0\112\24\25\0\1\24\240\0\10\24"+
    "\2\0\56\24\2\0\10\24\1\0\2\24\33\0\77\24"+
    "\10\0\1\24\10\0\112\24\3\0\1\24\42\0\71\24"+
    "\7\0\11\24\1\0\55\24\1\0\11\24\17\0\12\24"+
    "\30\0\36\24\2\0\26\24\1\0\16\24\111\0\7\24"+
    "\1\0\2\24\1\0\54\24\3\0\1\24\1\0\2\24"+
    "\1\0\11\24\10\0\12\24\6\0\6\24\1\0\2\24"+
    "\1\0\45\24\1\0\2\24\1\0\6\24\7\0\12\24"+
    "\u0136\0\27\24\11\0\232\24\146\0\157\24\21\0\304\24"+
    "\274\0\57\24\321\0\107\24\271\0\71\24\7\0\37\24"+
    "\1\0\12\24\146\0\36\24\2\0\5\24\13\0\67\24"+
    "\11\0\4\24\14\0\12\24\11\0\25\24\5\0\23\24"+
    "\260\0\100\24\200\0\113\24\4\0\71\24\7\0\21\24"+
    "\100\0\2\24\1\0\1\24\34\0\370\24\10\0\363\24"+
    "\15\0\37\24\61\0\3\24\21\0\4\24\10\0\u018c\24"+
    "\4\0\153\24\5\0\15\24\3\0\11\24\7\0\12\24"+
    "\3\0\2\24\306\0\5\24\3\0\6\24\10\0\10\24"+
    "\2\0\7\24\36\0\4\24\224\0\3\24\273\0\125\24"+
    "\1\0\107\24\1\0\2\24\2\0\1\24\2\0\2\24"+
    "\2\0\4\24\1\0\14\24\1\0\1\24\1\0\7\24"+
    "\1\0\101\24\1\0\4\24\2\0\10\24\1\0\7\24"+
    "\1\0\34\24\1\0\4\24\1\0\5\24\1\0\1\24"+
    "\3\0\7\24\1\0\u0154\24\2\0\31\24\1\0\31\24"+
    "\1\0\37\24\1\0\31\24\1\0\37\24\1\0\31\24"+
    "\1\0\37\24\1\0\31\24\1\0\37\24\1\0\31\24"+
    "\1\0\10\24\2\0\151\24\4\0\62\24\10\0\1\24"+
    "\16\0\1\24\26\0\5\24\1\0\17\24\120\0\7\24"+
    "\1\0\21\24\2\0\7\24\1\0\2\24\1\0\5\24"+
    "\325\0\55\24\3\0\16\24\2\0\12\24\4\0\1\24"+
    "\u0171\0\72\24\6\0\305\24\13\0\7\24\51\0\114\24"+
    "\4\0\12\24\246\0\4\24\1\0\33\24\1\0\2\24"+
    "\1\0\1\24\2\0\1\24\1\0\12\24\1\0\4\24"+
    "\1\0\1\24\1\0\1\24\6\0\1\24\4\0\1\24"+
    "\1\0\1\24\1\0\1\24\1\0\3\24\1\0\2\24"+
    "\1\0\1\24\2\0\1\24\1\0\1\24\1\0\1\24"+
    "\1\0\1\24\1\0\1\24\1\0\2\24\1\0\1\24"+
    "\2\0\4\24\1\0\7\24\1\0\4\24\1\0\4\24"+
    "\1\0\1\24\1\0\12\24\1\0\21\24\5\0\3\24"+
    "\1\0\5\24\1\0\21\24\164\0\32\24\6\0\32\24"+
    "\6\0\32\24\166\0\327\24\51\0\65\24\13\0\336\24"+
    "\2\0\u0182\24\16\0\u0131\24\37\0\36\24\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\3\10\1\11\1\12\15\0\2\10\1\13\26\0"+
    "\1\10\13\0\1\14\100\0\1\15\5\0\1\16\12\0"+
    "\1\17\1\0\1\20\5\0\1\21\7\0\1\22\6\0"+
    "\1\23\6\0\1\24\5\0\1\25\1\0\1\26\2\0"+
    "\1\27\3\0\1\30\13\0\1\31\10\0\1\32\1\0"+
    "\1\33\3\0\1\34\1\35\6\0\1\36\1\37\5\0"+
    "\1\40\6\0\1\41\1\0\1\42\4\0\1\43\2\0"+
    "\1\44\7\0\1\45\3\0\1\46\11\0\1\47\4\0"+
    "\1\50\3\0\1\51\5\0\1\52\3\0\1\53\1\54"+
    "\1\0\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\61\0\142\0\223\0\61\0\61\0\61"+
    "\0\304\0\61\0\365\0\u0126\0\u0157\0\61\0\61\0\u0188"+
    "\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310"+
    "\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\61\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777"+
    "\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff"+
    "\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87"+
    "\0\u0ab8\0\61\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076"+
    "\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe"+
    "\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386"+
    "\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e"+
    "\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696"+
    "\0\u16c7\0\u16f8\0\61\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\61\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913\0\u1944"+
    "\0\u1975\0\u19a6\0\u19d7\0\61\0\u1a08\0\61\0\u1a39\0\u1a6a"+
    "\0\u1a9b\0\u1acc\0\u1afd\0\61\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1"+
    "\0\u1bf2\0\u1c23\0\u1c54\0\61\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18"+
    "\0\u1d49\0\u1d7a\0\61\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f"+
    "\0\u1ea0\0\61\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\61"+
    "\0\u1fc6\0\61\0\u1ff7\0\u2028\0\61\0\u2059\0\u208a\0\u20bb"+
    "\0\61\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212"+
    "\0\u2243\0\u2274\0\u22a5\0\u22d6\0\61\0\u2307\0\u2338\0\u2369"+
    "\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\61\0\u248f\0\61"+
    "\0\u24c0\0\u24f1\0\u2522\0\61\0\61\0\u2553\0\u2584\0\u25b5"+
    "\0\u25e6\0\u2617\0\u2648\0\61\0\61\0\u2679\0\u26aa\0\u26db"+
    "\0\u270c\0\u273d\0\61\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832"+
    "\0\u2863\0\61\0\u2894\0\61\0\u28c5\0\u28f6\0\u2927\0\u2958"+
    "\0\61\0\u2989\0\u29ba\0\61\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e"+
    "\0\u2aaf\0\u2ae0\0\u2b11\0\61\0\u2b42\0\u2b73\0\u2ba4\0\61"+
    "\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c"+
    "\0\u2d5d\0\61\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\61\0\u2e52"+
    "\0\u2e83\0\u2eb4\0\61\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9"+
    "\0\61\0\u2fda\0\u300b\0\u303c\0\61\0\61\0\u306d\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\32\13\1\14\2\13\1\15\6\13\1\16"+
    "\1\17\63\0\1\3\56\0\4\20\1\0\6\20\1\21"+
    "\1\20\1\22\1\23\1\24\1\25\2\20\1\26\4\20"+
    "\1\27\1\30\1\31\1\32\1\20\1\33\1\34\22\20"+
    "\11\0\1\11\1\0\44\13\13\0\1\13\1\0\44\13"+
    "\13\0\1\13\1\0\31\13\1\35\12\13\13\0\1\13"+
    "\1\0\33\13\1\36\10\13\2\0\4\20\1\37\60\20"+
    "\1\37\26\20\1\40\31\20\1\37\6\20\1\41\6\20"+
    "\1\42\3\20\1\43\2\20\1\44\33\20\1\37\6\20"+
    "\1\45\51\20\1\37\27\20\1\46\30\20\1\37\12\20"+
    "\1\47\3\20\1\50\41\20\1\37\11\20\1\51\11\20"+
    "\1\52\34\20\1\37\24\20\1\53\33\20\1\37\25\20"+
    "\1\54\32\20\1\37\6\20\1\55\22\20\1\56\26\20"+
    "\1\37\6\20\1\57\3\20\1\60\45\20\1\37\12\20"+
    "\1\61\3\20\1\62\7\20\1\63\31\20\1\37\27\20"+
    "\1\64\24\20\10\0\1\65\1\13\1\0\44\13\13\0"+
    "\1\13\1\0\43\13\1\66\2\0\4\20\1\37\12\20"+
    "\1\67\45\20\1\37\22\20\1\70\35\20\1\37\12\20"+
    "\1\71\45\20\1\37\6\20\1\72\51\20\1\37\21\20"+
    "\1\73\1\74\35\20\1\37\30\20\1\75\27\20\1\37"+
    "\30\20\1\76\27\20\1\37\10\20\1\77\47\20\1\37"+
    "\10\20\1\100\10\20\1\101\36\20\1\102\35\20\1\103"+
    "\22\20\1\37\11\20\1\104\15\20\1\105\30\20\1\37"+
    "\22\20\1\106\1\107\34\20\1\37\10\20\1\110\47\20"+
    "\1\37\27\20\1\111\30\20\1\37\23\20\1\112\34\20"+
    "\1\37\11\20\1\113\46\20\1\37\27\20\1\114\30\20"+
    "\1\37\22\20\1\115\11\20\1\116\23\20\1\37\12\20"+
    "\1\117\45\20\1\37\16\20\1\120\41\20\1\37\31\20"+
    "\1\121\22\20\53\0\1\122\1\123\14\0\1\124\1\13"+
    "\1\0\44\13\2\0\4\20\1\37\6\20\1\125\51\20"+
    "\1\37\25\20\1\126\32\20\1\37\10\20\1\127\47\20"+
    "\1\37\27\20\1\130\30\20\1\37\31\20\1\131\26\20"+
    "\1\37\7\20\1\132\50\20\1\37\24\20\1\133\33\20"+
    "\1\37\6\20\1\134\17\20\1\135\31\20\1\37\15\20"+
    "\1\136\42\20\1\37\15\20\1\137\42\20\1\37\6\20"+
    "\1\140\51\20\1\37\30\20\1\141\27\20\1\37\16\20"+
    "\1\142\41\20\1\37\30\20\1\143\27\20\1\37\7\20"+
    "\1\144\50\20\1\37\12\20\1\145\45\20\1\37\16\20"+
    "\1\146\41\20\1\37\27\20\1\147\30\20\1\37\30\20"+
    "\1\150\27\20\1\37\16\20\1\151\41\20\1\37\25\20"+
    "\1\152\32\20\1\37\6\20\1\153\51\20\1\37\30\20"+
    "\1\154\27\20\1\37\22\20\1\155\35\20\1\37\32\20"+
    "\1\156\25\20\1\37\6\20\1\157\45\20\51\0\1\160"+
    "\61\0\1\161\61\0\1\162\5\0\4\20\1\37\35\20"+
    "\1\163\22\20\1\37\24\20\1\164\33\20\1\37\20\20"+
    "\1\165\37\20\1\37\12\20\1\166\45\20\1\37\22\20"+
    "\1\167\35\20\1\37\24\20\1\170\33\20\1\37\27\20"+
    "\1\171\30\20\1\37\11\20\1\172\46\20\1\37\31\20"+
    "\1\173\26\20\1\37\6\20\1\174\51\20\1\37\12\20"+
    "\1\175\45\20\1\37\27\20\1\176\30\20\1\37\26\20"+
    "\1\177\31\20\1\37\10\20\1\200\47\20\1\37\16\20"+
    "\1\201\41\20\1\37\26\20\1\202\31\20\1\203\60\20"+
    "\1\37\24\20\1\204\33\20\1\37\33\20\1\205\24\20"+
    "\1\37\12\20\1\206\45\20\1\37\24\20\1\207\33\20"+
    "\1\37\31\20\1\210\26\20\1\211\60\20\1\37\24\20"+
    "\1\212\33\20\1\37\25\20\1\213\32\20\1\37\16\20"+
    "\1\214\41\20\1\37\26\20\1\215\25\20\47\0\1\216"+
    "\57\0\1\217\63\0\1\220\7\0\4\20\1\37\30\20"+
    "\1\221\27\20\1\37\35\20\1\222\22\20\1\37\7\20"+
    "\1\223\50\20\1\224\60\20\1\37\23\20\1\225\34\20"+
    "\1\226\60\20\1\37\35\20\1\227\22\20\1\37\24\20"+
    "\1\230\33\20\1\37\10\20\1\231\47\20\1\37\35\20"+
    "\1\232\22\20\1\37\26\20\1\233\31\20\1\234\60\20"+
    "\1\37\16\20\1\235\41\20\1\37\12\20\1\236\45\20"+
    "\1\37\30\20\1\237\27\20\1\37\12\20\1\240\45\20"+
    "\1\37\23\20\1\241\34\20\1\37\24\20\1\242\33\20"+
    "\1\37\24\20\1\243\33\20\1\244\60\20\1\37\12\20"+
    "\1\245\45\20\1\37\35\20\1\246\22\20\1\37\24\20"+
    "\1\247\33\20\1\37\6\20\1\250\51\20\1\37\16\20"+
    "\1\251\35\20\55\0\1\252\54\0\1\253\56\0\1\254"+
    "\11\0\4\20\1\37\12\20\1\255\45\20\1\37\30\20"+
    "\1\256\27\20\1\37\24\20\1\257\33\20\1\37\6\20"+
    "\1\260\51\20\1\37\26\20\1\261\31\20\1\262\60\20"+
    "\1\37\30\20\1\263\27\20\1\37\10\20\1\264\11\20"+
    "\1\265\35\20\1\37\24\20\1\266\33\20\1\37\32\20"+
    "\1\267\25\20\1\270\60\20\1\37\31\20\1\271\26\20"+
    "\1\272\60\20\1\37\12\20\1\273\45\20\1\37\26\20"+
    "\1\274\31\20\1\275\60\20\1\37\27\20\1\276\30\20"+
    "\1\37\32\20\1\277\25\20\1\37\35\20\1\300\22\20"+
    "\1\301\60\20\1\37\24\20\1\302\27\20\47\0\1\303"+
    "\66\0\1\304\3\0\4\20\1\37\34\20\1\305\23\20"+
    "\1\37\12\20\1\306\45\20\1\37\34\20\1\307\23\20"+
    "\1\37\27\20\1\310\30\20\1\37\12\20\1\311\45\20"+
    "\1\37\31\20\1\312\26\20\1\37\26\20\1\313\31\20"+
    "\1\37\24\20\1\314\33\20\1\315\60\20\1\37\16\20"+
    "\1\316\41\20\1\37\10\20\1\317\47\20\1\37\27\20"+
    "\1\320\30\20\1\37\11\20\1\321\46\20\1\37\30\20"+
    "\1\322\27\20\1\37\16\20\1\323\41\20\1\37\25\20"+
    "\1\324\2\20\1\325\27\20\1\326\35\20\1\327\16\20"+
    "\43\0\1\330\64\0\1\331\11\0\4\20\1\37\30\20"+
    "\1\332\27\20\1\37\34\20\1\333\23\20\1\334\60\20"+
    "\1\335\60\20\1\37\10\20\1\336\47\20\1\37\26\20"+
    "\1\337\31\20\1\37\12\20\1\340\45\20\1\37\11\20"+
    "\1\341\46\20\1\37\6\20\1\342\51\20\1\37\16\20"+
    "\1\343\41\20\1\344\60\20\1\345\60\20\1\37\6\20"+
    "\1\346\51\20\1\37\27\20\1\347\30\20\1\37\26\20"+
    "\1\350\31\20\1\37\24\20\1\351\33\20\1\37\10\20"+
    "\1\352\43\20\43\0\1\353\15\0\4\20\1\37\24\20"+
    "\1\354\33\20\1\37\30\20\1\355\27\20\1\37\24\20"+
    "\1\356\33\20\1\37\6\20\1\357\51\20\1\37\6\20"+
    "\1\360\51\20\1\37\16\20\1\361\41\20\1\362\60\20"+
    "\1\37\24\20\1\363\33\20\1\364\60\20\1\37\16\20"+
    "\1\365\41\20\1\37\12\20\1\366\45\20\1\37\30\20"+
    "\1\367\27\20\1\37\26\20\1\370\31\20\1\371\60\20"+
    "\1\37\24\20\1\372\33\20\1\37\25\20\1\373\32\20"+
    "\1\374\60\20\1\37\10\20\1\375\47\20\1\37\13\20"+
    "\1\376\44\20\1\37\23\20\1\377\34\20\1\37\7\20"+
    "\1\u0100\50\20\1\37\14\20\1\u0101\43\20\1\37\6\20"+
    "\1\u0102\51\20\1\37\12\20\1\u0103\45\20\1\u0104\60\20"+
    "\1\37\16\20\1\u0105\41\20\1\37\16\20\1\u0106\41\20"+
    "\1\37\16\20\1\u0107\41\20\1\u0108\60\20\1\37\21\20"+
    "\1\u0109\36\20\1\37\31\20\1\u010a\26\20\1\37\21\20"+
    "\1\u010b\36\20\1\37\6\20\1\u010c\51\20\1\37\21\20"+
    "\1\u010d\36\20\1\37\24\20\1\u010e\33\20\1\37\10\20"+
    "\1\u010f\47\20\1\37\12\20\1\u0110\45\20\1\37\23\20"+
    "\1\u0111\34\20\1\u0112\60\20\1\37\10\20\1\u0113\47\20"+
    "\1\37\6\20\1\u0114\51\20\1\37\23\20\1\u0115\34\20"+
    "\1\37\6\20\1\u0116\51\20\1\u0117\60\20\1\37\30\20"+
    "\1\u0118\27\20\1\37\16\20\1\u0119\41\20\1\37\11\20"+
    "\1\u011a\46\20\1\u011b\60\20\1\37\10\20\1\u011c\47\20"+
    "\1\37\6\20\1\u011d\51\20\1\37\24\20\1\u011e\33\20"+
    "\1\37\24\20\1\u011f\33\20\1\37\16\20\1\u0120\41\20"+
    "\1\u0121\60\20\1\37\23\20\1\u0122\34\20\1\37\27\20"+
    "\1\u0123\30\20\1\37\24\20\1\u0124\33\20\1\u0125\60\20"+
    "\1\u0126\60\20\1\37\23\20\1\u0127\34\20\1\u0128\54\20";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12446];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\3\11\1\1\1\11\3\1\2\11"+
    "\15\0\2\1\1\11\26\0\1\1\13\0\1\11\100\0"+
    "\1\11\5\0\1\11\12\0\1\11\1\0\1\11\5\0"+
    "\1\11\7\0\1\11\6\0\1\11\6\0\1\11\5\0"+
    "\1\11\1\0\1\11\2\0\1\11\3\0\1\11\13\0"+
    "\1\11\10\0\1\11\1\0\1\11\3\0\2\11\6\0"+
    "\2\11\5\0\1\11\6\0\1\11\1\0\1\11\4\0"+
    "\1\11\2\0\1\11\7\0\1\11\3\0\1\11\11\0"+
    "\1\11\4\0\1\11\3\0\1\11\5\0\1\11\3\0"+
    "\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type){
        return new Symbol(type, yyline+1,yycolumn+1);
    }
    private Symbol symbol(int type, Object value){
        //System.out.println(type + " line: " + (yyline+1) + " col: "+(yycolumn+1) + " " + value);
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }
    private void error(){
        ErrorsLP.addError(yytext(), yyline+1, yycolumn+1, "Error Léxico","Cadena no definida");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DBLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error();
            }
          // fall through
          case 46: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 47: break;
          case 3:
            { return symbol(LPAREN, yytext());
            }
          // fall through
          case 48: break;
          case 4:
            { return symbol(RPAREN, yytext());
            }
          // fall through
          case 49: break;
          case 5:
            { return symbol(COMMA, yytext());
            }
          // fall through
          case 50: break;
          case 6:
            { return symbol(DIGIT, Integer.parseInt(yytext()));
            }
          // fall through
          case 51: break;
          case 7:
            { return symbol(COLON, yytext());
            }
          // fall through
          case 52: break;
          case 8:
            { ErrorsLP.addError(yytext(), yyline+1, yycolumn+1, "Error Léxico","Cadena no definida");
            }
          // fall through
          case 53: break;
          case 9:
            { return symbol(LBRACE, yytext());
            }
          // fall through
          case 54: break;
          case 10:
            { return symbol(RBRACE, yytext());
            }
          // fall through
          case 55: break;
          case 11:
            { return symbol(STRING, yytext());
            }
          // fall through
          case 56: break;
          case 12:
            { return symbol(ID, yytext());
            }
          // fall through
          case 57: break;
          case 13:
            { return symbol(NONE, yytext());
            }
          // fall through
          case 58: break;
          case 14:
            { return symbol(TEMA, yytext());
            }
          // fall through
          case 59: break;
          case 15:
            { return symbol(CLASE, yytext());
            }
          // fall through
          case 60: break;
          case 16:
            { return symbol(COMBO, yytext());
            }
          // fall through
          case 61: break;
          case 17:
            { return symbol(FILAS, yytext());
            }
          // fall through
          case 62: break;
          case 18:
            { return symbol(RADIO, yytext());
            }
          // fall through
          case 63: break;
          case 19:
            { return symbol(DB_USER, yytext());
            }
          // fall through
          case 64: break;
          case 20:
            { return symbol(ESTADO, yytext());
            }
          // fall through
          case 65: break;
          case 21:
            { return symbol(INDICE, yytext());
            }
          // fall through
          case 66: break;
          case 22:
            { return symbol(NOMBRE, yytext());
            }
          // fall through
          case 67: break;
          case 23:
            { return symbol(PUNTEO, yytext());
            }
          // fall through
          case 68: break;
          case 24:
            { return symbol(TRIVIA, yytext());
            }
          // fall through
          case 69: break;
          case 25:
            { return symbol(FICHERO, yytext());
            }
          // fall through
          case 70: break;
          case 26:
            { return symbol(USUARIO, yytext());
            }
          // fall through
          case 71: break;
          case 27:
            { return symbol(DB_TRIVIA, yytext());
            }
          // fall through
          case 72: break;
          case 28:
            { return symbol(CHECKBOX, yytext());
            }
          // fall through
          case 73: break;
          case 29:
            { return symbol(COLUMNAS, yytext());
            }
          // fall through
          case 74: break;
          case 30:
            { return symbol(OPCIONES, yytext());
            }
          // fall through
          case 75: break;
          case 31:
            { return symbol(PASSWORD, yytext());
            }
          // fall through
          case 76: break;
          case 32:
            { return symbol(NEW_TRIVIA, yytext());
            }
          // fall through
          case 77: break;
          case 33:
            { return symbol(ID_TRIVIA, yytext());
            }
          // fall through
          case 78: break;
          case 34:
            { return symbol(RESPUESTA, yytext());
            }
          // fall through
          case 79: break;
          case 35:
            { return symbol(AREA_TEXTO, yytext());
            }
          // fall through
          case 80: break;
          case 36:
            { return symbol(ESTRUCTURA, yytext());
            }
          // fall through
          case 81: break;
          case 37:
            { return symbol(CAMPO_TEXTO, yytext());
            }
          // fall through
          case 82: break;
          case 38:
            { return symbol(INSTITUCION, yytext());
            }
          // fall through
          case 83: break;
          case 39:
            { return symbol(TIEMPO_TOTAL, yytext());
            }
          // fall through
          case 84: break;
          case 40:
            { return symbol(TEXTO_VISIBLE, yytext());
            }
          // fall through
          case 85: break;
          case 41:
            { return symbol(FECHA_CREACION, yytext());
            }
          // fall through
          case 86: break;
          case 42:
            { return symbol(TIEMPO_PREGUNTA, yytext());
            }
          // fall through
          case 87: break;
          case 43:
            { return symbol(USUARIO_CREACION, yytext());
            }
          // fall through
          case 88: break;
          case 44:
            { return symbol(DATOS_RECOPILADOS, yytext());
            }
          // fall through
          case 89: break;
          case 45:
            { return symbol(FECHA_MODIFICACION, yytext());
            }
          // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
