
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navi.quizcraftweb.backend.parser_lexer.sqlkv;

import java_cup.runtime.*;
import com.navi.quizcraftweb.backend.parser_lexer.sqlkv.obj.*;
import com.navi.quizcraftweb.backend.parser_lexer.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SqlParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public SqlParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SqlParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SqlParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\011\003\000\002\002" +
    "\004\000\002\002\005\000\002\002\005\000\002\002\006" +
    "\000\002\010\005\000\002\010\005\000\002\007\003\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\006\005\000\002\006\005\000\002\005" +
    "\003\000\002\005\005\000\002\005\003\000\002\005\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\004\004\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\046\001\002\000\004\005\007\001\002" +
    "\000\012\002\uffff\003\011\006\012\016\010\001\002\000" +
    "\012\002\ufff2\003\ufff2\006\ufff2\013\ufff2\001\002\000\012" +
    "\002\ufff0\003\ufff0\006\ufff0\013\ufff0\001\002\000\004\007" +
    "\021\001\002\000\012\002\ufffe\003\016\006\012\013\015" +
    "\001\002\000\004\002\ufffd\001\002\000\004\016\020\001" +
    "\002\000\012\002\uffef\003\uffef\006\uffef\013\uffef\001\002" +
    "\000\004\002\ufffc\001\002\000\012\002\ufff1\003\ufff1\006" +
    "\ufff1\013\ufff1\001\002\000\012\003\023\010\024\011\025" +
    "\012\026\001\002\000\006\003\040\021\037\001\002\000" +
    "\004\002\ufffa\001\002\000\006\003\uffee\021\uffee\001\002" +
    "\000\006\003\uffed\021\uffed\001\002\000\006\003\uffec\021" +
    "\uffec\001\002\000\010\002\ufffb\014\031\015\032\001\002" +
    "\000\010\002\ufff9\014\ufff9\015\ufff9\001\002\000\012\003" +
    "\035\010\024\011\025\012\026\001\002\000\012\003\033" +
    "\010\024\011\025\012\026\001\002\000\010\002\ufff5\014" +
    "\ufff5\015\ufff5\001\002\000\010\002\ufff7\014\ufff7\015\ufff7" +
    "\001\002\000\010\002\ufff6\014\ufff6\015\ufff6\001\002\000" +
    "\010\002\ufff8\014\ufff8\015\ufff8\001\002\000\010\003\042" +
    "\017\044\020\041\001\002\000\006\003\uffeb\021\uffeb\001" +
    "\002\000\012\002\uffe9\003\uffe9\014\uffe9\015\uffe9\001\002" +
    "\000\010\002\ufff3\014\ufff3\015\ufff3\001\002\000\012\002" +
    "\ufff4\003\045\014\ufff4\015\ufff4\001\002\000\012\002\uffea" +
    "\003\uffea\014\uffea\015\uffea\001\002\000\012\002\uffe8\003" +
    "\uffe8\014\uffe8\015\uffe8\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\006\002\003\011\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\012" +
    "\010\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\021\006\027\007\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\021\006\035\001\001\000\006\004" +
    "\021\006\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SqlParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SqlParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SqlParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public SqlParser(SqlLexer lex) {
        super(lex);
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme;
        if(s.value != null) lexeme = s.value.toString();
        else lexeme = "null";
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        HashMap<String, String> symbolNames = Validate.getSymbolNames();
        List<Integer> tokens = expected_token_ids();
        String des = "Se esperaba: ";
        for(Integer i : tokens) {
            String fromId = symbl_name_from_id(i);
            String symbolName = symbolNames.get(fromId);
            if(symbolName != null){
                des += "'"+symbolName+ "' o ";
            }
            else{
                if(!fromId.equals("error") && !fromId.equals("EOF")){
                    des += fromId +" o ";
                }
            }
        }
        if(des.length() > 16) des = des.substring(0, des.length() - 3);
        addError(lexeme, line, col, des);
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme;
        if(s.value != null) lexeme = s.value.toString();
        else lexeme = "null";
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        HashMap<String, String> symbolNames = Validate.getSymbolNames();
        List<Integer> tokens = expected_token_ids();
        String des = "Se esperaba: ";
        for(Integer i : tokens) {
            String fromId = symbl_name_from_id(i);
            String symbolName = symbolNames.get(fromId);
            if(symbolName != null){
                des += "'"+symbolName+ "' o ";
            }
            else{
                if(!fromId.equals("error") && !fromId.equals("EOF")){
                    des += fromId +" o ";
                }
            }
        }
        if(des.length() > 16) des = des.substring(0, des.length() - 3);
        addError(lexeme, line, col, des);
    }

    private void addError(String lexeme, int line, int col, String description){
        ErrorsLP.addError(lexeme, line, col, "Error Sintáctico", description);
    }
    protected int error_sync_size() {
        return 10;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SqlParser$actions {
  private final SqlParser parser;

  /** Constructor */
  CUP$SqlParser$actions(SqlParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SqlParser$do_action_part00000000(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack            CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SqlParser$result;

      /* select the action based on the action number */
      switch (CUP$SqlParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		RESULT = start_val;
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SqlParser$parser.done_parsing();
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= instruction 
            {
              Object RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("s",7, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruction ::= SELECCIONAR REPORTE 
            {
              Object RESULT =null;
		
                if(ErrorsLP.getErrors().isEmpty()) Query.selectAll();
                
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction ::= SELECCIONAR REPORTE listC 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<String> i = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                if(ErrorsLP.getErrors().isEmpty()) Query.select(i);
                
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= SELECCIONAR REPORTE filter 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<Condition> f = (ArrayList<Condition>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                if(ErrorsLP.getErrors().isEmpty()) Query.selectAll(f);
                
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= SELECCIONAR REPORTE listC filter 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		ArrayList<String> i = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<Condition> f = (ArrayList<Condition>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
                if(ErrorsLP.getErrors().isEmpty()) Query.select(i, f);
                
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("instruction",0, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-3)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // filter ::= FILTRAR POR conditions 
            {
              ArrayList<Condition> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		ArrayList<Condition> c = (ArrayList<Condition>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("filter",6, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // filter ::= FILTRAR POR error 
            {
              ArrayList<Condition> RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("filter",6, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // conditions ::= condition 
            {
              ArrayList<Condition> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
            ArrayList<Condition> conditions = new ArrayList<>();
            conditions.add(c);
            RESULT = conditions;
            
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("conditions",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // conditions ::= conditions AND condition 
            {
              ArrayList<Condition> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<Condition> cs = (ArrayList<Condition>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
            c.setType(Condition.AND);
            cs.add(c);
            RESULT = cs;
            
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("conditions",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // conditions ::= conditions OR condition 
            {
              ArrayList<Condition> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<Condition> cs = (ArrayList<Condition>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		Condition c = (Condition)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
            c.setType(Condition.OR);
            cs.add(c);
            RESULT = cs;
            
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("conditions",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // conditions ::= conditions AND error 
            {
              ArrayList<Condition> RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("conditions",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // conditions ::= conditions OR error 
            {
              ArrayList<Condition> RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("conditions",5, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // condition ::= reserved_word REL_OP expr 
            {
              Condition RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		Integer f = (Integer)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
            RESULT = new Condition(f,s,v);
            
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // condition ::= reserved_word REL_OP error 
            {
              Condition RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("condition",4, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listC ::= ID 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
            ArrayList<String> trivias = new ArrayList<>();
            trivias.add(id);
            RESULT = trivias;
            
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("listC",3, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listC ::= listC COMMA ID 
            {
              ArrayList<String> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).right;
		ArrayList<String> t = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		
            t.add(id);
            RESULT = t;
            
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("listC",3, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-2)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listC ::= error 
            {
              ArrayList<String> RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("listC",3, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listC ::= listC error 
            {
              ArrayList<String> RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("listC",3, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // reserved_word ::= USUARIO 
            {
              Integer RESULT =null;
		 RESULT = Condition.USUARIO;
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("reserved_word",2, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // reserved_word ::= TIEMPO_TOTAL 
            {
              Integer RESULT =null;
		 RESULT = Condition.TIEMPO_TOTAL;
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("reserved_word",2, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // reserved_word ::= PUNTEO 
            {
              Integer RESULT =null;
		 RESULT = Condition.PUNTEO;
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("reserved_word",2, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // reserved_word ::= reserved_word error 
            {
              Integer RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("reserved_word",2, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= DIGIT 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		RESULT = d;
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$SqlParser$stack.peek()).value;
		RESULT = s.toString().replace("\"","");
              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr error 
            {
              String RESULT =null;

              CUP$SqlParser$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$SqlParser$stack.elementAt(CUP$SqlParser$top-1)), ((java_cup.runtime.Symbol)CUP$SqlParser$stack.peek()), RESULT);
            }
          return CUP$SqlParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SqlParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SqlParser$do_action(
    int                        CUP$SqlParser$act_num,
    java_cup.runtime.lr_parser CUP$SqlParser$parser,
    java.util.Stack            CUP$SqlParser$stack,
    int                        CUP$SqlParser$top)
    throws java.lang.Exception
    {
              return CUP$SqlParser$do_action_part00000000(
                               CUP$SqlParser$act_num,
                               CUP$SqlParser$parser,
                               CUP$SqlParser$stack,
                               CUP$SqlParser$top);
    }
}

}
