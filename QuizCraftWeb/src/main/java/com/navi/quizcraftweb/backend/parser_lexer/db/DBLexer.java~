// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: DBLexer.flex

package com.navi.quizcraftweb.backend.parser_lexer.db   ;
import java_cup.runtime.*;
import static com.navi.quizcraftweb.backend.parser_lexer.db.sym.*;
import com.navi.quizcraftweb.backend.parser_lexer.*;

@SuppressWarnings("fallthrough")
public class DBLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\0\1\4\1\0\1\5\3\0\1\6\1\7\2\0"+
    "\1\10\1\5\1\11\1\0\12\12\1\13\6\0\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\25"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\2\25"+
    "\3\0\1\43\1\44\1\0\1\45\1\46\1\25\1\47"+
    "\1\50\3\25\1\51\10\25\1\52\1\53\1\54\1\55"+
    "\1\56\4\25\1\57\1\60\1\61\43\0\1\43\10\0"+
    "\1\43\1\0\1\43\3\0\1\43\4\0\1\43\4\0"+
    "\1\43\4\0\30\43\1\0\37\43\1\0\u01ca\43\4\0"+
    "\14\43\16\0\5\43\7\0\1\43\1\0\1\43\21\0"+
    "\165\43\1\0\2\43\2\0\4\43\1\0\1\43\6\0"+
    "\1\43\1\0\3\43\1\0\1\43\1\0\24\43\1\0"+
    "\123\43\1\0\213\43\1\0\255\43\1\0\46\43\2\0"+
    "\1\43\6\0\51\43\10\0\55\43\1\0\1\43\1\0"+
    "\2\43\1\0\2\43\1\0\1\43\10\0\33\43\4\0"+
    "\4\43\35\0\13\43\5\0\112\43\4\0\146\43\1\0"+
    "\10\43\2\0\12\43\1\0\23\43\2\0\1\43\20\0"+
    "\73\43\2\0\145\43\16\0\66\43\4\0\1\43\2\0"+
    "\1\43\2\0\56\43\22\0\34\43\4\0\13\43\65\0"+
    "\25\43\1\0\10\43\25\0\17\43\1\0\201\43\2\0"+
    "\12\43\1\0\23\43\1\0\10\43\2\0\2\43\2\0"+
    "\26\43\1\0\7\43\1\0\1\43\3\0\4\43\2\0"+
    "\11\43\2\0\2\43\2\0\4\43\10\0\1\43\4\0"+
    "\2\43\1\0\5\43\2\0\14\43\12\0\1\43\1\0"+
    "\1\43\2\0\3\43\1\0\6\43\4\0\2\43\2\0"+
    "\26\43\1\0\7\43\1\0\2\43\1\0\2\43\1\0"+
    "\2\43\2\0\1\43\1\0\5\43\4\0\2\43\2\0"+
    "\3\43\3\0\1\43\7\0\4\43\1\0\1\43\7\0"+
    "\20\43\13\0\3\43\1\0\11\43\1\0\3\43\1\0"+
    "\26\43\1\0\7\43\1\0\2\43\1\0\5\43\2\0"+
    "\12\43\1\0\3\43\1\0\3\43\2\0\1\43\17\0"+
    "\4\43\2\0\12\43\11\0\7\43\1\0\3\43\1\0"+
    "\10\43\2\0\2\43\2\0\26\43\1\0\7\43\1\0"+
    "\2\43\1\0\5\43\2\0\11\43\2\0\2\43\2\0"+
    "\3\43\10\0\2\43\4\0\2\43\1\0\5\43\2\0"+
    "\12\43\1\0\1\43\20\0\2\43\1\0\6\43\3\0"+
    "\3\43\1\0\4\43\3\0\2\43\1\0\1\43\1\0"+
    "\2\43\3\0\2\43\3\0\3\43\3\0\14\43\4\0"+
    "\5\43\3\0\3\43\1\0\4\43\2\0\1\43\6\0"+
    "\1\43\16\0\12\43\20\0\15\43\1\0\3\43\1\0"+
    "\27\43\1\0\20\43\3\0\10\43\1\0\3\43\1\0"+
    "\4\43\7\0\2\43\1\0\3\43\5\0\4\43\2\0"+
    "\12\43\20\0\4\43\1\0\10\43\1\0\3\43\1\0"+
    "\27\43\1\0\12\43\1\0\5\43\2\0\11\43\1\0"+
    "\3\43\1\0\4\43\7\0\2\43\7\0\1\43\1\0"+
    "\4\43\2\0\12\43\1\0\2\43\15\0\4\43\1\0"+
    "\10\43\1\0\3\43\1\0\63\43\1\0\3\43\1\0"+
    "\5\43\5\0\4\43\7\0\5\43\2\0\12\43\12\0"+
    "\6\43\2\0\2\43\1\0\22\43\3\0\30\43\1\0"+
    "\11\43\1\0\1\43\2\0\7\43\3\0\1\43\4\0"+
    "\6\43\1\0\1\43\1\0\10\43\6\0\12\43\2\0"+
    "\2\43\15\0\72\43\5\0\17\43\1\0\12\43\47\0"+
    "\2\43\1\0\1\43\1\0\5\43\1\0\30\43\1\0"+
    "\1\43\1\0\27\43\2\0\5\43\1\0\1\43\1\0"+
    "\6\43\2\0\12\43\2\0\4\43\40\0\1\43\27\0"+
    "\2\43\6\0\12\43\13\0\1\43\1\0\1\43\1\0"+
    "\1\43\4\0\12\43\1\0\44\43\4\0\24\43\1\0"+
    "\22\43\1\0\44\43\11\0\1\43\71\0\112\43\6\0"+
    "\116\43\2\0\46\43\1\0\1\43\5\0\1\43\2\0"+
    "\53\43\1\0\115\43\1\0\4\43\2\0\7\43\1\0"+
    "\1\43\1\0\4\43\2\0\51\43\1\0\4\43\2\0"+
    "\41\43\1\0\4\43\2\0\7\43\1\0\1\43\1\0"+
    "\4\43\2\0\17\43\1\0\71\43\1\0\4\43\2\0"+
    "\103\43\2\0\3\43\40\0\20\43\20\0\126\43\2\0"+
    "\6\43\3\0\u016c\43\2\0\21\43\1\0\32\43\5\0"+
    "\113\43\3\0\13\43\7\0\15\43\1\0\7\43\13\0"+
    "\25\43\13\0\24\43\14\0\15\43\1\0\3\43\1\0"+
    "\2\43\14\0\124\43\3\0\1\43\4\0\2\43\2\0"+
    "\12\43\41\0\3\43\2\0\12\43\6\0\131\43\7\0"+
    "\53\43\5\0\106\43\12\0\37\43\1\0\14\43\4\0"+
    "\14\43\12\0\50\43\2\0\5\43\13\0\54\43\4\0"+
    "\32\43\6\0\12\43\46\0\34\43\4\0\77\43\1\0"+
    "\35\43\2\0\13\43\6\0\12\43\15\0\1\43\10\0"+
    "\17\43\101\0\114\43\4\0\12\43\21\0\11\43\14\0"+
    "\164\43\14\0\70\43\10\0\12\43\3\0\61\43\2\0"+
    "\11\43\7\0\53\43\2\0\3\43\20\0\3\43\1\0"+
    "\47\43\5\0\372\43\1\0\33\43\2\0\6\43\2\0"+
    "\46\43\2\0\6\43\2\0\10\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\37\43\2\0\65\43\1\0"+
    "\7\43\1\0\1\43\3\0\3\43\1\0\7\43\3\0"+
    "\4\43\2\0\6\43\4\0\15\43\5\0\3\43\1\0"+
    "\7\43\102\0\2\43\23\0\1\43\34\0\1\43\15\0"+
    "\1\43\20\0\15\43\63\0\41\43\21\0\1\43\4\0"+
    "\1\43\2\0\12\43\1\0\1\43\3\0\5\43\6\0"+
    "\1\43\1\0\1\43\1\0\1\43\1\0\4\43\1\0"+
    "\13\43\2\0\4\43\5\0\5\43\4\0\1\43\21\0"+
    "\51\43\u022d\0\64\43\26\0\57\43\1\0\57\43\1\0"+
    "\205\43\6\0\11\43\14\0\46\43\1\0\1\43\5\0"+
    "\1\43\2\0\70\43\7\0\1\43\17\0\30\43\11\0"+
    "\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0"+
    "\7\43\1\0\7\43\1\0\7\43\1\0\7\43\1\0"+
    "\40\43\57\0\1\43\325\0\3\43\31\0\17\43\1\0"+
    "\5\43\2\0\5\43\4\0\126\43\2\0\2\43\2\0"+
    "\3\43\1\0\132\43\1\0\4\43\5\0\53\43\1\0"+
    "\136\43\21\0\33\43\65\0\306\43\112\0\360\43\20\0"+
    "\215\43\103\0\56\43\2\0\15\43\3\0\34\43\24\0"+
    "\63\43\1\0\12\43\1\0\163\43\45\0\11\43\2\0"+
    "\147\43\2\0\65\43\2\0\5\43\60\0\61\43\30\0"+
    "\64\43\14\0\106\43\12\0\12\43\6\0\30\43\3\0"+
    "\1\43\1\0\61\43\2\0\44\43\14\0\35\43\3\0"+
    "\101\43\16\0\13\43\6\0\37\43\1\0\67\43\11\0"+
    "\16\43\2\0\12\43\6\0\27\43\3\0\111\43\30\0"+
    "\3\43\2\0\20\43\2\0\5\43\12\0\6\43\2\0"+
    "\6\43\2\0\6\43\11\0\7\43\1\0\7\43\1\0"+
    "\53\43\1\0\14\43\10\0\173\43\1\0\2\43\2\0"+
    "\12\43\6\0\244\43\14\0\27\43\4\0\61\43\4\0"+
    "\156\43\2\0\152\43\46\0\7\43\14\0\5\43\5\0"+
    "\14\43\1\0\15\43\1\0\5\43\1\0\1\43\1\0"+
    "\2\43\1\0\2\43\1\0\154\43\41\0\153\43\22\0"+
    "\100\43\2\0\66\43\50\0\14\43\4\0\20\43\20\0"+
    "\20\43\3\0\2\43\30\0\3\43\40\0\5\43\1\0"+
    "\207\43\23\0\12\43\7\0\32\43\4\0\1\43\1\0"+
    "\32\43\13\0\131\43\3\0\6\43\2\0\6\43\2\0"+
    "\6\43\2\0\3\43\43\0\14\43\1\0\32\43\1\0"+
    "\23\43\1\0\2\43\1\0\17\43\2\0\16\43\42\0"+
    "\173\43\105\0\65\43\210\0\1\43\202\0\35\43\3\0"+
    "\61\43\17\0\1\43\37\0\40\43\15\0\36\43\5\0"+
    "\53\43\5\0\36\43\2\0\44\43\4\0\10\43\1\0"+
    "\5\43\52\0\236\43\2\0\12\43\6\0\44\43\4\0"+
    "\44\43\4\0\50\43\10\0\64\43\234\0\67\43\11\0"+
    "\26\43\12\0\10\43\230\0\6\43\2\0\1\43\1\0"+
    "\54\43\1\0\2\43\3\0\1\43\2\0\27\43\12\0"+
    "\27\43\11\0\37\43\101\0\23\43\1\0\2\43\12\0"+
    "\26\43\12\0\32\43\106\0\70\43\6\0\2\43\100\0"+
    "\4\43\1\0\2\43\5\0\10\43\1\0\3\43\1\0"+
    "\35\43\2\0\3\43\4\0\1\43\40\0\35\43\3\0"+
    "\35\43\43\0\10\43\1\0\36\43\31\0\66\43\12\0"+
    "\26\43\12\0\23\43\15\0\22\43\156\0\111\43\67\0"+
    "\63\43\15\0\63\43\15\0\50\43\10\0\12\43\306\0"+
    "\35\43\12\0\1\43\10\0\41\43\217\0\27\43\11\0"+
    "\107\43\37\0\12\43\17\0\74\43\25\0\31\43\7\0"+
    "\12\43\6\0\65\43\1\0\12\43\4\0\3\43\11\0"+
    "\44\43\2\0\1\43\11\0\105\43\4\0\4\43\3\0"+
    "\13\43\1\0\1\43\43\0\22\43\1\0\45\43\6\0"+
    "\1\43\101\0\7\43\1\0\1\43\1\0\4\43\1\0"+
    "\17\43\1\0\12\43\7\0\73\43\5\0\12\43\6\0"+
    "\4\43\1\0\10\43\2\0\2\43\2\0\26\43\1\0"+
    "\7\43\1\0\2\43\1\0\5\43\1\0\12\43\2\0"+
    "\2\43\2\0\3\43\2\0\1\43\6\0\1\43\5\0"+
    "\7\43\2\0\7\43\3\0\5\43\213\0\113\43\5\0"+
    "\12\43\4\0\2\43\40\0\106\43\1\0\1\43\10\0"+
    "\12\43\246\0\66\43\2\0\11\43\27\0\6\43\42\0"+
    "\101\43\3\0\1\43\13\0\12\43\46\0\71\43\7\0"+
    "\12\43\66\0\33\43\2\0\17\43\4\0\12\43\306\0"+
    "\73\43\145\0\112\43\25\0\1\43\240\0\10\43\2\0"+
    "\56\43\2\0\10\43\1\0\2\43\33\0\77\43\10\0"+
    "\1\43\10\0\112\43\3\0\1\43\42\0\71\43\7\0"+
    "\11\43\1\0\55\43\1\0\11\43\17\0\12\43\30\0"+
    "\36\43\2\0\26\43\1\0\16\43\111\0\7\43\1\0"+
    "\2\43\1\0\54\43\3\0\1\43\1\0\2\43\1\0"+
    "\11\43\10\0\12\43\6\0\6\43\1\0\2\43\1\0"+
    "\45\43\1\0\2\43\1\0\6\43\7\0\12\43\u0136\0"+
    "\27\43\11\0\232\43\146\0\157\43\21\0\304\43\274\0"+
    "\57\43\321\0\107\43\271\0\71\43\7\0\37\43\1\0"+
    "\12\43\146\0\36\43\2\0\5\43\13\0\67\43\11\0"+
    "\4\43\14\0\12\43\11\0\25\43\5\0\23\43\260\0"+
    "\100\43\200\0\113\43\4\0\71\43\7\0\21\43\100\0"+
    "\2\43\1\0\1\43\34\0\370\43\10\0\363\43\15\0"+
    "\37\43\61\0\3\43\21\0\4\43\10\0\u018c\43\4\0"+
    "\153\43\5\0\15\43\3\0\11\43\7\0\12\43\3\0"+
    "\2\43\306\0\5\43\3\0\6\43\10\0\10\43\2\0"+
    "\7\43\36\0\4\43\224\0\3\43\273\0\125\43\1\0"+
    "\107\43\1\0\2\43\2\0\1\43\2\0\2\43\2\0"+
    "\4\43\1\0\14\43\1\0\1\43\1\0\7\43\1\0"+
    "\101\43\1\0\4\43\2\0\10\43\1\0\7\43\1\0"+
    "\34\43\1\0\4\43\1\0\5\43\1\0\1\43\3\0"+
    "\7\43\1\0\u0154\43\2\0\31\43\1\0\31\43\1\0"+
    "\37\43\1\0\31\43\1\0\37\43\1\0\31\43\1\0"+
    "\37\43\1\0\31\43\1\0\37\43\1\0\31\43\1\0"+
    "\10\43\2\0\151\43\4\0\62\43\10\0\1\43\16\0"+
    "\1\43\26\0\5\43\1\0\17\43\120\0\7\43\1\0"+
    "\21\43\2\0\7\43\1\0\2\43\1\0\5\43\325\0"+
    "\55\43\3\0\16\43\2\0\12\43\4\0\1\43\u0171\0"+
    "\72\43\6\0\305\43\13\0\7\43\51\0\114\43\4\0"+
    "\12\43\246\0\4\43\1\0\33\43\1\0\2\43\1\0"+
    "\1\43\2\0\1\43\1\0\12\43\1\0\4\43\1\0"+
    "\1\43\1\0\1\43\6\0\1\43\4\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\3\43\1\0\2\43\1\0"+
    "\1\43\2\0\1\43\1\0\1\43\1\0\1\43\1\0"+
    "\1\43\1\0\1\43\1\0\2\43\1\0\1\43\2\0"+
    "\4\43\1\0\7\43\1\0\4\43\1\0\4\43\1\0"+
    "\1\43\1\0\12\43\1\0\21\43\5\0\3\43\1\0"+
    "\5\43\1\0\21\43\164\0\32\43\6\0\32\43\6\0"+
    "\32\43\166\0\327\43\51\0\65\43\13\0\336\43\2\0"+
    "\u0182\43\16\0\u0131\43\37\0\36\43\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\12\10\1\11\1\12\1\13\7\0\1\14\6\10"+
    "\1\15\6\10\1\14\1\10\1\16\7\0\17\10\10\0"+
    "\14\10\1\17\2\10\11\0\3\10\1\20\1\10\1\21"+
    "\1\10\1\22\2\10\1\23\3\10\11\0\5\10\1\24"+
    "\3\10\1\25\11\0\4\10\1\26\3\10\1\0\1\27"+
    "\4\0\1\30\3\0\2\10\1\31\1\32\1\33\2\10"+
    "\7\0\1\34\1\0\2\10\1\35\1\10\1\36\4\0"+
    "\1\37\2\0\1\40\2\10\2\0\1\41\3\0\1\42"+
    "\1\10\5\0\1\10\2\0\1\43\2\0\1\44\10\0"+
    "\1\45\4\0\1\46\2\0\1\47\1\0\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\62\0\144\0\226\0\310\0\62\0\62"+
    "\0\62\0\372\0\62\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4"+
    "\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee\0\62\0\62\0\62"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\310"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u015e\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u02bc\0\u06d6\0\62"+
    "\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866"+
    "\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6"+
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86"+
    "\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16"+
    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6"+
    "\0\u0ed8\0\u0f0a\0\u015e\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004"+
    "\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194"+
    "\0\u11c6\0\u015e\0\u11f8\0\u015e\0\u122a\0\u015e\0\u125c\0\u128e"+
    "\0\u015e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec"+
    "\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\u15ae\0\u15e0\0\u015e\0\u1612\0\u1644\0\u1676\0\u015e\0\u16a8"+
    "\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838"+
    "\0\u186a\0\u189c\0\u18ce\0\u1900\0\u015e\0\u1932\0\u1964\0\u1996"+
    "\0\u19c8\0\62\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90\0\62\0\u1ac2"+
    "\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u015e\0\u015e\0\u015e\0\u1bbc"+
    "\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c"+
    "\0\62\0\u1d7e\0\u1db0\0\u1de2\0\u015e\0\u1e14\0\62\0\u1e46"+
    "\0\u1e78\0\u1eaa\0\u1edc\0\62\0\u1f0e\0\u1f40\0\u015e\0\u1f72"+
    "\0\u1fa4\0\u1fd6\0\u2008\0\62\0\u203a\0\u206c\0\u209e\0\u015e"+
    "\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e"+
    "\0\u2260\0\62\0\u2292\0\u22c4\0\u015e\0\u22f6\0\u2328\0\u235a"+
    "\0\u238c\0\u23be\0\u23f0\0\u2422\0\u2454\0\62\0\u2486\0\u24b8"+
    "\0\u24ea\0\u251c\0\62\0\u254e\0\u2580\0\62\0\u25b2\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\1\13\1\14\1\15\1\16\2\15\1\17"+
    "\2\15\1\20\5\15\1\21\1\15\1\22\1\15\1\23"+
    "\5\15\1\24\2\15\1\25\7\15\1\26\1\27\1\30"+
    "\64\0\1\3\57\0\4\31\1\0\14\31\1\32\2\31"+
    "\1\33\4\31\1\34\1\31\1\35\2\31\1\36\1\37"+
    "\22\31\5\0\1\40\4\0\1\40\1\0\27\40\1\0"+
    "\13\40\15\0\1\12\1\0\43\15\15\0\1\15\1\0"+
    "\20\15\1\41\22\15\15\0\1\15\1\0\43\15\15\0"+
    "\1\15\1\0\1\42\6\15\1\43\3\15\1\44\2\15"+
    "\1\45\24\15\15\0\1\15\1\0\10\15\1\46\32\15"+
    "\15\0\1\15\1\0\3\15\1\47\11\15\1\50\25\15"+
    "\15\0\1\15\1\0\17\15\1\51\23\15\15\0\1\15"+
    "\1\0\1\52\3\15\1\53\36\15\15\0\1\15\1\0"+
    "\4\15\1\54\13\15\1\55\22\15\10\0\1\40\4\0"+
    "\1\56\1\0\27\56\1\15\13\56\15\0\1\15\1\0"+
    "\32\15\1\57\10\15\3\0\4\31\1\60\61\31\1\60"+
    "\13\31\1\61\45\31\1\60\12\31\1\62\11\31\1\63"+
    "\34\31\1\60\25\31\1\64\33\31\1\60\7\31\1\65"+
    "\51\31\1\60\17\31\1\66\41\31\1\60\30\31\1\67"+
    "\24\31\12\0\1\15\1\0\4\15\1\70\36\15\15\0"+
    "\1\15\1\0\14\15\1\71\26\15\15\0\1\15\1\0"+
    "\4\15\1\72\36\15\15\0\1\15\1\0\1\73\42\15"+
    "\15\0\1\15\1\0\13\15\1\74\1\75\26\15\15\0"+
    "\1\15\1\0\2\15\1\76\10\15\1\77\27\15\15\0"+
    "\1\15\1\0\3\15\1\100\37\15\15\0\1\15\1\0"+
    "\2\15\1\101\40\15\15\0\1\15\1\0\3\15\1\102"+
    "\37\15\15\0\1\15\1\0\21\15\1\103\21\15\15\0"+
    "\1\15\1\0\14\15\1\104\11\15\1\105\14\15\15\0"+
    "\1\15\1\0\10\15\1\106\32\15\14\0\1\107\1\15"+
    "\1\0\43\15\3\0\4\31\1\60\11\31\1\110\47\31"+
    "\1\60\37\31\1\111\21\31\1\60\30\31\1\112\30\31"+
    "\1\60\23\31\1\113\35\31\1\60\30\31\1\114\30\31"+
    "\1\60\13\31\1\115\45\31\1\60\32\31\1\116\22\31"+
    "\12\0\1\15\1\0\1\117\42\15\15\0\1\15\1\0"+
    "\17\15\1\120\23\15\15\0\1\15\1\0\2\15\1\121"+
    "\40\15\15\0\1\15\1\0\21\15\1\122\21\15\15\0"+
    "\1\15\1\0\23\15\1\123\17\15\15\0\1\15\1\0"+
    "\1\15\1\124\41\15\15\0\1\15\1\0\7\15\1\125"+
    "\33\15\15\0\1\15\1\0\1\126\42\15\15\0\1\15"+
    "\1\0\10\15\1\127\32\15\15\0\1\15\1\0\10\15"+
    "\1\130\32\15\15\0\1\15\1\0\10\15\1\131\32\15"+
    "\15\0\1\15\1\0\17\15\1\132\23\15\15\0\1\15"+
    "\1\0\1\133\42\15\15\0\1\15\1\0\22\15\1\134"+
    "\20\15\15\0\1\15\1\0\24\15\1\135\16\15\57\0"+
    "\1\136\1\137\4\0\4\31\1\60\16\31\1\140\42\31"+
    "\1\60\31\31\1\141\27\31\1\60\31\31\1\142\27\31"+
    "\1\60\10\31\1\143\50\31\1\60\30\31\1\144\30\31"+
    "\1\60\23\31\1\145\35\31\1\60\7\31\1\146\45\31"+
    "\12\0\1\15\1\0\30\15\1\147\12\15\15\0\1\15"+
    "\1\0\16\15\1\150\24\15\15\0\1\15\1\0\12\15"+
    "\1\151\30\15\15\0\1\15\1\0\4\15\1\152\36\15"+
    "\15\0\1\15\1\0\14\15\1\153\26\15\15\0\1\15"+
    "\1\0\16\15\1\154\24\15\15\0\1\15\1\0\4\15"+
    "\1\155\36\15\15\0\1\15\1\0\21\15\1\156\21\15"+
    "\15\0\1\15\1\0\2\15\1\157\40\15\15\0\1\15"+
    "\1\0\16\15\1\160\24\15\15\0\1\15\1\0\16\15"+
    "\1\161\24\15\15\0\1\15\1\0\23\15\1\162\17\15"+
    "\15\0\1\15\1\0\16\15\1\163\24\15\15\0\1\15"+
    "\1\0\10\15\1\164\32\15\55\0\1\165\62\0\1\166"+
    "\6\0\4\31\1\60\7\31\1\167\51\31\1\60\27\31"+
    "\1\170\31\31\1\60\17\31\1\171\41\31\1\60\27\31"+
    "\1\172\31\31\1\60\34\31\1\173\24\31\1\60\26\31"+
    "\1\174\32\31\1\60\27\31\1\175\25\31\12\0\1\15"+
    "\1\0\22\15\1\176\20\15\15\0\1\15\1\0\30\15"+
    "\1\177\12\15\15\0\1\15\1\0\1\15\1\200\41\15"+
    "\15\0\1\15\1\0\15\15\1\201\25\15\15\0\1\15"+
    "\1\0\20\15\1\202\22\15\15\0\1\15\1\0\4\15"+
    "\1\203\36\15\15\0\1\15\1\0\15\15\1\204\25\15"+
    "\15\0\1\15\1\0\4\15\1\205\36\15\15\0\1\15"+
    "\1\0\30\15\1\206\12\15\15\0\1\15\1\0\1\207"+
    "\42\15\54\0\1\210\60\0\1\211\11\0\4\31\1\60"+
    "\37\31\1\212\21\31\1\60\17\31\1\213\41\31\1\60"+
    "\31\31\1\214\27\31\1\60\13\31\1\215\45\31\1\60"+
    "\25\31\1\216\33\31\1\60\25\31\1\217\33\31\1\60"+
    "\17\31\1\220\35\31\12\0\1\15\1\0\4\15\1\221"+
    "\36\15\15\0\1\15\1\0\22\15\1\222\20\15\15\0"+
    "\1\15\1\0\16\15\1\223\24\15\15\0\1\15\1\0"+
    "\1\224\42\15\15\0\1\15\1\0\16\15\1\225\24\15"+
    "\15\0\1\15\1\0\4\15\1\226\36\15\15\0\1\15"+
    "\1\0\21\15\1\227\21\15\15\0\1\15\1\0\24\15"+
    "\1\230\16\15\61\0\1\231\55\0\1\232\7\0\4\31"+
    "\1\60\11\31\1\233\11\31\1\234\35\31\1\60\33\31"+
    "\1\235\25\31\1\60\32\31\1\236\26\31\1\237\61\31"+
    "\1\60\27\31\1\240\31\31\1\60\37\31\1\241\21\31"+
    "\1\60\25\31\1\242\27\31\12\0\1\15\1\0\26\15"+
    "\1\243\14\15\15\0\1\15\1\0\4\15\1\244\36\15"+
    "\15\0\1\15\1\0\26\15\1\245\14\15\15\0\1\15"+
    "\1\0\21\15\1\246\21\15\15\0\1\15\1\0\21\15"+
    "\1\247\21\15\15\0\1\15\1\0\22\15\1\250\20\15"+
    "\15\0\1\15\1\0\10\15\1\251\32\15\54\0\1\252"+
    "\10\0\4\31\1\60\27\31\1\253\31\31\1\60\25\31"+
    "\1\254\33\31\1\60\17\31\1\255\41\31\1\60\11\31"+
    "\1\256\47\31\1\60\12\31\1\257\46\31\1\60\26\31"+
    "\1\260\32\31\1\261\37\31\1\262\15\31\12\0\1\15"+
    "\1\0\22\15\1\263\20\15\15\0\1\15\1\0\26\15"+
    "\1\264\14\15\15\0\1\15\1\0\1\265\42\15\15\0"+
    "\1\15\1\0\21\15\1\266\21\15\50\0\1\267\14\0"+
    "\4\31\1\60\13\31\1\270\45\31\1\60\12\31\1\271"+
    "\46\31\1\60\7\31\1\272\51\31\1\60\17\31\1\273"+
    "\41\31\1\274\61\31\1\60\27\31\1\275\31\31\1\60"+
    "\11\31\1\276\43\31\12\0\1\15\1\0\16\15\1\277"+
    "\24\15\15\0\1\15\1\0\22\15\1\300\20\15\15\0"+
    "\1\15\1\0\10\15\1\301\32\15\3\0\4\31\1\60"+
    "\7\31\1\302\51\31\1\60\17\31\1\303\41\31\1\304"+
    "\61\31\1\60\25\31\1\305\33\31\1\60\13\31\1\306"+
    "\45\31\1\60\27\31\1\307\25\31\12\0\1\15\1\0"+
    "\16\15\1\310\24\15\15\0\1\15\1\0\1\15\1\311"+
    "\41\15\3\0\4\31\1\60\11\31\1\312\47\31\1\60"+
    "\14\31\1\313\44\31\1\60\24\31\1\314\34\31\1\60"+
    "\15\31\1\315\43\31\1\60\13\31\1\316\41\31\12\0"+
    "\1\15\1\0\13\15\1\317\27\15\3\0\4\31\1\60"+
    "\17\31\1\320\41\31\1\60\17\31\1\321\41\31\1\322"+
    "\61\31\1\60\32\31\1\323\26\31\1\60\7\31\1\324"+
    "\45\31\12\0\1\15\1\0\4\15\1\325\36\15\3\0"+
    "\4\31\1\60\25\31\1\326\33\31\1\60\11\31\1\327"+
    "\47\31\1\60\24\31\1\330\34\31\1\60\11\31\1\331"+
    "\47\31\1\60\24\31\1\332\34\31\1\60\7\31\1\333"+
    "\51\31\1\60\31\31\1\334\27\31\1\60\17\31\1\335"+
    "\41\31\1\336\61\31\1\60\11\31\1\337\47\31\1\60"+
    "\7\31\1\340\51\31\1\60\25\31\1\341\33\31\1\60"+
    "\17\31\1\342\41\31\1\343\61\31\1\60\24\31\1\344"+
    "\34\31\1\60\25\31\1\345\33\31\1\346\61\31\1\60"+
    "\24\31\1\347\34\31\1\350\55\31";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9700];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\3\11\1\1\1\11\12\1\3\11"+
    "\7\0\20\1\1\11\7\0\17\1\10\0\17\1\11\0"+
    "\16\1\11\0\12\1\11\0\10\1\1\0\1\11\4\0"+
    "\1\11\3\0\7\1\7\0\1\11\1\0\4\1\1\11"+
    "\4\0\1\11\2\0\3\1\2\0\1\11\3\0\2\1"+
    "\5\0\1\1\2\0\1\11\2\0\1\1\10\0\1\11"+
    "\4\0\1\11\2\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type){
        return new Symbol(type, yyline+1,yycolumn+1);
    }
    private Symbol symbol(int type, Object value){
        //System.out.println(type + " line: " + (yyline+1) + " col: "+(yycolumn+1) + " " + value);
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }
    private void error(){
        ErrorsLP.addError(yytext(), yyline+1, yycolumn+1, "Error Léxico","Cadena no definida");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DBLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error();
            }
          // fall through
          case 41: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 42: break;
          case 3:
            { return symbol(LPAREN, yytext());
            }
          // fall through
          case 43: break;
          case 4:
            { return symbol(RPAREN, yytext());
            }
          // fall through
          case 44: break;
          case 5:
            { return symbol(COMMA, yytext());
            }
          // fall through
          case 45: break;
          case 6:
            { return symbol(DIGIT, Integer.parseInt(yytext()));
            }
          // fall through
          case 46: break;
          case 7:
            { return symbol(COLON, yytext());
            }
          // fall through
          case 47: break;
          case 8:
            { ErrorsLP.addError(yytext(), yyline+1, yycolumn+1, "Error Léxico","Cadena no definida");
            }
          // fall through
          case 48: break;
          case 9:
            { return symbol(LBRACE, yytext());
            }
          // fall through
          case 49: break;
          case 10:
            { return symbol(VERTICAL_BAR, yytext());
            }
          // fall through
          case 50: break;
          case 11:
            { return symbol(RBRACE, yytext());
            }
          // fall through
          case 51: break;
          case 12:
            { return symbol(IDENTIFIER, yytext());
            }
          // fall through
          case 52: break;
          case 13:
            { return symbol(ID, yytext());
            }
          // fall through
          case 53: break;
          case 14:
            { return symbol(STRING, yytext());
            }
          // fall through
          case 54: break;
          case 15:
            { return symbol(TEMA, yytext());
            }
          // fall through
          case 55: break;
          case 16:
            { return symbol(CLASE, yytext());
            }
          // fall through
          case 56: break;
          case 17:
            { return symbol(COMBO, yytext());
            }
          // fall through
          case 57: break;
          case 18:
            { return symbol(FILAS, yytext());
            }
          // fall through
          case 58: break;
          case 19:
            { return symbol(RADIO, yytext());
            }
          // fall through
          case 59: break;
          case 20:
            { return symbol(INDICE, yytext());
            }
          // fall through
          case 60: break;
          case 21:
            { return symbol(TRIVIA, yytext());
            }
          // fall through
          case 61: break;
          case 22:
            { return symbol(FICHERO, yytext());
            }
          // fall through
          case 62: break;
          case 23:
            { return symbol(DB_USER, yytext());
            }
          // fall through
          case 63: break;
          case 24:
            { return symbol(NOMBRE, yytext());
            }
          // fall through
          case 64: break;
          case 25:
            { return symbol(CHECKBOX, yytext());
            }
          // fall through
          case 65: break;
          case 26:
            { return symbol(COLUMNAS, yytext());
            }
          // fall through
          case 66: break;
          case 27:
            { return symbol(OPCIONES, yytext());
            }
          // fall through
          case 67: break;
          case 28:
            { return symbol(USUARIO, yytext());
            }
          // fall through
          case 68: break;
          case 29:
            { return symbol(RESPUESTA, yytext());
            }
          // fall through
          case 69: break;
          case 30:
            { return symbol(DB_TRIVIA, yytext());
            }
          // fall through
          case 70: break;
          case 31:
            { return symbol(PASSWORD, yytext());
            }
          // fall through
          case 71: break;
          case 32:
            { return symbol(AREA_TEXTO, yytext());
            }
          // fall through
          case 72: break;
          case 33:
            { return symbol(ID_TRIVIA, yytext());
            }
          // fall through
          case 73: break;
          case 34:
            { return symbol(CAMPO_TEXTO, yytext());
            }
          // fall through
          case 74: break;
          case 35:
            { return symbol(INSTITUCION, yytext());
            }
          // fall through
          case 75: break;
          case 36:
            { return symbol(TEXTO_VISIBLE, yytext());
            }
          // fall through
          case 76: break;
          case 37:
            { return symbol(FECHA_CREACION, yytext());
            }
          // fall through
          case 77: break;
          case 38:
            { return symbol(TIEMPO_PREGUNTA, yytext());
            }
          // fall through
          case 78: break;
          case 39:
            { return symbol(USUARIO_CREACION, yytext());
            }
          // fall through
          case 79: break;
          case 40:
            { return symbol(FECHA_MODIFICACION, yytext());
            }
          // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
