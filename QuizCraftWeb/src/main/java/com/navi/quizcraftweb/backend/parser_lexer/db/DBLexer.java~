// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: DBLexer.flex

package com.navi.quizcraftweb.backend.parser_lexer.db   ;
import java_cup.runtime.*;
import static com.navi.quizcraftweb.backend.parser_lexer.db.sym.*;
import com.navi.quizcraftweb.backend.parser_lexer.*;

@SuppressWarnings("fallthrough")
public class DBLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\0\1\4\5\0\1\5\1\6\2\0\1\7\1\0"+
    "\1\10\1\0\12\11\1\12\6\0\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\24\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\24\3\0\1\24"+
    "\1\42\1\0\1\43\1\44\1\24\1\45\1\46\3\24"+
    "\1\47\10\24\1\50\1\51\1\52\1\53\1\54\4\24"+
    "\1\55\1\0\1\56\43\0\1\24\10\0\1\24\1\0"+
    "\1\24\3\0\1\24\4\0\1\24\4\0\1\24\4\0"+
    "\30\24\1\0\37\24\1\0\u01ca\24\4\0\14\24\16\0"+
    "\5\24\7\0\1\24\1\0\1\24\21\0\165\24\1\0"+
    "\2\24\2\0\4\24\1\0\1\24\6\0\1\24\1\0"+
    "\3\24\1\0\1\24\1\0\24\24\1\0\123\24\1\0"+
    "\213\24\1\0\255\24\1\0\46\24\2\0\1\24\6\0"+
    "\51\24\10\0\55\24\1\0\1\24\1\0\2\24\1\0"+
    "\2\24\1\0\1\24\10\0\33\24\4\0\4\24\35\0"+
    "\13\24\5\0\112\24\4\0\146\24\1\0\10\24\2\0"+
    "\12\24\1\0\23\24\2\0\1\24\20\0\73\24\2\0"+
    "\145\24\16\0\66\24\4\0\1\24\2\0\1\24\2\0"+
    "\56\24\22\0\34\24\4\0\13\24\65\0\25\24\1\0"+
    "\10\24\25\0\17\24\1\0\201\24\2\0\12\24\1\0"+
    "\23\24\1\0\10\24\2\0\2\24\2\0\26\24\1\0"+
    "\7\24\1\0\1\24\3\0\4\24\2\0\11\24\2\0"+
    "\2\24\2\0\4\24\10\0\1\24\4\0\2\24\1\0"+
    "\5\24\2\0\14\24\12\0\1\24\1\0\1\24\2\0"+
    "\3\24\1\0\6\24\4\0\2\24\2\0\26\24\1\0"+
    "\7\24\1\0\2\24\1\0\2\24\1\0\2\24\2\0"+
    "\1\24\1\0\5\24\4\0\2\24\2\0\3\24\3\0"+
    "\1\24\7\0\4\24\1\0\1\24\7\0\20\24\13\0"+
    "\3\24\1\0\11\24\1\0\3\24\1\0\26\24\1\0"+
    "\7\24\1\0\2\24\1\0\5\24\2\0\12\24\1\0"+
    "\3\24\1\0\3\24\2\0\1\24\17\0\4\24\2\0"+
    "\12\24\11\0\7\24\1\0\3\24\1\0\10\24\2\0"+
    "\2\24\2\0\26\24\1\0\7\24\1\0\2\24\1\0"+
    "\5\24\2\0\11\24\2\0\2\24\2\0\3\24\10\0"+
    "\2\24\4\0\2\24\1\0\5\24\2\0\12\24\1\0"+
    "\1\24\20\0\2\24\1\0\6\24\3\0\3\24\1\0"+
    "\4\24\3\0\2\24\1\0\1\24\1\0\2\24\3\0"+
    "\2\24\3\0\3\24\3\0\14\24\4\0\5\24\3\0"+
    "\3\24\1\0\4\24\2\0\1\24\6\0\1\24\16\0"+
    "\12\24\20\0\15\24\1\0\3\24\1\0\27\24\1\0"+
    "\20\24\3\0\10\24\1\0\3\24\1\0\4\24\7\0"+
    "\2\24\1\0\3\24\5\0\4\24\2\0\12\24\20\0"+
    "\4\24\1\0\10\24\1\0\3\24\1\0\27\24\1\0"+
    "\12\24\1\0\5\24\2\0\11\24\1\0\3\24\1\0"+
    "\4\24\7\0\2\24\7\0\1\24\1\0\4\24\2\0"+
    "\12\24\1\0\2\24\15\0\4\24\1\0\10\24\1\0"+
    "\3\24\1\0\63\24\1\0\3\24\1\0\5\24\5\0"+
    "\4\24\7\0\5\24\2\0\12\24\12\0\6\24\2\0"+
    "\2\24\1\0\22\24\3\0\30\24\1\0\11\24\1\0"+
    "\1\24\2\0\7\24\3\0\1\24\4\0\6\24\1\0"+
    "\1\24\1\0\10\24\6\0\12\24\2\0\2\24\15\0"+
    "\72\24\5\0\17\24\1\0\12\24\47\0\2\24\1\0"+
    "\1\24\1\0\5\24\1\0\30\24\1\0\1\24\1\0"+
    "\27\24\2\0\5\24\1\0\1\24\1\0\6\24\2\0"+
    "\12\24\2\0\4\24\40\0\1\24\27\0\2\24\6\0"+
    "\12\24\13\0\1\24\1\0\1\24\1\0\1\24\4\0"+
    "\12\24\1\0\44\24\4\0\24\24\1\0\22\24\1\0"+
    "\44\24\11\0\1\24\71\0\112\24\6\0\116\24\2\0"+
    "\46\24\1\0\1\24\5\0\1\24\2\0\53\24\1\0"+
    "\115\24\1\0\4\24\2\0\7\24\1\0\1\24\1\0"+
    "\4\24\2\0\51\24\1\0\4\24\2\0\41\24\1\0"+
    "\4\24\2\0\7\24\1\0\1\24\1\0\4\24\2\0"+
    "\17\24\1\0\71\24\1\0\4\24\2\0\103\24\2\0"+
    "\3\24\40\0\20\24\20\0\126\24\2\0\6\24\3\0"+
    "\u016c\24\2\0\21\24\1\0\32\24\5\0\113\24\3\0"+
    "\13\24\7\0\15\24\1\0\7\24\13\0\25\24\13\0"+
    "\24\24\14\0\15\24\1\0\3\24\1\0\2\24\14\0"+
    "\124\24\3\0\1\24\4\0\2\24\2\0\12\24\41\0"+
    "\3\24\2\0\12\24\6\0\131\24\7\0\53\24\5\0"+
    "\106\24\12\0\37\24\1\0\14\24\4\0\14\24\12\0"+
    "\50\24\2\0\5\24\13\0\54\24\4\0\32\24\6\0"+
    "\12\24\46\0\34\24\4\0\77\24\1\0\35\24\2\0"+
    "\13\24\6\0\12\24\15\0\1\24\10\0\17\24\101\0"+
    "\114\24\4\0\12\24\21\0\11\24\14\0\164\24\14\0"+
    "\70\24\10\0\12\24\3\0\61\24\2\0\11\24\7\0"+
    "\53\24\2\0\3\24\20\0\3\24\1\0\47\24\5\0"+
    "\372\24\1\0\33\24\2\0\6\24\2\0\46\24\2\0"+
    "\6\24\2\0\10\24\1\0\1\24\1\0\1\24\1\0"+
    "\1\24\1\0\37\24\2\0\65\24\1\0\7\24\1\0"+
    "\1\24\3\0\3\24\1\0\7\24\3\0\4\24\2\0"+
    "\6\24\4\0\15\24\5\0\3\24\1\0\7\24\102\0"+
    "\2\24\23\0\1\24\34\0\1\24\15\0\1\24\20\0"+
    "\15\24\63\0\41\24\21\0\1\24\4\0\1\24\2\0"+
    "\12\24\1\0\1\24\3\0\5\24\6\0\1\24\1\0"+
    "\1\24\1\0\1\24\1\0\4\24\1\0\13\24\2\0"+
    "\4\24\5\0\5\24\4\0\1\24\21\0\51\24\u022d\0"+
    "\64\24\26\0\57\24\1\0\57\24\1\0\205\24\6\0"+
    "\11\24\14\0\46\24\1\0\1\24\5\0\1\24\2\0"+
    "\70\24\7\0\1\24\17\0\30\24\11\0\7\24\1\0"+
    "\7\24\1\0\7\24\1\0\7\24\1\0\7\24\1\0"+
    "\7\24\1\0\7\24\1\0\7\24\1\0\40\24\57\0"+
    "\1\24\325\0\3\24\31\0\17\24\1\0\5\24\2\0"+
    "\5\24\4\0\126\24\2\0\2\24\2\0\3\24\1\0"+
    "\132\24\1\0\4\24\5\0\53\24\1\0\136\24\21\0"+
    "\33\24\65\0\306\24\112\0\360\24\20\0\215\24\103\0"+
    "\56\24\2\0\15\24\3\0\34\24\24\0\63\24\1\0"+
    "\12\24\1\0\163\24\45\0\11\24\2\0\147\24\2\0"+
    "\65\24\2\0\5\24\60\0\61\24\30\0\64\24\14\0"+
    "\106\24\12\0\12\24\6\0\30\24\3\0\1\24\1\0"+
    "\61\24\2\0\44\24\14\0\35\24\3\0\101\24\16\0"+
    "\13\24\6\0\37\24\1\0\67\24\11\0\16\24\2\0"+
    "\12\24\6\0\27\24\3\0\111\24\30\0\3\24\2\0"+
    "\20\24\2\0\5\24\12\0\6\24\2\0\6\24\2\0"+
    "\6\24\11\0\7\24\1\0\7\24\1\0\53\24\1\0"+
    "\14\24\10\0\173\24\1\0\2\24\2\0\12\24\6\0"+
    "\244\24\14\0\27\24\4\0\61\24\4\0\156\24\2\0"+
    "\152\24\46\0\7\24\14\0\5\24\5\0\14\24\1\0"+
    "\15\24\1\0\5\24\1\0\1\24\1\0\2\24\1\0"+
    "\2\24\1\0\154\24\41\0\153\24\22\0\100\24\2\0"+
    "\66\24\50\0\14\24\4\0\20\24\20\0\20\24\3\0"+
    "\2\24\30\0\3\24\40\0\5\24\1\0\207\24\23\0"+
    "\12\24\7\0\32\24\4\0\1\24\1\0\32\24\13\0"+
    "\131\24\3\0\6\24\2\0\6\24\2\0\6\24\2\0"+
    "\3\24\43\0\14\24\1\0\32\24\1\0\23\24\1\0"+
    "\2\24\1\0\17\24\2\0\16\24\42\0\173\24\105\0"+
    "\65\24\210\0\1\24\202\0\35\24\3\0\61\24\17\0"+
    "\1\24\37\0\40\24\15\0\36\24\5\0\53\24\5\0"+
    "\36\24\2\0\44\24\4\0\10\24\1\0\5\24\52\0"+
    "\236\24\2\0\12\24\6\0\44\24\4\0\44\24\4\0"+
    "\50\24\10\0\64\24\234\0\67\24\11\0\26\24\12\0"+
    "\10\24\230\0\6\24\2\0\1\24\1\0\54\24\1\0"+
    "\2\24\3\0\1\24\2\0\27\24\12\0\27\24\11\0"+
    "\37\24\101\0\23\24\1\0\2\24\12\0\26\24\12\0"+
    "\32\24\106\0\70\24\6\0\2\24\100\0\4\24\1\0"+
    "\2\24\5\0\10\24\1\0\3\24\1\0\35\24\2\0"+
    "\3\24\4\0\1\24\40\0\35\24\3\0\35\24\43\0"+
    "\10\24\1\0\36\24\31\0\66\24\12\0\26\24\12\0"+
    "\23\24\15\0\22\24\156\0\111\24\67\0\63\24\15\0"+
    "\63\24\15\0\50\24\10\0\12\24\306\0\35\24\12\0"+
    "\1\24\10\0\41\24\217\0\27\24\11\0\107\24\37\0"+
    "\12\24\17\0\74\24\25\0\31\24\7\0\12\24\6\0"+
    "\65\24\1\0\12\24\4\0\3\24\11\0\44\24\2\0"+
    "\1\24\11\0\105\24\4\0\4\24\3\0\13\24\1\0"+
    "\1\24\43\0\22\24\1\0\45\24\6\0\1\24\101\0"+
    "\7\24\1\0\1\24\1\0\4\24\1\0\17\24\1\0"+
    "\12\24\7\0\73\24\5\0\12\24\6\0\4\24\1\0"+
    "\10\24\2\0\2\24\2\0\26\24\1\0\7\24\1\0"+
    "\2\24\1\0\5\24\1\0\12\24\2\0\2\24\2\0"+
    "\3\24\2\0\1\24\6\0\1\24\5\0\7\24\2\0"+
    "\7\24\3\0\5\24\213\0\113\24\5\0\12\24\4\0"+
    "\2\24\40\0\106\24\1\0\1\24\10\0\12\24\246\0"+
    "\66\24\2\0\11\24\27\0\6\24\42\0\101\24\3\0"+
    "\1\24\13\0\12\24\46\0\71\24\7\0\12\24\66\0"+
    "\33\24\2\0\17\24\4\0\12\24\306\0\73\24\145\0"+
    "\112\24\25\0\1\24\240\0\10\24\2\0\56\24\2\0"+
    "\10\24\1\0\2\24\33\0\77\24\10\0\1\24\10\0"+
    "\112\24\3\0\1\24\42\0\71\24\7\0\11\24\1\0"+
    "\55\24\1\0\11\24\17\0\12\24\30\0\36\24\2\0"+
    "\26\24\1\0\16\24\111\0\7\24\1\0\2\24\1\0"+
    "\54\24\3\0\1\24\1\0\2\24\1\0\11\24\10\0"+
    "\12\24\6\0\6\24\1\0\2\24\1\0\45\24\1\0"+
    "\2\24\1\0\6\24\7\0\12\24\u0136\0\27\24\11\0"+
    "\232\24\146\0\157\24\21\0\304\24\274\0\57\24\321\0"+
    "\107\24\271\0\71\24\7\0\37\24\1\0\12\24\146\0"+
    "\36\24\2\0\5\24\13\0\67\24\11\0\4\24\14\0"+
    "\12\24\11\0\25\24\5\0\23\24\260\0\100\24\200\0"+
    "\113\24\4\0\71\24\7\0\21\24\100\0\2\24\1\0"+
    "\1\24\34\0\370\24\10\0\363\24\15\0\37\24\61\0"+
    "\3\24\21\0\4\24\10\0\u018c\24\4\0\153\24\5\0"+
    "\15\24\3\0\11\24\7\0\12\24\3\0\2\24\306\0"+
    "\5\24\3\0\6\24\10\0\10\24\2\0\7\24\36\0"+
    "\4\24\224\0\3\24\273\0\125\24\1\0\107\24\1\0"+
    "\2\24\2\0\1\24\2\0\2\24\2\0\4\24\1\0"+
    "\14\24\1\0\1\24\1\0\7\24\1\0\101\24\1\0"+
    "\4\24\2\0\10\24\1\0\7\24\1\0\34\24\1\0"+
    "\4\24\1\0\5\24\1\0\1\24\3\0\7\24\1\0"+
    "\u0154\24\2\0\31\24\1\0\31\24\1\0\37\24\1\0"+
    "\31\24\1\0\37\24\1\0\31\24\1\0\37\24\1\0"+
    "\31\24\1\0\37\24\1\0\31\24\1\0\10\24\2\0"+
    "\151\24\4\0\62\24\10\0\1\24\16\0\1\24\26\0"+
    "\5\24\1\0\17\24\120\0\7\24\1\0\21\24\2\0"+
    "\7\24\1\0\2\24\1\0\5\24\325\0\55\24\3\0"+
    "\16\24\2\0\12\24\4\0\1\24\u0171\0\72\24\6\0"+
    "\305\24\13\0\7\24\51\0\114\24\4\0\12\24\246\0"+
    "\4\24\1\0\33\24\1\0\2\24\1\0\1\24\2\0"+
    "\1\24\1\0\12\24\1\0\4\24\1\0\1\24\1\0"+
    "\1\24\6\0\1\24\4\0\1\24\1\0\1\24\1\0"+
    "\1\24\1\0\3\24\1\0\2\24\1\0\1\24\2\0"+
    "\1\24\1\0\1\24\1\0\1\24\1\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\1\24\2\0\4\24\1\0"+
    "\7\24\1\0\4\24\1\0\4\24\1\0\1\24\1\0"+
    "\12\24\1\0\21\24\5\0\3\24\1\0\5\24\1\0"+
    "\21\24\164\0\32\24\6\0\32\24\6\0\32\24\166\0"+
    "\327\24\51\0\65\24\13\0\336\24\2\0\u0182\24\16\0"+
    "\u0131\24\37\0\36\24\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\2\10\1\11\1\12\15\0\1\10\1\13\40\0"+
    "\1\14\74\0\1\15\5\0\1\16\11\0\1\17\6\0"+
    "\1\20\7\0\1\21\6\0\1\22\5\0\1\23\5\0"+
    "\1\24\1\0\1\25\2\0\1\26\3\0\1\27\12\0"+
    "\1\30\10\0\1\31\1\0\1\32\2\0\1\33\1\34"+
    "\6\0\1\35\1\36\13\0\1\37\1\0\1\40\4\0"+
    "\1\41\2\0\1\42\7\0\1\43\3\0\1\44\11\0"+
    "\1\45\4\0\1\46\3\0\1\47\5\0\1\50\3\0"+
    "\1\51\1\52\1\0\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\215\0\57\0\57\0\57"+
    "\0\274\0\57\0\353\0\u011a\0\57\0\57\0\u0149\0\u0178"+
    "\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0"+
    "\0\u031f\0\u034e\0\u037d\0\u03ac\0\57\0\u03db\0\u040a\0\u0439"+
    "\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1"+
    "\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729"+
    "\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1"+
    "\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\57\0\u09bb\0\u09ea"+
    "\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62"+
    "\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda"+
    "\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52"+
    "\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca"+
    "\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142"+
    "\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba"+
    "\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432"+
    "\0\u1461\0\u1490\0\57\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b"+
    "\0\57\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4"+
    "\0\u16f3\0\u1722\0\57\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d"+
    "\0\u183c\0\57\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u1956"+
    "\0\u1985\0\57\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f"+
    "\0\57\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\57\0\u1bb9"+
    "\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\57\0\u1ca4\0\57\0\u1cd3"+
    "\0\u1d02\0\57\0\u1d31\0\u1d60\0\u1d8f\0\57\0\u1dbe\0\u1ded"+
    "\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65"+
    "\0\57\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050\0\u207f\0\u20ae"+
    "\0\u20dd\0\57\0\u210c\0\57\0\u213b\0\u216a\0\57\0\57"+
    "\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284\0\57\0\57"+
    "\0\u22b3\0\u22e2\0\u2311\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc"+
    "\0\u242b\0\u245a\0\u2489\0\57\0\u24b8\0\57\0\u24e7\0\u2516"+
    "\0\u2545\0\u2574\0\57\0\u25a3\0\u25d2\0\57\0\u2601\0\u2630"+
    "\0\u265f\0\u268e\0\u26bd\0\u26ec\0\u271b\0\57\0\u274a\0\u2779"+
    "\0\u27a8\0\57\0\u27d7\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2"+
    "\0\u28f1\0\u2920\0\u294f\0\57\0\u297e\0\u29ad\0\u29dc\0\u2a0b"+
    "\0\57\0\u2a3a\0\u2a69\0\u2a98\0\57\0\u2ac7\0\u2af6\0\u2b25"+
    "\0\u2b54\0\u2b83\0\57\0\u2bb2\0\u2be1\0\u2c10\0\57\0\57"+
    "\0\u2c3f\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\32\13\1\14\7\13\1\15\1\16\61\0"+
    "\1\3\54\0\4\17\1\0\6\17\1\20\1\17\1\21"+
    "\1\22\1\23\1\24\2\17\1\25\4\17\1\26\1\27"+
    "\1\30\1\31\1\17\1\32\1\33\20\17\11\0\1\11"+
    "\1\0\42\13\13\0\1\13\1\0\42\13\13\0\1\13"+
    "\1\0\31\13\1\34\10\13\2\0\4\17\1\35\56\17"+
    "\1\35\26\17\1\36\27\17\1\35\6\17\1\37\6\17"+
    "\1\40\3\17\1\41\2\17\1\42\31\17\1\35\6\17"+
    "\1\43\47\17\1\35\27\17\1\44\26\17\1\35\12\17"+
    "\1\45\3\17\1\46\37\17\1\35\11\17\1\47\11\17"+
    "\1\50\32\17\1\35\24\17\1\51\31\17\1\35\25\17"+
    "\1\52\30\17\1\35\6\17\1\53\22\17\1\54\24\17"+
    "\1\35\6\17\1\55\3\17\1\56\43\17\1\35\12\17"+
    "\1\57\3\17\1\60\7\17\1\61\27\17\1\35\27\17"+
    "\1\62\22\17\10\0\1\63\1\13\1\0\42\13\2\0"+
    "\4\17\1\35\12\17\1\64\43\17\1\35\22\17\1\65"+
    "\33\17\1\35\12\17\1\66\43\17\1\35\6\17\1\67"+
    "\47\17\1\35\21\17\1\70\34\17\1\35\30\17\1\71"+
    "\25\17\1\35\30\17\1\72\25\17\1\35\10\17\1\73"+
    "\45\17\1\35\10\17\1\74\10\17\1\75\34\17\1\76"+
    "\35\17\1\77\20\17\1\35\11\17\1\100\15\17\1\101"+
    "\26\17\1\35\22\17\1\102\1\103\32\17\1\35\10\17"+
    "\1\104\45\17\1\35\27\17\1\105\26\17\1\35\23\17"+
    "\1\106\32\17\1\35\11\17\1\107\44\17\1\35\27\17"+
    "\1\110\26\17\1\35\22\17\1\111\11\17\1\112\21\17"+
    "\1\35\12\17\1\113\43\17\1\35\16\17\1\114\37\17"+
    "\1\35\31\17\1\115\20\17\52\0\1\116\1\117\3\0"+
    "\4\17\1\35\6\17\1\120\47\17\1\35\25\17\1\121"+
    "\30\17\1\35\10\17\1\122\45\17\1\35\27\17\1\123"+
    "\26\17\1\35\31\17\1\124\24\17\1\35\24\17\1\125"+
    "\31\17\1\35\6\17\1\126\17\17\1\127\27\17\1\35"+
    "\15\17\1\130\40\17\1\35\15\17\1\131\40\17\1\35"+
    "\6\17\1\132\47\17\1\35\30\17\1\133\25\17\1\35"+
    "\16\17\1\134\37\17\1\35\30\17\1\135\25\17\1\35"+
    "\7\17\1\136\46\17\1\35\12\17\1\137\43\17\1\35"+
    "\16\17\1\140\37\17\1\35\27\17\1\141\26\17\1\35"+
    "\30\17\1\142\25\17\1\35\16\17\1\143\37\17\1\35"+
    "\25\17\1\144\30\17\1\35\6\17\1\145\47\17\1\35"+
    "\30\17\1\146\25\17\1\35\22\17\1\147\33\17\1\35"+
    "\32\17\1\150\23\17\1\35\6\17\1\151\43\17\50\0"+
    "\1\152\57\0\1\153\5\0\4\17\1\35\35\17\1\154"+
    "\20\17\1\35\24\17\1\155\31\17\1\35\20\17\1\156"+
    "\35\17\1\35\12\17\1\157\43\17\1\35\22\17\1\160"+
    "\33\17\1\35\27\17\1\161\26\17\1\35\11\17\1\162"+
    "\44\17\1\35\31\17\1\163\24\17\1\35\6\17\1\164"+
    "\47\17\1\35\12\17\1\165\43\17\1\35\27\17\1\166"+
    "\26\17\1\35\26\17\1\167\27\17\1\35\10\17\1\170"+
    "\45\17\1\35\16\17\1\171\37\17\1\35\26\17\1\172"+
    "\27\17\1\173\56\17\1\35\24\17\1\174\31\17\1\35"+
    "\33\17\1\175\22\17\1\35\12\17\1\176\43\17\1\35"+
    "\24\17\1\177\31\17\1\35\31\17\1\200\24\17\1\201"+
    "\56\17\1\35\24\17\1\202\31\17\1\35\25\17\1\203"+
    "\30\17\1\35\16\17\1\204\37\17\1\35\26\17\1\205"+
    "\23\17\47\0\1\206\55\0\1\207\10\0\4\17\1\35"+
    "\30\17\1\210\25\17\1\35\35\17\1\211\20\17\1\35"+
    "\7\17\1\212\46\17\1\213\56\17\1\35\23\17\1\214"+
    "\32\17\1\35\35\17\1\215\20\17\1\35\24\17\1\216"+
    "\31\17\1\35\10\17\1\217\45\17\1\35\35\17\1\220"+
    "\20\17\1\35\26\17\1\221\27\17\1\222\56\17\1\35"+
    "\16\17\1\223\37\17\1\35\12\17\1\224\43\17\1\35"+
    "\30\17\1\225\25\17\1\35\12\17\1\226\43\17\1\35"+
    "\23\17\1\227\32\17\1\35\24\17\1\230\31\17\1\35"+
    "\24\17\1\231\31\17\1\232\56\17\1\35\12\17\1\233"+
    "\43\17\1\35\35\17\1\234\20\17\1\35\24\17\1\235"+
    "\31\17\1\35\6\17\1\236\47\17\1\35\16\17\1\237"+
    "\33\17\54\0\1\240\52\0\1\241\6\0\4\17\1\35"+
    "\12\17\1\242\43\17\1\35\30\17\1\243\25\17\1\35"+
    "\24\17\1\244\31\17\1\35\6\17\1\245\47\17\1\35"+
    "\26\17\1\246\27\17\1\247\56\17\1\35\30\17\1\250"+
    "\25\17\1\35\10\17\1\251\11\17\1\252\33\17\1\35"+
    "\24\17\1\253\31\17\1\35\32\17\1\254\23\17\1\255"+
    "\56\17\1\35\31\17\1\256\24\17\1\257\56\17\1\35"+
    "\12\17\1\260\43\17\1\35\26\17\1\261\27\17\1\262"+
    "\56\17\1\35\27\17\1\263\26\17\1\35\32\17\1\264"+
    "\23\17\1\35\35\17\1\265\20\17\1\266\56\17\1\35"+
    "\24\17\1\267\25\17\47\0\1\270\7\0\4\17\1\35"+
    "\34\17\1\271\21\17\1\35\12\17\1\272\43\17\1\35"+
    "\34\17\1\273\21\17\1\35\27\17\1\274\26\17\1\35"+
    "\12\17\1\275\43\17\1\35\31\17\1\276\24\17\1\35"+
    "\26\17\1\277\27\17\1\35\24\17\1\300\31\17\1\301"+
    "\56\17\1\35\16\17\1\302\37\17\1\35\10\17\1\303"+
    "\45\17\1\35\27\17\1\304\26\17\1\35\11\17\1\305"+
    "\44\17\1\35\30\17\1\306\25\17\1\35\16\17\1\307"+
    "\37\17\1\35\25\17\1\310\2\17\1\311\25\17\1\312"+
    "\35\17\1\313\14\17\43\0\1\314\13\0\4\17\1\35"+
    "\30\17\1\315\25\17\1\35\34\17\1\316\21\17\1\317"+
    "\56\17\1\320\56\17\1\35\10\17\1\321\45\17\1\35"+
    "\26\17\1\322\27\17\1\35\12\17\1\323\43\17\1\35"+
    "\11\17\1\324\44\17\1\35\6\17\1\325\47\17\1\35"+
    "\16\17\1\326\37\17\1\327\56\17\1\330\56\17\1\35"+
    "\6\17\1\331\47\17\1\35\27\17\1\332\26\17\1\35"+
    "\26\17\1\333\27\17\1\35\24\17\1\334\31\17\1\35"+
    "\10\17\1\335\45\17\1\35\24\17\1\336\31\17\1\35"+
    "\30\17\1\337\25\17\1\35\24\17\1\340\31\17\1\35"+
    "\6\17\1\341\47\17\1\35\6\17\1\342\47\17\1\35"+
    "\16\17\1\343\37\17\1\344\56\17\1\35\24\17\1\345"+
    "\31\17\1\346\56\17\1\35\16\17\1\347\37\17\1\35"+
    "\12\17\1\350\43\17\1\35\30\17\1\351\25\17\1\35"+
    "\26\17\1\352\27\17\1\353\56\17\1\35\24\17\1\354"+
    "\31\17\1\35\25\17\1\355\30\17\1\356\56\17\1\35"+
    "\10\17\1\357\45\17\1\35\13\17\1\360\42\17\1\35"+
    "\23\17\1\361\32\17\1\35\7\17\1\362\46\17\1\35"+
    "\14\17\1\363\41\17\1\35\6\17\1\364\47\17\1\35"+
    "\12\17\1\365\43\17\1\366\56\17\1\35\16\17\1\367"+
    "\37\17\1\35\16\17\1\370\37\17\1\35\16\17\1\371"+
    "\37\17\1\372\56\17\1\35\21\17\1\373\34\17\1\35"+
    "\31\17\1\374\24\17\1\35\21\17\1\375\34\17\1\35"+
    "\6\17\1\376\47\17\1\35\21\17\1\377\34\17\1\35"+
    "\24\17\1\u0100\31\17\1\35\10\17\1\u0101\45\17\1\35"+
    "\12\17\1\u0102\43\17\1\35\23\17\1\u0103\32\17\1\u0104"+
    "\56\17\1\35\10\17\1\u0105\45\17\1\35\6\17\1\u0106"+
    "\47\17\1\35\23\17\1\u0107\32\17\1\35\6\17\1\u0108"+
    "\47\17\1\u0109\56\17\1\35\30\17\1\u010a\25\17\1\35"+
    "\16\17\1\u010b\37\17\1\35\11\17\1\u010c\44\17\1\u010d"+
    "\56\17\1\35\10\17\1\u010e\45\17\1\35\6\17\1\u010f"+
    "\47\17\1\35\24\17\1\u0110\31\17\1\35\24\17\1\u0111"+
    "\31\17\1\35\16\17\1\u0112\37\17\1\u0113\56\17\1\35"+
    "\23\17\1\u0114\32\17\1\35\27\17\1\u0115\26\17\1\35"+
    "\24\17\1\u0116\31\17\1\u0117\56\17\1\u0118\56\17\1\35"+
    "\23\17\1\u0119\32\17\1\u011a\52\17";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11374];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\3\11\1\1\1\11\2\1\2\11"+
    "\15\0\1\1\1\11\40\0\1\11\74\0\1\11\5\0"+
    "\1\11\11\0\1\11\6\0\1\11\7\0\1\11\6\0"+
    "\1\11\5\0\1\11\5\0\1\11\1\0\1\11\2\0"+
    "\1\11\3\0\1\11\12\0\1\11\10\0\1\11\1\0"+
    "\1\11\2\0\2\11\6\0\2\11\13\0\1\11\1\0"+
    "\1\11\4\0\1\11\2\0\1\11\7\0\1\11\3\0"+
    "\1\11\11\0\1\11\4\0\1\11\3\0\1\11\5\0"+
    "\1\11\3\0\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type){
        return new Symbol(type, yyline+1,yycolumn+1);
    }
    private Symbol symbol(int type, Object value){
        System.out.println(type + " line: " + (yyline+1) + " col: "+(yycolumn+1) + " " + value);
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }
    private void error(){
        ErrorsLP.addError(yytext(), yyline+1, yycolumn+1, "Error Léxico","Cadena no definida");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DBLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error();
            }
          // fall through
          case 44: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 45: break;
          case 3:
            { return symbol(LPAREN, yytext());
            }
          // fall through
          case 46: break;
          case 4:
            { return symbol(RPAREN, yytext());
            }
          // fall through
          case 47: break;
          case 5:
            { return symbol(COMMA, yytext());
            }
          // fall through
          case 48: break;
          case 6:
            { return symbol(DIGIT, Integer.parseInt(yytext()));
            }
          // fall through
          case 49: break;
          case 7:
            { return symbol(COLON, yytext());
            }
          // fall through
          case 50: break;
          case 8:
            { ErrorsLP.addError(yytext(), yyline+1, yycolumn+1, "Error Léxico","Cadena no definida");
            }
          // fall through
          case 51: break;
          case 9:
            { return symbol(LBRACE, yytext());
            }
          // fall through
          case 52: break;
          case 10:
            { return symbol(RBRACE, yytext());
            }
          // fall through
          case 53: break;
          case 11:
            { return symbol(STRING, yytext());
            }
          // fall through
          case 54: break;
          case 12:
            { return symbol(ID, yytext());
            }
          // fall through
          case 55: break;
          case 13:
            { return symbol(COMBO, yytext());
            }
          // fall through
          case 56: break;
          case 14:
            { return symbol(TEMA, yytext());
            }
          // fall through
          case 57: break;
          case 15:
            { return symbol(CLASE, yytext());
            }
          // fall through
          case 58: break;
          case 16:
            { return symbol(FILAS, yytext());
            }
          // fall through
          case 59: break;
          case 17:
            { return symbol(RADIO, yytext());
            }
          // fall through
          case 60: break;
          case 18:
            { return symbol(DB_USER, yytext());
            }
          // fall through
          case 61: break;
          case 19:
            { return symbol(ESTADO, yytext());
            }
          // fall through
          case 62: break;
          case 20:
            { return symbol(INDICE, yytext());
            }
          // fall through
          case 63: break;
          case 21:
            { return symbol(NOMBRE, yytext());
            }
          // fall through
          case 64: break;
          case 22:
            { return symbol(PUNTEO, yytext());
            }
          // fall through
          case 65: break;
          case 23:
            { return symbol(TRIVIA, yytext());
            }
          // fall through
          case 66: break;
          case 24:
            { return symbol(FICHERO, yytext());
            }
          // fall through
          case 67: break;
          case 25:
            { return symbol(USUARIO, yytext());
            }
          // fall through
          case 68: break;
          case 26:
            { return symbol(DB_TRIVIA, yytext());
            }
          // fall through
          case 69: break;
          case 27:
            { return symbol(CHECKBOX, yytext());
            }
          // fall through
          case 70: break;
          case 28:
            { return symbol(COLUMNAS, yytext());
            }
          // fall through
          case 71: break;
          case 29:
            { return symbol(OPCIONES, yytext());
            }
          // fall through
          case 72: break;
          case 30:
            { return symbol(PASSWORD, yytext());
            }
          // fall through
          case 73: break;
          case 31:
            { return symbol(ID_TRIVIA, yytext());
            }
          // fall through
          case 74: break;
          case 32:
            { return symbol(RESPUESTA, yytext());
            }
          // fall through
          case 75: break;
          case 33:
            { return symbol(AREA_TEXTO, yytext());
            }
          // fall through
          case 76: break;
          case 34:
            { return symbol(ESTRUCTURA, yytext());
            }
          // fall through
          case 77: break;
          case 35:
            { return symbol(CAMPO_TEXTO, yytext());
            }
          // fall through
          case 78: break;
          case 36:
            { return symbol(INSTITUCION, yytext());
            }
          // fall through
          case 79: break;
          case 37:
            { return symbol(TIEMPO_TOTAL, yytext());
            }
          // fall through
          case 80: break;
          case 38:
            { return symbol(TEXTO_VISIBLE, yytext());
            }
          // fall through
          case 81: break;
          case 39:
            { return symbol(FECHA_CREACION, yytext());
            }
          // fall through
          case 82: break;
          case 40:
            { return symbol(TIEMPO_PREGUNTA, yytext());
            }
          // fall through
          case 83: break;
          case 41:
            { return symbol(USUARIO_CREACION, yytext());
            }
          // fall through
          case 84: break;
          case 42:
            { return symbol(DATOS_RECOPILADOS, yytext());
            }
          // fall through
          case 85: break;
          case 43:
            { return symbol(FECHA_MODIFICACION, yytext());
            }
          // fall through
          case 86: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
