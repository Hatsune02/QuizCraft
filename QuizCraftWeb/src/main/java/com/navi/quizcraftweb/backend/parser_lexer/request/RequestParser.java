
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navi.quizcraftweb.backend.parser_lexer.request;

import java_cup.runtime.*;
import java.util.*;
import java.text.DecimalFormat;
import com.navi.quizcraftweb.backend.parser_lexer.*;
import com.navi.quizcraftweb.backend.model.*;
import com.navi.quizcraftweb.backend.parser_lexer.request.objs.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class RequestParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public RequestParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public RequestParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RequestParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\063\005\000\002\062\003\000\002\062\004" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\003\014\000\002\006\006\000\002\007\006\000" +
    "\002\004\006\000\002\005\006\000\002\047\011\000\002" +
    "\010\011\000\002\010\003\000\002\011\005\000\002\011" +
    "\003\000\002\044\005\000\002\044\003\000\002\050\011" +
    "\000\002\051\011\000\002\052\011\000\002\012\011\000" +
    "\002\053\011\000\002\045\005\000\002\045\003\000\002" +
    "\054\011\000\002\055\011\000\002\013\011\000\002\056" +
    "\011\000\002\046\005\000\002\046\003\000\002\057\011" +
    "\000\002\060\011\000\002\064\010\000\002\065\011\000" +
    "\002\066\015\000\002\067\007\000\002\071\011\000\002" +
    "\070\007\000\002\043\003\000\002\043\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\011\000\002\016\011\000\002\017\011\000\002\020" +
    "\011\000\002\021\011\000\002\022\011\000\002\023\011" +
    "\000\002\024\011\000\002\025\011\000\002\026\011\000" +
    "\002\036\007\000\002\027\011\000\002\030\011\000\002" +
    "\031\011\000\002\032\011\000\002\037\011\000\002\040" +
    "\011\000\002\033\011\000\002\034\011\000\002\041\011" +
    "\000\002\042\011\000\002\035\011\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\075\003\000\002\075" +
    "\005\000\002\074\003\000\002\074\004\000\002\073\003" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\073\003\000\002\073\003\000\002\073\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\004\067\005\001\002\000\006\003\037\067" +
    "\021\001\002\000\004\106\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\004\011\001" +
    "\002\000\004\006\012\001\002\000\004\005\013\001\002" +
    "\000\004\072\014\001\002\000\004\007\015\001\002\000" +
    "\004\072\016\001\002\000\004\106\017\001\002\000\004" +
    "\070\020\001\002\000\006\003\uffee\067\uffee\001\002\000" +
    "\004\071\u0161\001\002\000\010\002\ufff5\003\ufff5\067\ufff5" +
    "\001\002\000\010\002\ufff4\003\ufff4\067\ufff4\001\002\000" +
    "\004\002\uffff\001\002\000\004\002\000\001\002\000\010" +
    "\002\ufff8\003\ufff8\067\ufff8\001\002\000\006\003\037\067" +
    "\u0157\001\002\000\010\002\ufff3\003\ufff3\067\ufff3\001\002" +
    "\000\004\072\043\001\002\000\010\002\ufff9\003\ufff9\067" +
    "\ufff9\001\002\000\010\002\ufffb\003\ufffb\067\ufffb\001\002" +
    "\000\010\002\ufff2\003\ufff2\067\ufff2\001\002\000\010\002" +
    "\ufff6\003\ufff6\067\ufff6\001\002\000\010\002\ufff0\003\ufff0" +
    "\067\ufff0\001\002\000\010\002\uffef\003\uffef\067\uffef\001" +
    "\002\000\010\002\ufffa\003\ufffa\067\ufffa\001\002\000\010" +
    "\002\ufff1\003\ufff1\067\ufff1\001\002\000\010\002\ufff7\003" +
    "\ufff7\067\ufff7\001\002\000\032\014\045\020\044\021\055" +
    "\022\051\030\057\031\050\032\054\053\047\054\052\056" +
    "\056\057\046\075\053\001\002\000\004\072\u0151\001\002" +
    "\000\004\072\u014d\001\002\000\004\072\u012b\001\002\000" +
    "\004\072\u0127\001\002\000\004\072\u0123\001\002\000\004" +
    "\072\u011f\001\002\000\004\072\u011b\001\002\000\004\072" +
    "\u0117\001\002\000\004\072\u0108\001\002\000\004\072\371" +
    "\001\002\000\004\072\366\001\002\000\004\072\060\001" +
    "\002\000\004\070\061\001\002\000\006\003\063\065\062" +
    "\001\002\000\004\072\360\001\002\000\004\067\uffdc\001" +
    "\002\000\006\003\114\072\103\001\002\000\004\067\066" +
    "\001\002\000\004\012\070\001\002\000\010\002\uffda\003" +
    "\uffda\067\uffda\001\002\000\004\071\071\001\002\000\004" +
    "\070\072\001\002\000\010\002\uffea\003\uffea\067\uffea\001" +
    "\002\000\010\003\uffca\066\uffca\105\uffca\001\002\000\010" +
    "\003\uffb7\066\uffb7\105\uffb7\001\002\000\010\003\uffc3\066" +
    "\uffc3\105\uffc3\001\002\000\010\003\uffc5\066\uffc5\105\uffc5" +
    "\001\002\000\010\003\uffb9\066\uffb9\105\uffb9\001\002\000" +
    "\010\003\uffbd\066\uffbd\105\uffbd\001\002\000\010\003\uffcd" +
    "\066\uffcd\105\uffcd\001\002\000\010\003\uffc6\066\uffc6\105" +
    "\uffc6\001\002\000\056\015\156\016\140\017\157\024\150" +
    "\025\135\026\147\027\144\034\141\035\153\036\142\037" +
    "\155\040\134\041\161\042\143\043\160\044\136\075\145" +
    "\077\154\100\152\101\151\102\146\103\137\001\002\000" +
    "\010\003\uffbb\066\uffbb\105\uffbb\001\002\000\010\003\uffc8" +
    "\066\uffc8\105\uffc8\001\002\000\010\003\uffb8\066\uffb8\105" +
    "\uffb8\001\002\000\010\003\uffc1\066\uffc1\105\uffc1\001\002" +
    "\000\010\003\uffbe\066\uffbe\105\uffbe\001\002\000\010\003" +
    "\uffb6\066\uffb6\105\uffb6\001\002\000\010\003\uffc7\066\uffc7" +
    "\105\uffc7\001\002\000\010\003\uffbf\066\uffbf\105\uffbf\001" +
    "\002\000\010\003\uffb5\066\uffb5\105\uffb5\001\002\000\010" +
    "\003\uffc0\066\uffc0\105\uffc0\001\002\000\010\003\uffc4\066" +
    "\uffc4\105\uffc4\001\002\000\010\003\uffbc\066\uffbc\105\uffbc" +
    "\001\002\000\010\003\uffba\066\uffba\105\uffba\001\002\000" +
    "\010\003\126\066\127\105\125\001\002\000\010\003\uffcb" +
    "\066\uffcb\105\uffcb\001\002\000\010\003\uffc2\066\uffc2\105" +
    "\uffc2\001\002\000\010\003\uffc9\066\uffc9\105\uffc9\001\002" +
    "\000\006\003\114\072\103\001\002\000\004\067\uffe5\001" +
    "\002\000\004\064\131\001\002\000\004\067\uffdd\001\002" +
    "\000\004\066\132\001\002\000\004\067\uffe6\001\002\000" +
    "\010\003\uffcc\066\uffcc\105\uffcc\001\002\000\004\072\353" +
    "\001\002\000\004\072\350\001\002\000\004\072\343\001" +
    "\002\000\004\072\336\001\002\000\004\072\331\001\002" +
    "\000\004\072\324\001\002\000\004\072\311\001\002\000" +
    "\004\072\304\001\002\000\004\072\277\001\002\000\004" +
    "\072\272\001\002\000\004\072\265\001\002\000\004\072" +
    "\260\001\002\000\004\072\253\001\002\000\004\072\246" +
    "\001\002\000\004\072\241\001\002\000\004\072\234\001" +
    "\002\000\004\072\227\001\002\000\004\072\222\001\002" +
    "\000\004\072\215\001\002\000\004\072\210\001\002\000" +
    "\004\072\203\001\002\000\004\072\162\001\002\000\004" +
    "\104\163\001\002\000\004\072\164\001\002\000\020\073" +
    "\173\074\172\102\174\104\165\105\171\106\167\107\166" +
    "\001\002\000\024\055\uff90\072\uff90\073\uff90\074\uff90\102" +
    "\uff90\104\uff90\105\uff90\106\uff90\107\uff90\001\002\000\024" +
    "\055\uff92\072\uff92\073\uff92\074\uff92\102\uff92\104\uff92\105" +
    "\uff92\106\uff92\107\uff92\001\002\000\024\055\uff8e\072\uff8e" +
    "\073\uff8e\074\uff8e\102\uff8e\104\uff8e\105\uff8e\106\uff8e\107" +
    "\uff8e\001\002\000\024\055\uff98\072\uff98\073\173\074\172" +
    "\102\174\104\165\105\171\106\167\107\166\001\002\000" +
    "\024\055\uff8f\072\uff8f\073\uff8f\074\uff8f\102\uff8f\104\uff8f" +
    "\105\uff8f\106\uff8f\107\uff8f\001\002\000\024\055\uff93\072" +
    "\uff93\073\uff93\074\uff93\102\uff93\104\uff93\105\uff93\106\uff93" +
    "\107\uff93\001\002\000\024\055\uff94\072\uff94\073\uff94\074" +
    "\uff94\102\uff94\104\uff94\105\uff94\106\uff94\107\uff94\001\002" +
    "\000\024\055\uff91\072\uff91\073\uff91\074\uff91\102\uff91\104" +
    "\uff91\105\uff91\106\uff91\107\uff91\001\002\000\006\055\200" +
    "\072\177\001\002\000\024\055\uff96\072\uff96\073\uff96\074" +
    "\uff96\102\uff96\104\uff96\105\uff96\106\uff96\107\uff96\001\002" +
    "\000\010\003\uffa2\066\uffa2\105\uffa2\001\002\000\020\073" +
    "\173\074\172\102\174\104\165\105\171\106\167\107\166" +
    "\001\002\000\024\055\uff97\072\uff97\073\173\074\172\102" +
    "\174\104\165\105\171\106\167\107\166\001\002\000\024" +
    "\055\uff95\072\uff95\073\uff95\074\uff95\102\uff95\104\uff95\105" +
    "\uff95\106\uff95\107\uff95\001\002\000\004\104\204\001\002" +
    "\000\004\072\205\001\002\000\004\107\206\001\002\000" +
    "\004\072\207\001\002\000\010\003\uffa0\066\uffa0\105\uffa0" +
    "\001\002\000\004\104\211\001\002\000\004\072\212\001" +
    "\002\000\020\073\173\074\172\102\174\104\165\105\171" +
    "\106\167\107\166\001\002\000\004\072\214\001\002\000" +
    "\010\003\uffac\066\uffac\105\uffac\001\002\000\004\104\216" +
    "\001\002\000\004\072\217\001\002\000\020\073\173\074" +
    "\172\102\174\104\165\105\171\106\167\107\166\001\002" +
    "\000\004\072\221\001\002\000\010\003\uffaf\066\uffaf\105" +
    "\uffaf\001\002\000\004\104\223\001\002\000\004\072\224" +
    "\001\002\000\004\107\225\001\002\000\004\072\226\001" +
    "\002\000\010\003\uffa4\066\uffa4\105\uffa4\001\002\000\004" +
    "\104\230\001\002\000\004\072\231\001\002\000\020\073" +
    "\173\074\172\102\174\104\165\105\171\106\167\107\166" +
    "\001\002\000\004\072\233\001\002\000\010\003\uffb4\066" +
    "\uffb4\105\uffb4\001\002\000\004\104\235\001\002\000\004" +
    "\072\236\001\002\000\004\074\237\001\002\000\004\072" +
    "\240\001\002\000\010\003\uffa6\066\uffa6\105\uffa6\001\002" +
    "\000\004\104\242\001\002\000\004\072\243\001\002\000" +
    "\020\073\173\074\172\102\174\104\165\105\171\106\167" +
    "\107\166\001\002\000\004\072\245\001\002\000\010\003" +
    "\uffb3\066\uffb3\105\uffb3\001\002\000\004\104\247\001\002" +
    "\000\004\072\250\001\002\000\020\073\173\074\172\102" +
    "\174\104\165\105\171\106\167\107\166\001\002\000\022" +
    "\072\252\073\173\074\172\102\174\104\165\105\171\106" +
    "\167\107\166\001\002\000\010\003\uffb1\066\uffb1\105\uffb1" +
    "\001\002\000\004\104\254\001\002\000\004\072\255\001" +
    "\002\000\004\074\256\001\002\000\004\072\257\001\002" +
    "\000\010\003\uffab\066\uffab\105\uffab\001\002\000\004\104" +
    "\261\001\002\000\004\072\262\001\002\000\020\073\173" +
    "\074\172\102\174\104\165\105\171\106\167\107\166\001" +
    "\002\000\004\072\264\001\002\000\010\003\uffa9\066\uffa9" +
    "\105\uffa9\001\002\000\004\104\266\001\002\000\004\072" +
    "\267\001\002\000\020\073\173\074\172\102\174\104\165" +
    "\105\171\106\167\107\166\001\002\000\022\072\271\073" +
    "\173\074\172\102\174\104\165\105\171\106\167\107\166" +
    "\001\002\000\010\003\uffb2\066\uffb2\105\uffb2\001\002\000" +
    "\004\104\273\001\002\000\004\072\274\001\002\000\020" +
    "\073\173\074\172\102\174\104\165\105\171\106\167\107" +
    "\166\001\002\000\004\072\276\001\002\000\010\003\uffae" +
    "\066\uffae\105\uffae\001\002\000\004\104\300\001\002\000" +
    "\004\072\301\001\002\000\020\073\173\074\172\102\174" +
    "\104\165\105\171\106\167\107\166\001\002\000\022\072" +
    "\303\073\173\074\172\102\174\104\165\105\171\106\167" +
    "\107\166\001\002\000\010\003\uffa8\066\uffa8\105\uffa8\001" +
    "\002\000\004\104\305\001\002\000\004\072\306\001\002" +
    "\000\004\107\307\001\002\000\004\072\310\001\002\000" +
    "\010\003\uffa1\066\uffa1\105\uffa1\001\002\000\004\104\312" +
    "\001\002\000\004\072\313\001\002\000\016\045\315\046" +
    "\317\047\316\050\314\051\321\052\320\001\002\000\004" +
    "\072\uff9b\001\002\000\004\072\uff9e\001\002\000\004\072" +
    "\uff9c\001\002\000\004\072\uff9d\001\002\000\004\072\uff99" +
    "\001\002\000\004\072\uff9a\001\002\000\004\072\323\001" +
    "\002\000\010\003\uffa5\066\uffa5\105\uffa5\001\002\000\004" +
    "\104\325\001\002\000\004\072\326\001\002\000\004\074" +
    "\327\001\002\000\004\072\330\001\002\000\010\003\uffa7" +
    "\066\uffa7\105\uffa7\001\002\000\004\104\332\001\002\000" +
    "\004\072\333\001\002\000\020\073\173\074\172\102\174" +
    "\104\165\105\171\106\167\107\166\001\002\000\004\072" +
    "\335\001\002\000\010\003\uffad\066\uffad\105\uffad\001\002" +
    "\000\004\104\337\001\002\000\004\072\340\001\002\000" +
    "\020\073\173\074\172\102\174\104\165\105\171\106\167" +
    "\107\166\001\002\000\004\072\342\001\002\000\010\003" +
    "\uffb0\066\uffb0\105\uffb0\001\002\000\004\104\344\001\002" +
    "\000\004\072\345\001\002\000\020\073\173\074\172\102" +
    "\174\104\165\105\171\106\167\107\166\001\002\000\006" +
    "\055\200\072\347\001\002\000\010\003\uff9f\066\uff9f\105" +
    "\uff9f\001\002\000\004\104\351\001\002\000\004\107\352" +
    "\001\002\000\010\003\uffaa\066\uffaa\105\uffaa\001\002\000" +
    "\004\104\354\001\002\000\004\072\355\001\002\000\020" +
    "\073\173\074\172\102\174\104\165\105\171\106\167\107" +
    "\166\001\002\000\022\072\357\073\173\074\172\102\174" +
    "\104\165\105\171\106\167\107\166\001\002\000\010\003" +
    "\uffa3\066\uffa3\105\uffa3\001\002\000\004\023\361\001\002" +
    "\000\004\072\362\001\002\000\004\104\363\001\002\000" +
    "\004\063\364\001\002\000\004\065\365\001\002\000\006" +
    "\003\uffdf\072\uffdf\001\002\000\004\070\367\001\002\000" +
    "\004\067\066\001\002\000\010\002\uffd3\003\uffd3\067\uffd3" +
    "\001\002\000\004\070\372\001\002\000\006\003\375\065" +
    "\374\001\002\000\006\003\114\072\103\001\002\000\004" +
    "\072\u0100\001\002\000\010\003\uffe7\067\uffe3\072\uffe7\001" +
    "\002\000\004\067\066\001\002\000\010\002\uffe0\003\uffe0" +
    "\067\uffe0\001\002\000\004\076\u0101\001\002\000\004\072" +
    "\u0102\001\002\000\004\104\u0103\001\002\000\004\063\u0104" +
    "\001\002\000\004\065\u0105\001\002\000\006\003\uffe8\072" +
    "\uffe8\001\002\000\010\003\126\066\127\105\125\001\002" +
    "\000\004\067\uffe4\001\002\000\004\070\u0109\001\002\000" +
    "\006\003\u010d\065\u010c\001\002\000\006\003\114\072\103" +
    "\001\002\000\004\067\066\001\002\000\004\072\u010e\001" +
    "\002\000\004\067\uffd6\001\002\000\004\033\u010f\001\002" +
    "\000\004\072\u0110\001\002\000\004\104\u0111\001\002\000" +
    "\004\063\u0112\001\002\000\004\065\u0113\001\002\000\006" +
    "\003\uffd9\072\uffd9\001\002\000\010\002\uffd8\003\uffd8\067" +
    "\uffd8\001\002\000\010\003\126\066\127\105\125\001\002" +
    "\000\004\067\uffd7\001\002\000\004\070\u0118\001\002\000" +
    "\006\003\375\065\374\001\002\000\004\067\066\001\002" +
    "\000\010\002\uffe9\003\uffe9\067\uffe9\001\002\000\004\070" +
    "\u011c\001\002\000\006\003\u010d\065\u010c\001\002\000\004" +
    "\067\066\001\002\000\010\002\uffd5\003\uffd5\067\uffd5\001" +
    "\002\000\004\070\u0120\001\002\000\006\003\063\065\062" +
    "\001\002\000\004\067\066\001\002\000\010\002\uffde\003" +
    "\uffde\067\uffde\001\002\000\004\070\u0124\001\002\000\006" +
    "\003\063\065\062\001\002\000\004\067\066\001\002\000" +
    "\010\002\uffdb\003\uffdb\067\uffdb\001\002\000\004\070\u0128" +
    "\001\002\000\006\003\u010d\065\u010c\001\002\000\004\067" +
    "\066\001\002\000\010\002\uffd4\003\uffd4\067\uffd4\001\002" +
    "\000\004\070\u012c\001\002\000\004\065\u012d\001\002\000" +
    "\004\072\u0131\001\002\000\004\067\066\001\002\000\010" +
    "\002\uffd2\003\uffd2\067\uffd2\001\002\000\004\105\u0132\001" +
    "\002\000\004\077\154\001\002\000\004\072\u0134\001\002" +
    "\000\004\105\u0135\001\002\000\004\035\153\001\002\000" +
    "\004\072\u0136\001\002\000\004\060\u0149\001\002\000\004" +
    "\105\u0138\001\002\000\004\072\u0139\001\002\000\004\061" +
    "\u0143\001\002\000\004\105\u013b\001\002\000\004\072\u013c" +
    "\001\002\000\004\062\u013f\001\002\000\004\066\u013e\001" +
    "\002\000\004\067\uffd1\001\002\000\004\072\u0140\001\002" +
    "\000\004\104\u0141\001\002\000\004\107\u0142\001\002\000" +
    "\004\066\uffce\001\002\000\004\072\u0144\001\002\000\004" +
    "\104\u0145\001\002\000\004\072\u0146\001\002\000\020\073" +
    "\173\074\172\102\174\104\165\105\171\106\167\107\166" +
    "\001\002\000\022\072\u0148\073\173\074\172\102\174\104" +
    "\165\105\171\106\167\107\166\001\002\000\004\105\uffcf" +
    "\001\002\000\004\072\u014a\001\002\000\004\104\u014b\001" +
    "\002\000\004\107\u014c\001\002\000\004\105\uffd0\001\002" +
    "\000\004\070\u014e\001\002\000\006\003\375\065\374\001" +
    "\002\000\004\067\066\001\002\000\010\002\uffe2\003\uffe2" +
    "\067\uffe2\001\002\000\004\070\u0152\001\002\000\006\003" +
    "\375\065\374\001\002\000\004\067\066\001\002\000\010" +
    "\002\uffe1\003\uffe1\067\uffe1\001\002\000\006\003\ufffd\067" +
    "\ufffd\001\002\000\006\003\037\067\u015c\001\002\000\004" +
    "\071\u0158\001\002\000\004\010\u0159\001\002\000\004\104" +
    "\u015a\001\002\000\004\072\uffeb\001\002\000\006\003\ufffc" +
    "\067\ufffc\001\002\000\004\071\u015e\001\002\000\004\002" +
    "\ufffe\001\002\000\006\010\u0159\013\u015f\001\002\000\004" +
    "\070\u0160\001\002\000\004\002\uffec\001\002\000\006\010" +
    "\u0159\011\u0162\001\002\000\004\070\u0163\001\002\000\006" +
    "\003\uffed\067\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0161\000\006\002\005\003\003\001\001\000\042\004" +
    "\030\006\026\047\032\050\025\051\021\052\033\053\037" +
    "\054\041\055\022\056\031\057\034\060\027\061\023\063" +
    "\024\064\040\065\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\004\030\047\032\050\025\051\021\052\033" +
    "\053\037\054\041\055\022\056\031\057\034\060\027\061" +
    "\u0154\062\u0155\064\040\065\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\063\045\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\014\100\015" +
    "\121\016\072\017\123\020\104\021\111\022\101\023\075" +
    "\024\115\025\074\026\122\027\114\030\112\031\107\032" +
    "\077\033\117\034\076\035\110\036\106\037\116\040\103" +
    "\041\105\042\073\043\120\001\001\000\004\005\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\014" +
    "\132\015\121\016\072\017\123\020\104\021\111\022\101" +
    "\023\075\024\115\025\074\026\122\027\114\030\112\031" +
    "\107\032\077\033\117\034\076\035\110\036\106\037\116" +
    "\040\103\041\105\042\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\073\175\074\167\075\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\073\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\073\175\074\200\001\001\000\004\073" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\073\212" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\073\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\073\243\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\073\175\074\250" +
    "\001\001\000\004\073\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\073\262\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\073" +
    "\175\074\267\001\001\000\004\073\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\274\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\073\175\074\301\001" +
    "\001\000\004\073\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\072\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\073\333\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\073" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\073\175\074\167\075" +
    "\345\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\073\175\074\355\001\001" +
    "\000\004\073\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\367\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\372\044\375\001\001\000\062\014\100\015" +
    "\121\016\072\017\123\020\104\021\111\022\101\023\075" +
    "\024\115\025\074\026\122\027\114\030\112\031\107\032" +
    "\077\033\117\034\076\035\110\036\106\037\116\040\103" +
    "\041\105\042\073\043\u0105\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\376\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u0106\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\u0109\046\u010a\001\001\000\062\014\100\015\121" +
    "\016\072\017\123\020\104\021\111\022\101\023\075\024" +
    "\115\025\074\026\122\027\114\030\112\031\107\032\077" +
    "\033\117\034\076\035\110\036\106\037\116\040\103\041" +
    "\105\042\073\043\u0114\001\001\000\004\005\u0113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\u0115\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\372\044\u0118\001\001\000\004\005\u0119\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\u0109\046\u011c" +
    "\001\001\000\004\005\u011d\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\063\045\u0120\001\001\000\004" +
    "\005\u0121\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\063\045\u0124\001\001\000\004\005\u0125\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\u0109\046" +
    "\u0128\001\001\000\004\005\u0129\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\u012d\001\001\000\004\015" +
    "\u012f\001\001\000\004\005\u012e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\u0132\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\u0136" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\071" +
    "\u0139\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\070\u013c\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\073\175\074\u0146\001\001" +
    "\000\004\073\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\372\044\u014e\001\001\000" +
    "\004\005\u014f\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\372\044\u0152\001\001\000\004\005\u0153\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\004\030" +
    "\007\u015c\047\032\050\025\051\021\052\033\053\037\054" +
    "\041\055\022\056\031\057\034\060\027\061\u015a\064\040" +
    "\065\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RequestParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RequestParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RequestParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<RequestXSON> requests;

    public ArrayList<String> usernames = new ArrayList<>();
    public ArrayList<String> oldUsers = new ArrayList<>();
    public ArrayList<String> idsTrivia = new ArrayList<>();
    public ArrayList<String> idsComponent = new ArrayList<>();
    public ArrayList<String> idsTriviaC = new ArrayList<>();

    boolean hasUser, hasPassword , hasName, hasInstitution, hasCreateDate, hasOldUser,
    hasNewUser, hasNewPassword, hasUpdateDate, hasIdTrivia, hasQuestionTime, hasCreateUser,
    hasTopic, hasId, hasTrivia, hasClass, hasIndex, hasVisibleText, hasOptions, hasLine, hasColumns, hasAnswer;

    boolean hasTextC, hasAreaText, hasCheckbox, hasRadius, hasFile, hasCombo;

    public void resetBooleans(){
        hasUser = false;
        hasPassword = false;
        hasName = false;
        hasInstitution = false;
        hasCreateDate = false;
        hasOldUser = false;
        hasNewUser = false;
        hasNewPassword = false;
        hasUpdateDate = false;
        hasIdTrivia = false;
        hasQuestionTime = false;
        hasCreateUser = false;
        hasTopic = false;
        hasId = false;
        hasTrivia = false;
        hasClass = false;
        hasIndex = false;
        hasVisibleText = false;
        hasOptions = false;
        hasLine = false;
        hasColumns = false;
        hasAnswer = false;
        hasTextC = false;
        hasAreaText = false;
        hasCheckbox = false;
        hasRadius = false;
        hasFile = false;
        hasCombo = false;
    }
    public boolean validateNewUser(){
        boolean requiredCondition = hasUser && hasPassword && hasInstitution && hasName;
        boolean other = !(hasOldUser || hasNewUser || hasNewPassword || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);

        return requiredCondition && other;
    }
    public void errorsNewUser(HashMap<Integer, Parameter> parameters){
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateUpdateUser(){
        boolean requiredCondition = hasOldUser;
        boolean possibleCondition = hasNewUser || hasNewPassword || hasInstitution;
        boolean other = !(hasUser || hasPassword || hasName || hasCreateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);

        return requiredCondition && possibleCondition && other;
    }
    public void errorsUpdateUser(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateDeleteUser(){
        boolean requiredCondition = hasUser;
        boolean other = !(hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);

        return requiredCondition  && other;
    }
    public void errorsDeleteUser(HashMap<Integer, Parameter> parameters){
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateLogin(){
        boolean requiredCondition = hasUser && hasPassword;
        boolean other = !(hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);
        return requiredCondition && other;
    }
    public void errorsLogin(HashMap<Integer, Parameter> parameters){
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateNewTrivia(){
        boolean requiredCondition = hasIdTrivia && hasName && hasQuestionTime && hasTopic;
        boolean other = !(hasUser || hasPassword || hasInstitution ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasId || hasTrivia || hasClass || hasIndex || hasVisibleText ||
                hasOptions || hasLine || hasColumns || hasAnswer);
        return requiredCondition && other;
    }
    public void errorsNewTrivia(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateUpdateTrivia(){
        boolean requiredCondition = hasIdTrivia;
        boolean possibleCondition = hasQuestionTime || hasName || hasTopic;
        boolean other = !(hasUser || hasPassword || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasCreateUser || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);
        return requiredCondition && possibleCondition && other;
    }
    public void errorsUpdateTrivia(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateDeleteTrivia(){
        boolean requiredCondition = hasIdTrivia;
        boolean other = !(hasUser || hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);
        return requiredCondition && other;
    }
    public void errorsDeleteTrivia(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }


    public boolean validateNewComponent(){
        boolean requiredCondition = hasId && hasTrivia && hasClass && hasVisibleText && hasAnswer;
        boolean other = !(hasUser || hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic ||
                hasIndex);

        if(hasCheckbox || hasRadius || hasCombo){
            if(requiredCondition) requiredCondition = hasOptions;
        }
        else if(hasAreaText){
            if(requiredCondition) requiredCondition = hasLine && hasColumns;
        }
        else{
            if(other) other = !(hasOptions || hasLine || hasColumns);
        }

        return requiredCondition && other;
    }
    public void errorsNewComponent(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());

        if(hasCheckbox || hasRadius || hasCombo){
            if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
            if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        }
        else if(hasAreaText){
            if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        }
        else {
            if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
            if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
            if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        }
    }

    public boolean validateUpdateComponent(){
        boolean requiredCondition = hasId && hasTrivia;
        boolean possibleCondition = hasIndex || hasClass || hasVisibleText || hasAnswer;
        boolean other = !(hasUser || hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic);
        if(hasCheckbox || hasRadius || hasCombo){
            if(requiredCondition) requiredCondition = hasOptions;
        }
        else if(hasAreaText){
            if(requiredCondition) requiredCondition = hasLine && hasColumns;
        }
        else{
            if(other) other = !(hasOptions || hasLine || hasColumns);
        }
        return requiredCondition && possibleCondition && other;
    }
    public void errorsUpdateComponent(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());

        if(hasCheckbox || hasRadius || hasCombo){
            if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
            if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        }
        else if(hasAreaText){
            if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        }
        else {
            if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
            if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
            if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        }
    }

    public boolean validateDeleteComponent(){
        boolean requiredCondition = hasId && hasTrivia;
        boolean other = !(hasUser || hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic ||
                hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);
        return requiredCondition && other;
    }
    public void errorsDeleteComponent(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public RequestParser(RequestLexer lex) {
        super(lex);
        resetBooleans();
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        HashMap<String, String> symbolNames = Validate.getSymbolNames();
        List<Integer> tokens = expected_token_ids();
        String des = "Se esperaba: ";
        for(Integer i : tokens) {
            String fromId = symbl_name_from_id(i);
            String symbolName = symbolNames.get(fromId);
            if(symbolName != null){
                des += "'"+symbolName+ "' o ";
            }
            else{
                if(!fromId.equals("error") && !fromId.equals("EOF")){
                    des += fromId +" o ";
                }
            }
        }
        if(des.length() > 3) des = des.substring(0, des.length() - 3);
        addError(lexeme, line, col, des);
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        HashMap<String, String> symbolNames = Validate.getSymbolNames();
        List<Integer> tokens = expected_token_ids();
        String des = "Se esperaba: ";
        for(Integer i : tokens) {
            String fromId = symbl_name_from_id(i);
            String symbolName = symbolNames.get(fromId);
            if(symbolName != null){
                des += "'"+symbolName+ "' o ";
            }
            else{
                if(!fromId.equals("error") && !fromId.equals("EOF")){
                    des += fromId +" o ";
                }
            }
        }
        if(des.length() > 3) des = des.substring(0, des.length() - 3);
        addError(lexeme, line, col, des);
    }

    private void addError(String lexeme, int line, int col, String description){
        ErrorsLP.addError(lexeme, line, col, "Error Sintáctico", description);
    }

    private void addParameterError(String type, int line, int col){
        ErrorsLP.addError(type, line, col, "Semántico", "Parametro " + type + " duplicado");
    }
    private void addPError(String type, int line, int col){
        ErrorsLP.addError(type, line, col, "Semántico", "Parametro " + type + " no esperado");
    }
    protected int error_sync_size() {
            return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$RequestParser$actions {
  private final RequestParser parser;

  /** Constructor */
  CUP$RequestParser$actions(RequestParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$RequestParser$do_action_part00000000(
    int                        CUP$RequestParser$act_num,
    java_cup.runtime.lr_parser CUP$RequestParser$parser,
    java.util.Stack            CUP$RequestParser$stack,
    int                        CUP$RequestParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RequestParser$result;

      /* select the action based on the action number */
      switch (CUP$RequestParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		RESULT = start_val;
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RequestParser$parser.done_parsing();
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= xson_label requests 
            {
              Object RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		ArrayList<RequestXSON> rs = (ArrayList<RequestXSON>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
    requests = rs;
    
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= xson_label request 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON< ? > r = (RequestXSON< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
    requests = new ArrayList<>();
    requests.add(r);

    
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // requests ::= open_requests requestP close_requests 
            {
              ArrayList<RequestXSON> RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		ArrayList<RequestXSON> rs = (ArrayList<RequestXSON>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		 RESULT = rs; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("requests",49, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // requestP ::= request 
            {
              ArrayList<RequestXSON> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON< ? > r = (RequestXSON< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            ArrayList<RequestXSON> rs = new ArrayList<>();
            rs.add(r);
            RESULT = rs;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("requestP",48, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // requestP ::= requestP request 
            {
              ArrayList<RequestXSON> RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		ArrayList<RequestXSON> rs = (ArrayList<RequestXSON>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON< ? > r = (RequestXSON< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            rs.add(r);
            RESULT = rs;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("requestP",48, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // request ::= new_user_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<User> r = (RequestXSON<User>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // request ::= new_trivia_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<Trivia> r = (RequestXSON<Trivia>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // request ::= new_component_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<Component> r = (RequestXSON<Component>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // request ::= update_user_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<User> r = (RequestXSON<User>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // request ::= update_trivia_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<Trivia> r = (RequestXSON<Trivia>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // request ::= update_component_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<Component> r = (RequestXSON<Component>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // request ::= delete_user_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<User> r = (RequestXSON<User>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // request ::= delete_trivia_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<Trivia> r = (RequestXSON<Trivia>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // request ::= delete_component_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<Component> r = (RequestXSON<Component>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // request ::= login_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<User> r = (RequestXSON<User>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // request ::= view_trivias_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON< ? > r = (RequestXSON< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // request ::= add_data_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<CollectedData> r = (RequestXSON<CollectedData>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // request ::= error 
            {
              RequestXSON< ? > RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // xson_label ::= LT QM XSON VERSION EQUAL Q ONE Q QM GT 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("xson_label",1, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-9)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // open_requests ::= LT EX REALIZAR_SOLICITUDES GT 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("open_requests",4, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // close_requests ::= LT EX FIN_SOLICITUDES_REALIZADA GT 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("close_requests",5, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // open_request ::= LT EX REALIZAR_SOLICITUD COLON 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("open_request",2, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // close_request ::= LT FIN_SOLICITUD_REALIZADA EX GT 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("close_request",3, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // new_user_request ::= open_request Q USUARIO_NUEVO Q GT data_user close_request 
            {
              RequestXSON<User> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                User u = new User();
                if(validateNewUser()){
                    u.setNewUser(d, hasCreateDate);
                }
                else errorsNewUser(d);
                RequestXSON<User> r = new RequestXSON<>(u, RequestXSON.USUARIO_NUEVO);
                r.setLineCol(dleft, dright);
                RESULT = r;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("new_user_request",37, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // open_user_data ::= LBRACE Q DATOS_USUARIO Q COLON LBRACKET LBRACE 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("open_user_data",6, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // open_user_data ::= error 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("open_user_data",6, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // close_data ::= RBRACE RBRACKET RBRACE 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("close_data",7, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // close_data ::= error 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("close_data",7, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // data_user ::= open_user_data data close_data 
            {
              HashMap<Integer,Parameter> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		 RESULT = d; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("data_user",34, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // data_user ::= error 
            {
              HashMap<Integer,Parameter> RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("data_user",34, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // update_user_request ::= open_request Q MODIFICAR_USUARIO Q GT data_user close_request 
            {
              RequestXSON<User> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                User u = new User();
                String us = "";
                if(validateUpdateUser()){
                    u.setUpdateUser(d, hasNewUser, hasNewPassword, hasInstitution, hasUpdateDate);
                    us = (String) d.get(Parameter.OLD_USER).getParameter();
                }
                else errorsUpdateUser(d);

                RequestXSON<User> r = new RequestXSON<>(us, u, RequestXSON.MODIFICAR_USUARIO);
                r.setLineCol(dleft, dright);
                RESULT = r;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("update_user_request",38, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // delete_user_request ::= open_request Q ELIMINAR_USUARIO Q GT data_user close_request 
            {
              RequestXSON<User> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                String u = "";
                if(validateDeleteUser()) u = (String) d.get(Parameter.USER).getParameter();
                else errorsDeleteUser(d);

                RequestXSON<User> r = new RequestXSON<>(u, RequestXSON.ELIMINAR_USUARIO);
                r.setLineCol(dleft, dright);
                RESULT = r;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("delete_user_request",39, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // login_request ::= open_request Q LOGIN_USUARIO Q GT data_user close_request 
            {
              RequestXSON<User> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                User u = new User();
                if(validateLogin()){
                    u.setLogin(d);
                }
                else errorsLogin(d);

                RequestXSON<User> r = new RequestXSON<>(u, RequestXSON.LOGIN_USUARIO);
                r.setLineCol(dleft, dright);
                RESULT = r;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("login_request",40, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // open_trivia_data ::= LBRACE Q PARAMETROS_TRIVIA Q COLON LBRACKET LBRACE 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("open_trivia_data",8, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // new_trivia_request ::= open_request Q NUEVA_TRIVIA Q GT data_trivia close_request 
            {
              RequestXSON<Trivia> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                    Trivia t = new Trivia();
                    if(validateNewTrivia()){
                        t.setNewTrivia(d, hasCreateUser, hasCreateDate);
                    }
                    else errorsNewTrivia(d);

                    RequestXSON<Trivia> r = new RequestXSON<>(t, RequestXSON.NUEVA_TRIVIA);
                    r.setLineCol(dleft, dright);
                    RESULT = r;
                    
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("new_trivia_request",41, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // data_trivia ::= open_trivia_data data close_data 
            {
              HashMap<Integer,Parameter> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		 RESULT = d; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("data_trivia",35, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // data_trivia ::= error 
            {
              HashMap<Integer,Parameter> RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("data_trivia",35, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // update_trivia_request ::= open_request Q MODIFICAR_TRIVIA Q GT data_trivia close_request 
            {
              RequestXSON<Trivia> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                        Trivia t = new Trivia();
                        if(validateUpdateTrivia()){
                            t.setUpdateTrivia(d, hasQuestionTime, hasName, hasTopic);
                        }
                        else errorsUpdateTrivia(d);

                        RequestXSON<Trivia> r = new RequestXSON<>(t, RequestXSON.MODIFICAR_TRIVIA);
                        r.setLineCol(dleft, dright);
                        RESULT = r;
                        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("update_trivia_request",42, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // delete_trivia_request ::= open_request Q ELIMINAR_TRIVIA Q GT data_trivia close_request 
            {
              RequestXSON<Trivia> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                        String s = "";
                        if(validateDeleteTrivia()) s = (String) d.get(Parameter.ID_TRIVIA).getParameter();

                        else errorsDeleteTrivia(d);

                        RequestXSON<Trivia> r = new RequestXSON<>(s, RequestXSON.ELIMINAR_TRIVIA);
                        r.setLineCol(dleft, dright);
                        RESULT = r;
                        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("delete_trivia_request",43, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // open_component_data ::= LBRACE Q PARAMETROS_COMPONENTE Q COLON LBRACKET LBRACE 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("open_component_data",9, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // new_component_request ::= open_request Q AGREGAR_COMPONENTE Q GT data_component close_request 
            {
              RequestXSON<Component> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                        Component c = new Component();
                        if(validateNewComponent()){
                            c.setNewComponent(d, hasOptions,  hasLine, hasColumns);
                        }
                        else errorsNewComponent(d);

                        RequestXSON<Component> r = new RequestXSON<>(c, RequestXSON.AGREGAR_COMPONENTE);
                        r.setLineCol(dleft, dright);
                        RESULT = r;
                        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("new_component_request",44, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // data_component ::= open_component_data data close_data 
            {
              HashMap<Integer,Parameter> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		 RESULT = d; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("data_component",36, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // data_component ::= error 
            {
              HashMap<Integer,Parameter> RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("data_component",36, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // update_component_request ::= open_request Q MODIFICAR_COMPONENTE Q GT data_component close_request 
            {
              RequestXSON<Component> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                            Component c = new Component();
                            if(validateUpdateComponent()){
                                c.setUpdateComponent(d, hasClass, hasVisibleText, hasAnswer, hasOptions,  hasLine, hasColumns);
                            }
                            else errorsUpdateComponent(d);

                            RequestXSON<Component> r = new RequestXSON<>(c, RequestXSON.MODIFICAR_COMPONENTE);
                            r.setLineCol(dleft, dright);
                            RESULT = r;
                            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("update_component_request",45, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // delete_component_request ::= open_request Q ELIMINAR_COMPONENTE Q GT data_component close_request 
            {
              RequestXSON<Component> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                            String s = "";
                            String s2 = "";
                            if(validateDeleteComponent()) {
                                s = (String) d.get(Parameter.ID).getParameter();
                                s2 = (String) d.get(Parameter.TRIVIA).getParameter();

                            }

                            else errorsDeleteComponent(d);

                            RequestXSON<Component> r = new RequestXSON<>(s, s2, RequestXSON.ELIMINAR_COMPONENTE);
                            r.setLineCol(dleft, dright);
                            RESULT = r;
                            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("delete_component_request",46, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // view_trivias_request ::= open_request Q VER_TRIVIAS Q GT close_request 
            {
              RequestXSON< ? > RESULT =null;
		
                        RequestXSON<Trivia> r = new RequestXSON<>("", RequestXSON.VER_TRIVIAS);
                        RESULT = r;
                        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("view_trivias_request",50, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-5)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // add_data_request ::= open_request Q ADD_DATA Q GT data_collected_data close_request 
            {
              RequestXSON<CollectedData> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		CollectedData d = (CollectedData)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                    RequestXSON<CollectedData> r = new RequestXSON<>(d, RequestXSON.ADD_DATA);
                    RESULT = r;
                    
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("add_data_request",51, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // data_collected_data ::= LBRACE user COMMA trivia COMMA total_time COMMA estado COMMA score RBRACE 
            {
              CollectedData RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-9)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-9)).right;
		Parameter<String> u = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-7)).right;
		Parameter<String> t = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-7)).value;
		int ttleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-5)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-5)).right;
		Integer tt = (Integer)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                    String user = (String) u.getParameter();
                    String trivia = (String) t.getParameter();
                    boolean state = e.equals("Completado");
                    CollectedData data = new CollectedData(user, trivia, tt, s, state);
                    RESULT = data;
                    
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("data_collected_data",52, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-10)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // total_time ::= Q TIEMPO_TOTAL Q COLON DIGIT 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 RESULT = Integer.parseInt(d); 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("total_time",53, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-4)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // estado ::= Q ESTADO Q COLON Q string_contentP Q 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		 RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("estado",55, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // score ::= Q PUNTEO Q COLON DIGIT 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 RESULT = Integer.parseInt(d); 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("score",54, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-4)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // data ::= parameter 
            {
              HashMap<Integer,Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter< ? > p = (Parameter< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
        HashMap<Integer, Parameter> parameters = new HashMap<>();
        parameters.put(p.getType(), p);
        RESULT = parameters;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("data",33, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // data ::= data COMMA parameter 
            {
              HashMap<Integer,Parameter> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter< ? > p = (Parameter< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
        d.put(p.getType(), p);
        RESULT = d;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("data",33, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parameter ::= user 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasUser) hasUser = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parameter ::= password 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasPassword) hasPassword = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parameter ::= name 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasName) hasName = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parameter ::= institution 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasInstitution) hasInstitution = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parameter ::= create_date 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasCreateDate) hasCreateDate = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parameter ::= old_user 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasOldUser) hasOldUser = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parameter ::= new_user 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasNewUser) hasNewUser = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parameter ::= new_password 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasNewPassword) hasNewPassword = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parameter ::= update_date 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasUpdateDate) hasUpdateDate = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parameter ::= id_trivia 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasIdTrivia) hasIdTrivia = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parameter ::= question_time 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<Integer> p = (Parameter<Integer>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasQuestionTime) hasQuestionTime = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // parameter ::= create_user 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasCreateUser) hasCreateUser = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parameter ::= topic 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasTopic) hasTopic = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parameter ::= id 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasId) hasId = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parameter ::= trivia 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasTrivia) hasTrivia = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parameter ::= clase 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<Integer> p = (Parameter<Integer>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasClass) hasClass = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parameter ::= index 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<Integer> p = (Parameter<Integer>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasIndex) hasIndex = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parameter ::= visible_text 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasVisibleText) hasVisibleText = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parameter ::= options 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter< ? > p = (Parameter< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasOptions) hasOptions = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parameter ::= line 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<Integer> p = (Parameter<Integer>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasLine) hasLine = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parameter ::= columns 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<Integer> p = (Parameter<Integer>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasColumns) hasColumns = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parameter ::= answer 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter< ? > p = (Parameter< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasAnswer) hasAnswer = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parameter ::= error 
            {
              Parameter< ? > RESULT =null;
		 RESULT = new Parameter<String>();
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // user ::= Q USUARIO Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        usernames.add(st);
        Parameter<String> p = new Parameter<>(st, Parameter.USER, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("user",11, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // password ::= Q PASSWORD Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.PASSWORD, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("password",12, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // name ::= Q NOMBRE Q COLON Q string_contentP Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.NAME, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("name",13, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // institution ::= Q INSTITUCION Q COLON Q string_contentP Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.INSTITUTION, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("institution",14, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // create_date ::= Q FECHA_CREACION Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        String regex = "\\d{4}-\\d{2}-\\d{2}";
        if(!st.matches(regex)) addError(st, stleft, stright, "Se esperaba una fecha correcta");

        Parameter<String> p = new Parameter<>(st, Parameter.CREATE_DATE, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("create_date",15, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // old_user ::= Q USUARIO_ANTIGUO Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        oldUsers.add(st);
        Parameter<String> p = new Parameter<>(st, Parameter.OLD_USER, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("old_user",16, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // new_user ::= Q USUARIO_NUEVO Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.NEW_USER, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("new_user",17, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // new_password ::= Q NUEVO_PASSWORD Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.NEW_PASSWORD, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("new_password",18, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // update_date ::= Q FECHA_MODIFICACION Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        String regex = "\\d{4}-\\d{2}-\\d{2}";
        if(!st.matches(regex)) addError(st, stleft, stright, "Se esperaba una fecha correcta");

        Parameter<String> p = new Parameter<>(st, Parameter.UPDATE_DATE, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("update_date",19, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // id_trivia ::= Q ID_TRIVIA Q COLON Q IDENTIFIER Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        idsTrivia.add(st);
        Parameter<String> p = new Parameter<>(st, Parameter.ID_TRIVIA, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("id_trivia",20, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // question_time ::= Q TIEMPO_PREGUNTA Q COLON DIGIT 
            {
              Parameter<Integer> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
        Parameter<Integer> p = new Parameter<>(Integer.parseInt(d), Parameter.QUESTION_TIME, dleft, dright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("question_time",28, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-4)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // create_user ::= Q USUARIO_CREACION Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.CREATE_USER, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("create_user",21, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // topic ::= Q TEMA Q COLON Q string_contentP Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.TOPIC, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("topic",22, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // id ::= Q ID Q COLON Q IDENTIFIER Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        idsComponent.add(st);
        Parameter<String> p = new Parameter<>(st, Parameter.ID, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("id",23, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // trivia ::= Q TRIVIA Q COLON Q IDENTIFIER Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        idsTriviaC.add(st);
        Parameter<String> p = new Parameter<>(st, Parameter.TRIVIA, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("trivia",24, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // clase ::= Q CLASE Q COLON Q clase_content Q 
            {
              Parameter<Integer> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Integer st = (Integer)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<Integer> p = new Parameter<>(st, Parameter.CLASS, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("clase",29, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // index ::= Q INDICE Q COLON Q DIGIT Q 
            {
              Parameter<Integer> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<Integer> p = new Parameter<>(Integer.parseInt(d), Parameter.INDEX, dleft, dright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("index",30, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // visible_text ::= Q TEXTO_VISIBLE Q COLON Q string_contentP Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.VISIBLE_TEXT, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("visible_text",25, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // options ::= Q OPCIONES Q COLON Q multiple_string Q 
            {
              Parameter< ? > RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		ArrayList<String> st = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<ArrayList<String>> p = new Parameter<>(st, Parameter.OPTIONS, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("options",26, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // line ::= Q FILAS Q COLON Q DIGIT Q 
            {
              Parameter<Integer> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<Integer> p = new Parameter<>(Integer.parseInt(d), Parameter.LINE, dleft, dright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("line",31, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // columns ::= Q COLUMNAS Q COLON Q DIGIT Q 
            {
              Parameter<Integer> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<Integer> p = new Parameter<>(Integer.parseInt(d), Parameter.COLUMNS, dleft, dright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("columns",32, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // answer ::= Q RESPUESTA Q COLON Q multiple_string Q 
            {
              Parameter< ? > RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		ArrayList<String> st = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<ArrayList<String>> p = new Parameter<>(st, Parameter.ANSWER, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("answer",27, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // clase_content ::= CAMPO_TEXTO 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                if(!hasTextC) hasTextC = true;
                RESULT = Component.CAMPO_TEXTO;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("clase_content",56, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // clase_content ::= AREA_TEXTO 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                if(!hasAreaText) hasAreaText = true;
                RESULT = Component.AREA_TEXTO;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("clase_content",56, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // clase_content ::= CHECKBOX 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                if(!hasCheckbox) hasCheckbox = true;
                RESULT = Component.CHECKBOX;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("clase_content",56, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // clase_content ::= RADIO 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                if(!hasRadius) hasRadius = true;
                RESULT = Component.RADIO;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("clase_content",56, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // clase_content ::= FICHERO 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                if(!hasFile) hasFile = true;
                RESULT = Component.FICHERO;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("clase_content",56, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // clase_content ::= COMBO 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                if(!hasCombo) hasCombo = true;
                RESULT = Component.COMBO;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("clase_content",56, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // multiple_string ::= string_contentP 
            {
              ArrayList<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                ArrayList<String> op = new ArrayList<>();
                op.add(s);
                RESULT = op;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("multiple_string",59, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // multiple_string ::= multiple_string VERTICAL_BAR string_contentP 
            {
              ArrayList<String> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		ArrayList<String> op = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                op.add(s);
                RESULT = op;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("multiple_string",59, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // string_contentP ::= string_content 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 RESULT = s;
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_contentP",58, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // string_contentP ::= string_contentP string_content 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s1 + " " + s2; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_contentP",58, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // string_content ::= STRINGCONTENT 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_content",57, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // string_content ::= IDENTIFIER 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_content",57, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // string_content ::= DIGIT 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_content",57, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // string_content ::= NOMBRE 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_content",57, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // string_content ::= COLON 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_content",57, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // string_content ::= COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_content",57, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // string_content ::= QM 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_content",57, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$RequestParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$RequestParser$do_action(
    int                        CUP$RequestParser$act_num,
    java_cup.runtime.lr_parser CUP$RequestParser$parser,
    java.util.Stack            CUP$RequestParser$stack,
    int                        CUP$RequestParser$top)
    throws java.lang.Exception
    {
              return CUP$RequestParser$do_action_part00000000(
                               CUP$RequestParser$act_num,
                               CUP$RequestParser$parser,
                               CUP$RequestParser$stack,
                               CUP$RequestParser$top);
    }
}

}
