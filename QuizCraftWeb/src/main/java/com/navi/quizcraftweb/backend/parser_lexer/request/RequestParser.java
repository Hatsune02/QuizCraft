
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navi.quizcraftweb.backend.parser_lexer.request;

import java_cup.runtime.*;
import java.util.*;
import java.text.DecimalFormat;
import com.navi.quizcraftweb.backend.parser_lexer.*;
import com.navi.quizcraftweb.backend.model.*;
import com.navi.quizcraftweb.backend.parser_lexer.request.objs.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class RequestParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public RequestParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public RequestParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RequestParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\063\005\000\002\062\003\000\002\062\004" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\061\003\000\002" +
    "\061\003\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\003\014\000\002\006\006\000\002\007\006" +
    "\000\002\004\006\000\002\005\006\000\002\047\011\000" +
    "\002\010\011\000\002\011\005\000\002\044\005\000\002" +
    "\050\011\000\002\051\011\000\002\052\011\000\002\012" +
    "\011\000\002\053\011\000\002\045\005\000\002\054\011" +
    "\000\002\055\011\000\002\013\011\000\002\056\011\000" +
    "\002\046\005\000\002\057\011\000\002\060\011\000\002" +
    "\043\003\000\002\043\005\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\015\011\000\002\016\011\000\002" +
    "\017\011\000\002\020\011\000\002\021\011\000\002\022" +
    "\011\000\002\023\011\000\002\024\011\000\002\025\011" +
    "\000\002\026\011\000\002\036\007\000\002\027\011\000" +
    "\002\030\011\000\002\031\011\000\002\032\011\000\002" +
    "\037\011\000\002\040\011\000\002\033\011\000\002\034" +
    "\011\000\002\041\011\000\002\042\011\000\002\035\011" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\067\003\000\002\067\005\000\002\066\003\000\002\066" +
    "\004\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0132\000\004\062\005\001\002\000\004\062\035\001" +
    "\002\000\004\101\010\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\004\004\011\001\002\000" +
    "\004\006\012\001\002\000\004\005\013\001\002\000\004" +
    "\065\014\001\002\000\004\007\015\001\002\000\004\065" +
    "\016\001\002\000\004\101\017\001\002\000\004\063\020" +
    "\001\002\000\004\062\ufff1\001\002\000\004\002\000\001" +
    "\002\000\004\062\u012d\001\002\000\006\002\ufff4\062\ufff4" +
    "\001\002\000\006\002\ufff2\062\ufff2\001\002\000\004\065" +
    "\045\001\002\000\006\002\ufff9\062\ufff9\001\002\000\006" +
    "\002\ufffa\062\ufffa\001\002\000\006\002\ufff3\062\ufff3\001" +
    "\002\000\004\002\uffff\001\002\000\006\002\ufff7\062\ufff7" +
    "\001\002\000\006\002\ufff5\062\ufff5\001\002\000\006\002" +
    "\ufff6\062\ufff6\001\002\000\004\064\040\001\002\000\006" +
    "\002\ufffb\062\ufffb\001\002\000\006\002\ufff8\062\ufff8\001" +
    "\002\000\006\010\042\011\041\001\002\000\004\063\044" +
    "\001\002\000\004\077\043\001\002\000\004\065\uffee\001" +
    "\002\000\004\062\ufff0\001\002\000\026\014\047\020\046" +
    "\021\056\022\052\030\057\031\051\032\055\053\050\054" +
    "\053\070\054\001\002\000\004\065\u0127\001\002\000\004" +
    "\065\u0123\001\002\000\004\065\u011f\001\002\000\004\065" +
    "\u011b\001\002\000\004\065\u0117\001\002\000\004\065\u0113" +
    "\001\002\000\004\065\u010f\001\002\000\004\065\u0101\001" +
    "\002\000\004\065\363\001\002\000\004\065\060\001\002" +
    "\000\004\063\061\001\002\000\004\060\062\001\002\000" +
    "\004\065\355\001\002\000\004\065\102\001\002\000\004" +
    "\062\065\001\002\000\004\012\067\001\002\000\006\002" +
    "\uffe1\062\uffe1\001\002\000\004\064\070\001\002\000\004" +
    "\063\071\001\002\000\006\002\uffed\062\uffed\001\002\000" +
    "\006\061\uffd8\100\uffd8\001\002\000\006\061\uffc5\100\uffc5" +
    "\001\002\000\006\061\uffd1\100\uffd1\001\002\000\006\061" +
    "\uffd3\100\uffd3\001\002\000\006\061\uffcb\100\uffcb\001\002" +
    "\000\006\061\uffc7\100\uffc7\001\002\000\006\061\uffdb\100" +
    "\uffdb\001\002\000\006\061\uffd4\100\uffd4\001\002\000\056" +
    "\015\153\016\135\017\154\024\145\025\132\026\144\027" +
    "\141\034\136\035\150\036\137\037\152\040\131\041\156" +
    "\042\140\043\155\044\133\070\142\072\151\073\147\074" +
    "\146\075\143\076\134\001\002\000\006\061\uffc9\100\uffc9" +
    "\001\002\000\006\061\uffd6\100\uffd6\001\002\000\006\061" +
    "\uffc6\100\uffc6\001\002\000\006\061\uffcf\100\uffcf\001\002" +
    "\000\006\061\uffcc\100\uffcc\001\002\000\006\061\uffc4\100" +
    "\uffc4\001\002\000\006\061\uffd5\100\uffd5\001\002\000\006" +
    "\061\uffcd\100\uffcd\001\002\000\006\061\uffce\100\uffce\001" +
    "\002\000\006\061\uffd2\100\uffd2\001\002\000\006\061\uffca" +
    "\100\uffca\001\002\000\006\061\uffc8\100\uffc8\001\002\000" +
    "\006\061\124\100\123\001\002\000\006\061\uffd9\100\uffd9" +
    "\001\002\000\006\061\uffd0\100\uffd0\001\002\000\006\061" +
    "\uffd7\100\uffd7\001\002\000\004\065\102\001\002\000\004" +
    "\057\126\001\002\000\004\062\uffe3\001\002\000\004\061" +
    "\127\001\002\000\004\062\uffea\001\002\000\006\061\uffda" +
    "\100\uffda\001\002\000\004\065\350\001\002\000\004\065" +
    "\345\001\002\000\004\065\340\001\002\000\004\065\333" +
    "\001\002\000\004\065\326\001\002\000\004\065\321\001" +
    "\002\000\004\065\306\001\002\000\004\065\301\001\002" +
    "\000\004\065\274\001\002\000\004\065\267\001\002\000" +
    "\004\065\262\001\002\000\004\065\255\001\002\000\004" +
    "\065\250\001\002\000\004\065\243\001\002\000\004\065" +
    "\236\001\002\000\004\065\231\001\002\000\004\065\224" +
    "\001\002\000\004\065\217\001\002\000\004\065\212\001" +
    "\002\000\004\065\205\001\002\000\004\065\200\001\002" +
    "\000\004\065\157\001\002\000\004\077\160\001\002\000" +
    "\004\065\161\001\002\000\020\066\170\067\167\075\171" +
    "\077\162\100\166\101\164\102\163\001\002\000\024\055" +
    "\uff9f\065\uff9f\066\uff9f\067\uff9f\075\uff9f\077\uff9f\100\uff9f" +
    "\101\uff9f\102\uff9f\001\002\000\024\055\uffa1\065\uffa1\066" +
    "\uffa1\067\uffa1\075\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1" +
    "\001\002\000\024\055\uff9d\065\uff9d\066\uff9d\067\uff9d\075" +
    "\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\001\002\000\024" +
    "\055\uffa7\065\uffa7\066\170\067\167\075\171\077\162\100" +
    "\166\101\164\102\163\001\002\000\024\055\uff9e\065\uff9e" +
    "\066\uff9e\067\uff9e\075\uff9e\077\uff9e\100\uff9e\101\uff9e\102" +
    "\uff9e\001\002\000\024\055\uffa2\065\uffa2\066\uffa2\067\uffa2" +
    "\075\uffa2\077\uffa2\100\uffa2\101\uffa2\102\uffa2\001\002\000" +
    "\024\055\uffa3\065\uffa3\066\uffa3\067\uffa3\075\uffa3\077\uffa3" +
    "\100\uffa3\101\uffa3\102\uffa3\001\002\000\024\055\uffa0\065" +
    "\uffa0\066\uffa0\067\uffa0\075\uffa0\077\uffa0\100\uffa0\101\uffa0" +
    "\102\uffa0\001\002\000\006\055\175\065\174\001\002\000" +
    "\024\055\uffa5\065\uffa5\066\uffa5\067\uffa5\075\uffa5\077\uffa5" +
    "\100\uffa5\101\uffa5\102\uffa5\001\002\000\006\061\uffb1\100" +
    "\uffb1\001\002\000\020\066\170\067\167\075\171\077\162" +
    "\100\166\101\164\102\163\001\002\000\024\055\uffa6\065" +
    "\uffa6\066\170\067\167\075\171\077\162\100\166\101\164" +
    "\102\163\001\002\000\024\055\uffa4\065\uffa4\066\uffa4\067" +
    "\uffa4\075\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\001\002" +
    "\000\004\077\201\001\002\000\004\065\202\001\002\000" +
    "\004\102\203\001\002\000\004\065\204\001\002\000\006" +
    "\061\uffaf\100\uffaf\001\002\000\004\077\206\001\002\000" +
    "\004\065\207\001\002\000\020\066\170\067\167\075\171" +
    "\077\162\100\166\101\164\102\163\001\002\000\004\065" +
    "\211\001\002\000\006\061\uffbb\100\uffbb\001\002\000\004" +
    "\077\213\001\002\000\004\065\214\001\002\000\020\066" +
    "\170\067\167\075\171\077\162\100\166\101\164\102\163" +
    "\001\002\000\004\065\216\001\002\000\006\061\uffbe\100" +
    "\uffbe\001\002\000\004\077\220\001\002\000\004\065\221" +
    "\001\002\000\004\102\222\001\002\000\004\065\223\001" +
    "\002\000\006\061\uffb3\100\uffb3\001\002\000\004\077\225" +
    "\001\002\000\004\065\226\001\002\000\020\066\170\067" +
    "\167\075\171\077\162\100\166\101\164\102\163\001\002" +
    "\000\004\065\230\001\002\000\006\061\uffc3\100\uffc3\001" +
    "\002\000\004\077\232\001\002\000\004\065\233\001\002" +
    "\000\004\067\234\001\002\000\004\065\235\001\002\000" +
    "\006\061\uffb5\100\uffb5\001\002\000\004\077\237\001\002" +
    "\000\004\065\240\001\002\000\020\066\170\067\167\075" +
    "\171\077\162\100\166\101\164\102\163\001\002\000\004" +
    "\065\242\001\002\000\006\061\uffc2\100\uffc2\001\002\000" +
    "\004\077\244\001\002\000\004\065\245\001\002\000\020" +
    "\066\170\067\167\075\171\077\162\100\166\101\164\102" +
    "\163\001\002\000\004\065\247\001\002\000\006\061\uffc0" +
    "\100\uffc0\001\002\000\004\077\251\001\002\000\004\065" +
    "\252\001\002\000\004\067\253\001\002\000\004\065\254" +
    "\001\002\000\006\061\uffba\100\uffba\001\002\000\004\077" +
    "\256\001\002\000\004\065\257\001\002\000\020\066\170" +
    "\067\167\075\171\077\162\100\166\101\164\102\163\001" +
    "\002\000\004\065\261\001\002\000\006\061\uffb8\100\uffb8" +
    "\001\002\000\004\077\263\001\002\000\004\065\264\001" +
    "\002\000\020\066\170\067\167\075\171\077\162\100\166" +
    "\101\164\102\163\001\002\000\022\065\266\066\170\067" +
    "\167\075\171\077\162\100\166\101\164\102\163\001\002" +
    "\000\006\061\uffc1\100\uffc1\001\002\000\004\077\270\001" +
    "\002\000\004\065\271\001\002\000\020\066\170\067\167" +
    "\075\171\077\162\100\166\101\164\102\163\001\002\000" +
    "\004\065\273\001\002\000\006\061\uffbd\100\uffbd\001\002" +
    "\000\004\077\275\001\002\000\004\065\276\001\002\000" +
    "\020\066\170\067\167\075\171\077\162\100\166\101\164" +
    "\102\163\001\002\000\004\065\300\001\002\000\006\061" +
    "\uffb7\100\uffb7\001\002\000\004\077\302\001\002\000\004" +
    "\065\303\001\002\000\004\102\304\001\002\000\004\065" +
    "\305\001\002\000\006\061\uffb0\100\uffb0\001\002\000\004" +
    "\077\307\001\002\000\004\065\310\001\002\000\016\045" +
    "\313\046\314\047\312\050\311\051\316\052\315\001\002" +
    "\000\004\065\uffaa\001\002\000\004\065\uffab\001\002\000" +
    "\004\065\uffad\001\002\000\004\065\uffac\001\002\000\004" +
    "\065\uffa8\001\002\000\004\065\uffa9\001\002\000\004\065" +
    "\320\001\002\000\006\061\uffb4\100\uffb4\001\002\000\004" +
    "\077\322\001\002\000\004\065\323\001\002\000\004\067" +
    "\324\001\002\000\004\065\325\001\002\000\006\061\uffb6" +
    "\100\uffb6\001\002\000\004\077\327\001\002\000\004\065" +
    "\330\001\002\000\020\066\170\067\167\075\171\077\162" +
    "\100\166\101\164\102\163\001\002\000\004\065\332\001" +
    "\002\000\006\061\uffbc\100\uffbc\001\002\000\004\077\334" +
    "\001\002\000\004\065\335\001\002\000\020\066\170\067" +
    "\167\075\171\077\162\100\166\101\164\102\163\001\002" +
    "\000\004\065\337\001\002\000\006\061\uffbf\100\uffbf\001" +
    "\002\000\004\077\341\001\002\000\004\065\342\001\002" +
    "\000\020\066\170\067\167\075\171\077\162\100\166\101" +
    "\164\102\163\001\002\000\006\055\175\065\344\001\002" +
    "\000\006\061\uffae\100\uffae\001\002\000\004\077\346\001" +
    "\002\000\004\102\347\001\002\000\006\061\uffb9\100\uffb9" +
    "\001\002\000\004\077\351\001\002\000\004\065\352\001" +
    "\002\000\020\066\170\067\167\075\171\077\162\100\166" +
    "\101\164\102\163\001\002\000\022\065\354\066\170\067" +
    "\167\075\171\077\162\100\166\101\164\102\163\001\002" +
    "\000\006\061\uffb2\100\uffb2\001\002\000\004\023\356\001" +
    "\002\000\004\065\357\001\002\000\004\077\360\001\002" +
    "\000\004\056\361\001\002\000\004\060\362\001\002\000" +
    "\004\065\uffe5\001\002\000\004\063\364\001\002\000\004" +
    "\060\366\001\002\000\004\065\102\001\002\000\004\065" +
    "\371\001\002\000\004\062\065\001\002\000\006\002\uffe6" +
    "\062\uffe6\001\002\000\004\071\372\001\002\000\004\065" +
    "\373\001\002\000\004\077\374\001\002\000\004\056\375" +
    "\001\002\000\004\060\376\001\002\000\004\065\uffeb\001" +
    "\002\000\006\061\124\100\123\001\002\000\004\062\uffe9" +
    "\001\002\000\004\063\u0102\001\002\000\004\060\u0104\001" +
    "\002\000\004\065\102\001\002\000\004\065\u0107\001\002" +
    "\000\004\062\065\001\002\000\006\002\uffdf\062\uffdf\001" +
    "\002\000\004\033\u0108\001\002\000\004\065\u0109\001\002" +
    "\000\004\077\u010a\001\002\000\004\056\u010b\001\002\000" +
    "\004\060\u010c\001\002\000\004\065\uffe0\001\002\000\006" +
    "\061\124\100\123\001\002\000\004\062\uffde\001\002\000" +
    "\004\063\u0110\001\002\000\004\060\366\001\002\000\004" +
    "\062\065\001\002\000\006\002\uffec\062\uffec\001\002\000" +
    "\004\063\u0114\001\002\000\004\060\u0104\001\002\000\004" +
    "\062\065\001\002\000\006\002\uffdd\062\uffdd\001\002\000" +
    "\004\063\u0118\001\002\000\004\060\062\001\002\000\004" +
    "\062\065\001\002\000\006\002\uffe4\062\uffe4\001\002\000" +
    "\004\063\u011c\001\002\000\004\060\062\001\002\000\004" +
    "\062\065\001\002\000\006\002\uffe2\062\uffe2\001\002\000" +
    "\004\063\u0120\001\002\000\004\060\u0104\001\002\000\004" +
    "\062\065\001\002\000\006\002\uffdc\062\uffdc\001\002\000" +
    "\004\063\u0124\001\002\000\004\060\366\001\002\000\004" +
    "\062\065\001\002\000\006\002\uffe8\062\uffe8\001\002\000" +
    "\004\063\u0128\001\002\000\004\060\366\001\002\000\004" +
    "\062\065\001\002\000\006\002\uffe7\062\uffe7\001\002\000" +
    "\004\062\ufffd\001\002\000\004\062\u0130\001\002\000\004" +
    "\064\u012e\001\002\000\004\010\042\001\002\000\004\062" +
    "\ufffc\001\002\000\004\064\u0132\001\002\000\004\002\ufffe" +
    "\001\002\000\006\010\042\013\u0133\001\002\000\004\063" +
    "\u0134\001\002\000\004\002\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0132\000\006\002\005\003\003\001\001\000\036\004" +
    "\024\006\021\047\035\050\036\051\032\052\023\053\026" +
    "\054\031\055\022\056\025\057\033\060\027\061\030\063" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\024\047\035\050\036\051\032" +
    "\052\023\053\026\054\031\055\022\056\025\057\033\060" +
    "\027\061\u012a\062\u012b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\062\045\063\001\001\000\002\001\001\000\062\014\077" +
    "\015\117\016\071\017\121\020\103\021\110\022\100\023" +
    "\074\024\113\025\073\026\120\027\112\030\111\031\106" +
    "\032\075\033\115\034\076\035\107\036\105\037\114\040" +
    "\102\041\104\042\072\043\116\001\001\000\004\005\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\014\127\015\117" +
    "\016\071\017\121\020\103\021\110\022\100\023\074\024" +
    "\113\025\073\026\120\027\112\030\111\031\106\032\075" +
    "\033\115\034\076\035\107\036\105\037\114\040\102\041" +
    "\104\042\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\065\172\066\164\067\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\065\172\066" +
    "\175\001\001\000\004\065\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\065\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\226\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\065\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\065\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\065\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\065\172\066\264\001\001\000\004\065\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\271\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\276\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\316\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\065\330\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\335\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\065\172\066\164\067\342\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\065\172\066\352\001\001\000\004" +
    "\065\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\364\044\366\001\001\000\062\014\077\015\117\016\071" +
    "\017\121\020\103\021\110\022\100\023\074\024\113\025" +
    "\073\026\120\027\112\030\111\031\106\032\075\033\115" +
    "\034\076\035\107\036\105\037\114\040\102\041\104\042" +
    "\072\043\376\001\001\000\002\001\001\000\004\005\367" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\377\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\u0102\046\u0104\001\001" +
    "\000\062\014\077\015\117\016\071\017\121\020\103\021" +
    "\110\022\100\023\074\024\113\025\073\026\120\027\112" +
    "\030\111\031\106\032\075\033\115\034\076\035\107\036" +
    "\105\037\114\040\102\041\104\042\072\043\u010c\001\001" +
    "\000\002\001\001\000\004\005\u0105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\364\044\u0110\001\001\000\004\005\u0111\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\u0102" +
    "\046\u0114\001\001\000\004\005\u0115\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\062\045\u0118\001\001" +
    "\000\004\005\u0119\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\062\045\u011c\001\001\000\004\005\u011d" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\u0102\046\u0120\001\001\000\004\005\u0121\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\364\044\u0124\001" +
    "\001\000\004\005\u0125\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\364\044\u0128\001\001\000\004\005" +
    "\u0129\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\024\007\u0130\047\035\050\036\051\032\052\023\053" +
    "\026\054\031\055\022\056\025\057\033\060\027\061\u012e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RequestParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RequestParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RequestParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<RequestXSON> requests;

    boolean hasUser, hasPassword , hasName, hasInstitution, hasCreateDate, hasOldUser,
    hasNewUser, hasNewPassword, hasUpdateDate, hasIdTrivia, hasQuestionTime, hasCreateUser,
    hasTopic, hasId, hasTrivia, hasClass, hasIndex, hasVisibleText, hasOptions, hasLine, hasColumns, hasAnswer;

    boolean hasTextC, hasAreaText, hasCheckbox, hasRadius, hasFile, hasCombo;

    public void resetBooleans(){
        hasUser = false;
        hasPassword = false;
        hasName = false;
        hasInstitution = false;
        hasCreateDate = false;
        hasOldUser = false;
        hasNewUser = false;
        hasNewPassword = false;
        hasUpdateDate = false;
        hasIdTrivia = false;
        hasQuestionTime = false;
        hasCreateUser = false;
        hasTopic = false;
        hasId = false;
        hasTrivia = false;
        hasClass = false;
        hasIndex = false;
        hasVisibleText = false;
        hasOptions = false;
        hasLine = false;
        hasColumns = false;
        hasAnswer = false;
        hasTextC = false;
        hasAreaText = false;
        hasCheckbox = false;
        hasRadius = false;
        hasFile = false;
        hasCombo = false;
    }
    public boolean validateNewUser(){
        boolean requiredCondition = hasUser && hasPassword && hasInstitution && hasName;
        boolean other = !(hasOldUser || hasNewUser || hasNewPassword || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);

        return requiredCondition && other;
    }
    public void errorsNewUser(HashMap<Integer, Parameter> parameters){
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateUpdateUser(){
        boolean requiredCondition = hasOldUser;
        boolean possibleCondition = hasNewUser || hasNewPassword || hasInstitution;
        boolean other = !(hasUser || hasPassword || hasName || hasCreateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);

        return requiredCondition && possibleCondition && other;
    }
    public void errorsUpdateUser(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateDeleteUser(){
        boolean requiredCondition = hasUser;
        boolean other = !(hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);

        return requiredCondition  && other;
    }
    public void errorsDeleteUser(HashMap<Integer, Parameter> parameters){
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateLogin(){
        boolean requiredCondition = hasUser && hasPassword;
        boolean other = !(hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);
        return requiredCondition && other;
    }
    public void errorsLogin(HashMap<Integer, Parameter> parameters){
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateNewTrivia(){
        boolean requiredCondition = hasIdTrivia && hasName && hasQuestionTime && hasCreateUser && hasTopic;
        boolean other = !(hasUser || hasPassword || hasInstitution ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasId || hasTrivia || hasClass || hasIndex || hasVisibleText ||
                hasOptions || hasLine || hasColumns || hasAnswer);
        return requiredCondition && other;
    }
    public void errorsNewTrivia(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateUpdateTrivia(){
        boolean requiredCondition = hasIdTrivia;
        boolean possibleCondition = hasQuestionTime || hasName || hasTopic;
        boolean other = !(hasUser || hasPassword || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasCreateUser || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);
        return requiredCondition && possibleCondition && other;
    }
    public void errorsUpdateTrivia(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public boolean validateDeleteTrivia(){
        boolean requiredCondition = hasIdTrivia;
        boolean other = !(hasUser || hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasQuestionTime || hasCreateUser || hasTopic || hasId ||
                hasTrivia || hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);
        return requiredCondition && other;
    }
    public void errorsDeleteTrivia(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasId) addPError(Parameter.TYPES[Parameter.ID], parameters.get(Parameter.ID).getLine(), parameters.get(Parameter.ID).getColumn());
        if(hasTrivia) addPError(Parameter.TYPES[Parameter.TRIVIA], parameters.get(Parameter.TRIVIA).getLine(), parameters.get(Parameter.TRIVIA).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }


    public boolean validateNewComponent(){
        boolean requiredCondition = hasId && hasTrivia && hasClass && hasVisibleText && hasAnswer;
        boolean other = !(hasUser || hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic ||
                hasIndex);

        if(hasCheckbox || hasRadius || hasCombo){
            if(requiredCondition) requiredCondition = hasOptions;
        }
        else if(hasAreaText){
            if(requiredCondition) requiredCondition = hasLine && hasColumns;
        }
        else{
            if(other) other = !(hasOptions || hasLine || hasColumns);
        }

        return requiredCondition && other;
    }
    public void errorsNewComponent(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());

        if(hasCheckbox || hasRadius || hasCombo){
            if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
            if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        }
        else if(hasAreaText){
            if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        }
        else {
            if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
            if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
            if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        }
    }

    public boolean validateUpdateComponent(){
        boolean requiredCondition = hasId && hasTrivia && hasIndex;
        boolean possibleCondition = hasClass || hasVisibleText || hasAnswer;
        boolean other = !(hasUser || hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic ||
                hasClass || hasVisibleText || hasOptions ||
                hasLine || hasColumns);
        return requiredCondition && possibleCondition && other;
    }
    public void errorsUpdateComponent(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());

        if(hasCheckbox || hasRadius || hasCombo){
            if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
            if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        }
        else if(hasAreaText){
            if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        }
        else {
            if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
            if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
            if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        }
    }

    public boolean validateDeleteComponent(){
        boolean requiredCondition = hasId && hasTrivia;
        boolean other = !(hasUser || hasPassword || hasName || hasInstitution || hasCreateDate ||
                hasOldUser || hasNewUser || hasNewPassword  || hasUpdateDate ||
                hasIdTrivia || hasQuestionTime || hasCreateUser || hasTopic ||
                hasClass || hasIndex || hasVisibleText || hasOptions ||
                hasLine || hasColumns || hasAnswer);
        return requiredCondition && other;
    }
    public void errorsDeleteComponent(HashMap<Integer, Parameter> parameters){
        if(hasUser) addPError(Parameter.TYPES[Parameter.USER], parameters.get(Parameter.USER).getLine(), parameters.get(Parameter.USER).getColumn());
        if(hasPassword) addPError(Parameter.TYPES[Parameter.PASSWORD], parameters.get(Parameter.PASSWORD).getLine(), parameters.get(Parameter.PASSWORD).getColumn());
        if(hasName) addPError(Parameter.TYPES[Parameter.NAME], parameters.get(Parameter.NAME).getLine(), parameters.get(Parameter.NAME).getColumn());
        if(hasInstitution) addPError(Parameter.TYPES[Parameter.INSTITUTION], parameters.get(Parameter.INSTITUTION).getLine(), parameters.get(Parameter.INSTITUTION).getColumn());
        if(hasCreateDate) addPError(Parameter.TYPES[Parameter.CREATE_DATE], parameters.get(Parameter.CREATE_DATE).getLine(), parameters.get(Parameter.CREATE_DATE).getColumn());
        if(hasOldUser) addPError(Parameter.TYPES[Parameter.OLD_USER], parameters.get(Parameter.OLD_USER).getLine(), parameters.get(Parameter.OLD_USER).getColumn());
        if(hasNewUser) addPError(Parameter.TYPES[Parameter.NEW_USER], parameters.get(Parameter.NEW_USER).getLine(), parameters.get(Parameter.NEW_USER).getColumn());
        if(hasNewPassword) addPError(Parameter.TYPES[Parameter.NEW_PASSWORD], parameters.get(Parameter.NEW_PASSWORD).getLine(), parameters.get(Parameter.NEW_PASSWORD).getColumn());
        if(hasUpdateDate) addPError(Parameter.TYPES[Parameter.UPDATE_DATE], parameters.get(Parameter.UPDATE_DATE).getLine(), parameters.get(Parameter.UPDATE_DATE).getColumn());
        if(hasIdTrivia) addPError(Parameter.TYPES[Parameter.ID_TRIVIA], parameters.get(Parameter.ID_TRIVIA).getLine(), parameters.get(Parameter.ID_TRIVIA).getColumn());
        if(hasQuestionTime) addPError(Parameter.TYPES[Parameter.QUESTION_TIME], parameters.get(Parameter.QUESTION_TIME).getLine(), parameters.get(Parameter.QUESTION_TIME).getColumn());
        if(hasCreateUser) addPError(Parameter.TYPES[Parameter.CREATE_USER], parameters.get(Parameter.CREATE_USER).getLine(), parameters.get(Parameter.CREATE_USER).getColumn());
        if(hasTopic) addPError(Parameter.TYPES[Parameter.TOPIC], parameters.get(Parameter.TOPIC).getLine(), parameters.get(Parameter.TOPIC).getColumn());
        if(hasClass) addPError(Parameter.TYPES[Parameter.CLASS], parameters.get(Parameter.CLASS).getLine(), parameters.get(Parameter.CLASS).getColumn());
        if(hasIndex) addPError(Parameter.TYPES[Parameter.INDEX], parameters.get(Parameter.INDEX).getLine(), parameters.get(Parameter.INDEX).getColumn());
        if(hasVisibleText) addPError(Parameter.TYPES[Parameter.VISIBLE_TEXT], parameters.get(Parameter.VISIBLE_TEXT).getLine(), parameters.get(Parameter.VISIBLE_TEXT).getColumn());
        if(hasOptions) addPError(Parameter.TYPES[Parameter.OPTIONS], parameters.get(Parameter.OPTIONS).getLine(), parameters.get(Parameter.OPTIONS).getColumn());
        if(hasLine) addPError(Parameter.TYPES[Parameter.LINE], parameters.get(Parameter.LINE).getLine(), parameters.get(Parameter.LINE).getColumn());
        if(hasColumns) addPError(Parameter.TYPES[Parameter.COLUMNS], parameters.get(Parameter.COLUMNS).getLine(), parameters.get(Parameter.COLUMNS).getColumn());
        if(hasAnswer) addPError(Parameter.TYPES[Parameter.ANSWER], parameters.get(Parameter.ANSWER).getLine(), parameters.get(Parameter.ANSWER).getColumn());

    }

    public RequestParser(RequestLexer lex) {
        super(lex);
        resetBooleans();
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        HashMap<String, String> symbolNames = Validate.getSymbolNames();
        List<Integer> tokens = expected_token_ids();
        String des = "Se esperaba: ";
        for(Integer i : tokens) {
            String fromId = symbl_name_from_id(i);
            String symbolName = symbolNames.get(fromId);
            if(symbolName != null){
                des += "'"+symbolName+ "' o ";
            }
            else{
                if(!fromId.equals("error") && !fromId.equals("EOF")){
                    des += fromId +" o ";
                }
            }
        }
        if(des.length() > 3) des = des.substring(0, des.length() - 3);
        addError(lexeme, line, col, des);
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        HashMap<String, String> symbolNames = Validate.getSymbolNames();
        List<Integer> tokens = expected_token_ids();
        String des = "Se esperaba: ";
        for(Integer i : tokens) {
            String fromId = symbl_name_from_id(i);
            String symbolName = symbolNames.get(fromId);
            if(symbolName != null){
                des += "'"+symbolName+ "' o ";
            }
            else{
                if(!fromId.equals("error") && !fromId.equals("EOF")){
                    des += fromId +" o ";
                }
            }
        }
        if(des.length() > 3) des = des.substring(0, des.length() - 3);
        addError(lexeme, line, col, des);
    }

    private void addError(String lexeme, int line, int col, String description){
        ErrorsLP.addError(lexeme, line, col, "Error Sintáctico", description);
    }

    private void addParameterError(String type, int line, int col){
        addError(type, line, col, "Parametro " + type + " duplicado");
    }
    private void addPError(String type, int line, int col){
        addError(type, line, col, "Parametro " + type + " no esperado");
    }
    protected int error_sync_size() {
            return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$RequestParser$actions {
  private final RequestParser parser;

  /** Constructor */
  CUP$RequestParser$actions(RequestParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$RequestParser$do_action_part00000000(
    int                        CUP$RequestParser$act_num,
    java_cup.runtime.lr_parser CUP$RequestParser$parser,
    java.util.Stack            CUP$RequestParser$stack,
    int                        CUP$RequestParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RequestParser$result;

      /* select the action based on the action number */
      switch (CUP$RequestParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		RESULT = start_val;
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RequestParser$parser.done_parsing();
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= xson_label requests 
            {
              Object RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		ArrayList<RequestXSON> rs = (ArrayList<RequestXSON>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
    requests = rs;
    
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= xson_label request 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON< ? > r = (RequestXSON< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
    requests = new ArrayList<>();
    requests.add(r);

    
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // requests ::= open_requests requestP close_requests 
            {
              ArrayList<RequestXSON> RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		ArrayList<RequestXSON> rs = (ArrayList<RequestXSON>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		 RESULT = rs; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("requests",49, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // requestP ::= request 
            {
              ArrayList<RequestXSON> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON< ? > r = (RequestXSON< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            ArrayList<RequestXSON> rs = new ArrayList<>();
            rs.add(r);
            RESULT = rs;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("requestP",48, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // requestP ::= requestP request 
            {
              ArrayList<RequestXSON> RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		ArrayList<RequestXSON> rs = (ArrayList<RequestXSON>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON< ? > r = (RequestXSON< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            rs.add(r);
            RESULT = rs;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("requestP",48, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // request ::= new_user_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<User> r = (RequestXSON<User>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // request ::= new_trivia_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<Trivia> r = (RequestXSON<Trivia>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // request ::= new_component_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<Component> r = (RequestXSON<Component>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // request ::= update_user_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<User> r = (RequestXSON<User>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // request ::= update_trivia_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<Trivia> r = (RequestXSON<Trivia>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // request ::= update_component_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<Component> r = (RequestXSON<Component>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // request ::= delete_user_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<User> r = (RequestXSON<User>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // request ::= delete_trivia_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<Trivia> r = (RequestXSON<Trivia>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // request ::= delete_component_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<Component> r = (RequestXSON<Component>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // request ::= login_request 
            {
              RequestXSON< ? > RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		RequestXSON<User> r = (RequestXSON<User>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 resetBooleans(); RESULT = r; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("request",47, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // xson_label ::= LT QM XSON VERSION EQUAL Q ONE Q QM GT 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("xson_label",1, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-9)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // open_requests ::= LT EX REALIZAR_SOLICITUDES GT 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("open_requests",4, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // close_requests ::= LT EX FIN_SOLICITUDES_REALIZADA GT 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("close_requests",5, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // open_request ::= LT EX REALIZAR_SOLICITUD COLON 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("open_request",2, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // close_request ::= LT FIN_SOLICITUD_REALIZADA EX GT 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("close_request",3, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // new_user_request ::= open_request Q USUARIO_NUEVO Q GT data_user close_request 
            {
              RequestXSON<User> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                User u = new User();
                if(validateNewUser()){
                    u.setNewUser(d, hasCreateDate);
                }
                else errorsNewUser(d);
                RequestXSON<User> r = new RequestXSON<>(u, RequestXSON.USUARIO_NUEVO);
                RESULT = r;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("new_user_request",37, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // open_user_data ::= LBRACE Q DATOS_USUARIO Q COLON LBRACKET LBRACE 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("open_user_data",6, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // close_data ::= RBRACE RBRACKET RBRACE 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("close_data",7, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // data_user ::= open_user_data data close_data 
            {
              HashMap<Integer,Parameter> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		 RESULT = d; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("data_user",34, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // update_user_request ::= open_request Q MODIFICAR_USUARIO Q GT data_user close_request 
            {
              RequestXSON<User> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                User u = new User();
                String us = "";
                if(validateUpdateUser()){
                    u.setUpdateUser(d, hasNewUser, hasNewPassword, hasInstitution);
                    us = (String) d.get(Parameter.OLD_USER).getParameter();
                }
                else errorsUpdateUser(d);

                RequestXSON<User> r = new RequestXSON<>(us, u, RequestXSON.MODIFICAR_USUARIO);
                RESULT = r;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("update_user_request",38, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // delete_user_request ::= open_request Q ELIMINAR_USUARIO Q GT data_user close_request 
            {
              RequestXSON<User> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                String u = "";
                if(validateDeleteUser()) u = (String) d.get(Parameter.USER).getParameter();
                else errorsDeleteUser(d);

                RequestXSON<User> r = new RequestXSON<>(u, RequestXSON.ELIMINAR_USUARIO);
                RESULT = r;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("delete_user_request",39, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // login_request ::= open_request Q LOGIN_USUARIO Q GT data_user close_request 
            {
              RequestXSON<User> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                User u = new User();
                if(validateLogin()){
                    u.setLogin(d);
                }
                else errorsLogin(d);

                RequestXSON<User> r = new RequestXSON<>(u, RequestXSON.LOGIN_USUARIO);
                RESULT = r;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("login_request",40, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // open_trivia_data ::= LBRACE Q PARAMETROS_TRIVIA Q COLON LBRACKET LBRACE 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("open_trivia_data",8, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // new_trivia_request ::= open_request Q NUEVA_TRIVIA Q GT data_trivia close_request 
            {
              RequestXSON<Trivia> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                    Trivia t = new Trivia();
                    if(validateNewTrivia()){
                        t.setNewTrivia(d, hasCreateUser, hasCreateDate);
                    }
                    else errorsNewTrivia(d);

                    RequestXSON<Trivia> r = new RequestXSON<>(t, RequestXSON.NUEVA_TRIVIA);
                    RESULT = r;
                    
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("new_trivia_request",41, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // data_trivia ::= open_trivia_data data close_data 
            {
              HashMap<Integer,Parameter> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		 RESULT = d; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("data_trivia",35, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // update_trivia_request ::= open_request Q MODIFICAR_TRIVIA Q GT data_trivia close_request 
            {
              RequestXSON<Trivia> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                        Trivia t = new Trivia();
                        if(validateUpdateTrivia()){
                            t.setUpdateTrivia(d, hasQuestionTime, hasName, hasTopic);
                        }
                        else errorsUpdateTrivia(d);

                        RequestXSON<Trivia> r = new RequestXSON<>(t, RequestXSON.MODIFICAR_TRIVIA);
                        RESULT = r;
                        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("update_trivia_request",42, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // delete_trivia_request ::= open_request Q ELIMINAR_TRIVIA Q GT data_trivia close_request 
            {
              RequestXSON<Trivia> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                        String s = "";
                        if(validateDeleteTrivia()) s = (String) d.get(Parameter.ID_TRIVIA).getParameter();

                        else errorsDeleteTrivia(d);

                        RequestXSON<Trivia> r = new RequestXSON<>(s, RequestXSON.ELIMINAR_TRIVIA);
                        RESULT = r;
                        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("delete_trivia_request",43, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // open_component_data ::= LBRACE Q PARAMETROS_COMPONENTE Q COLON LBRACKET LBRACE 
            {
              Object RESULT =null;

              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("open_component_data",9, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // new_component_request ::= open_request Q AGREGAR_COMPONENTE Q GT data_component close_request 
            {
              RequestXSON<Component> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                        Component c = new Component();
                        if(validateNewComponent()){
                            c.setNewComponent(d, hasOptions,  hasLine, hasColumns);
                        }
                        else errorsNewComponent(d);

                        RequestXSON<Component> r = new RequestXSON<>(c, RequestXSON.AGREGAR_COMPONENTE);
                        RESULT = r;
                        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("new_component_request",44, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // data_component ::= open_component_data data close_data 
            {
              HashMap<Integer,Parameter> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		 RESULT = d; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("data_component",36, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // update_component_request ::= open_request Q MODIFICAR_COMPONENTE Q GT data_component close_request 
            {
              RequestXSON<Component> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                            Component c = new Component();
                            if(validateUpdateComponent()){
                                c.setUpdateComponent(d, hasClass, hasVisibleText, hasAnswer, hasOptions,  hasLine, hasColumns);
                            }
                            else errorsUpdateComponent(d);

                            RequestXSON<Component> r = new RequestXSON<>(c, RequestXSON.MODIFICAR_COMPONENTE);
                            RESULT = r;
                            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("update_component_request",45, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // delete_component_request ::= open_request Q ELIMINAR_COMPONENTE Q GT data_component close_request 
            {
              RequestXSON<Component> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
                            String s = "";
                            String s2 = "";
                            if(validateDeleteComponent()) {
                                s = (String) d.get(Parameter.ID).getParameter();
                                s2 = (String) d.get(Parameter.TRIVIA).getParameter();

                            }

                            else errorsDeleteComponent(d);

                            RequestXSON<Component> r = new RequestXSON<>(s, s2, RequestXSON.ELIMINAR_COMPONENTE);
                            RESULT = r;
                            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("delete_component_request",46, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // data ::= parameter 
            {
              HashMap<Integer,Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter< ? > p = (Parameter< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
        HashMap<Integer, Parameter> parameters = new HashMap<>();
        parameters.put(p.getType(), p);
        RESULT = parameters;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("data",33, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // data ::= data COMMA parameter 
            {
              HashMap<Integer,Parameter> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		HashMap<Integer,Parameter> d = (HashMap<Integer,Parameter>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter< ? > p = (Parameter< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
        d.put(p.getType(), p);
        RESULT = d;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("data",33, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameter ::= user 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasUser) hasUser = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameter ::= password 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasPassword) hasPassword = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameter ::= name 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasName) hasName = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameter ::= institution 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasInstitution) hasInstitution = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameter ::= create_date 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasCreateDate) hasCreateDate = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameter ::= old_user 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasOldUser) hasOldUser = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameter ::= new_user 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasNewUser) hasNewUser = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parameter ::= new_password 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasNewPassword) hasNewPassword = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parameter ::= update_date 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasUpdateDate) hasUpdateDate = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parameter ::= id_trivia 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasIdTrivia) hasIdTrivia = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parameter ::= question_time 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<Integer> p = (Parameter<Integer>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasQuestionTime) hasQuestionTime = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parameter ::= create_user 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasCreateUser) hasCreateUser = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parameter ::= topic 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasTopic) hasTopic = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parameter ::= id 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasId) hasId = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // parameter ::= trivia 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasTrivia) hasTrivia = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parameter ::= clase 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<Integer> p = (Parameter<Integer>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasClass) hasClass = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parameter ::= index 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<Integer> p = (Parameter<Integer>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasIndex) hasIndex = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parameter ::= visible_text 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<String> p = (Parameter<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasVisibleText) hasVisibleText = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parameter ::= options 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter< ? > p = (Parameter< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasOptions) hasOptions = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parameter ::= line 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<Integer> p = (Parameter<Integer>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasLine) hasLine = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parameter ::= columns 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter<Integer> p = (Parameter<Integer>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasColumns) hasColumns = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parameter ::= answer 
            {
              Parameter< ? > RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Parameter< ? > p = (Parameter< ? >)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
            if(!hasAnswer) hasAnswer = true;
            else addParameterError(p.getTypeStr(), pleft, pright);
            RESULT = p;
            
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // user ::= Q USUARIO Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.USER, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("user",11, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // password ::= Q PASSWORD Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.PASSWORD, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("password",12, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // name ::= Q NOMBRE Q COLON Q string_contentP Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.NAME, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("name",13, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // institution ::= Q INSTITUCION Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.INSTITUTION, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("institution",14, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // create_date ::= Q FECHA_CREACION Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.CREATE_DATE, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("create_date",15, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // old_user ::= Q USUARIO_ANTIGUO Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.OLD_USER, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("old_user",16, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // new_user ::= Q USUARIO_NUEVO Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.NEW_USER, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("new_user",17, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // new_password ::= Q NUEVO_PASSWORD Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.NEW_PASSWORD, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("new_password",18, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // update_date ::= Q FECHA_MODIFICACION Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.UPDATE_DATE, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("update_date",19, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // id_trivia ::= Q ID_TRIVIA Q COLON Q IDENTIFIER Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.ID_TRIVIA, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("id_trivia",20, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // question_time ::= Q TIEMPO_PREGUNTA Q COLON DIGIT 
            {
              Parameter<Integer> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
        Parameter<Integer> p = new Parameter<>(Integer.parseInt(d), Parameter.QUESTION_TIME, dleft, dright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("question_time",28, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-4)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // create_user ::= Q USUARIO_CREACION Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.CREATE_USER, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("create_user",21, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // topic ::= Q TEMA Q COLON Q string_content Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.TOPIC, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("topic",22, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // id ::= Q ID Q COLON Q IDENTIFIER Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.ID, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("id",23, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // trivia ::= Q TRIVIA Q COLON Q IDENTIFIER Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.TRIVIA, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("trivia",24, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // clase ::= Q CLASE Q COLON Q clase_content Q 
            {
              Parameter<Integer> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		Integer st = (Integer)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<Integer> p = new Parameter<>(st, Parameter.CLASS, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("clase",29, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // index ::= Q INDICE Q COLON Q DIGIT Q 
            {
              Parameter<Integer> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<Integer> p = new Parameter<>(Integer.parseInt(d), Parameter.INDEX, dleft, dright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("index",30, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // visible_text ::= Q TEXTO_VISIBLE Q COLON Q string_contentP Q 
            {
              Parameter<String> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<String> p = new Parameter<>(st, Parameter.VISIBLE_TEXT, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("visible_text",25, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // options ::= Q OPCIONES Q COLON Q multiple_string Q 
            {
              Parameter< ? > RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		ArrayList<String> st = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<ArrayList<String>> p = new Parameter<>(st, Parameter.OPTIONS, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("options",26, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // line ::= Q FILAS Q COLON Q DIGIT Q 
            {
              Parameter<Integer> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<Integer> p = new Parameter<>(Integer.parseInt(d), Parameter.LINE, dleft, dright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("line",31, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // columns ::= Q COLUMNAS Q COLON Q DIGIT Q 
            {
              Parameter<Integer> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<Integer> p = new Parameter<>(Integer.parseInt(d), Parameter.COLUMNS, dleft, dright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("columns",32, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // answer ::= Q RESPUESTA Q COLON Q multiple_string Q 
            {
              Parameter< ? > RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		ArrayList<String> st = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		
        Parameter<ArrayList<String>> p = new Parameter<>(st, Parameter.ANSWER, stleft, stright);
        RESULT = p;
        
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("answer",27, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // clase_content ::= CAMPO_TEXTO 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                if(!hasTextC) hasTextC = true;
                RESULT = Component.CAMPO_TEXTO;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("clase_content",50, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // clase_content ::= AREA_TEXTO 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                if(!hasAreaText) hasAreaText = true;
                RESULT = Component.AREA_TEXTO;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("clase_content",50, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // clase_content ::= CHECKBOX 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                if(!hasCheckbox) hasCheckbox = true;
                RESULT = Component.CHECKBOX;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("clase_content",50, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // clase_content ::= RADIO 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                if(!hasRadius) hasRadius = true;
                RESULT = Component.RADIO;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("clase_content",50, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // clase_content ::= FICHERO 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                if(!hasFile) hasFile = true;
                RESULT = Component.FICHERO;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("clase_content",50, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // clase_content ::= COMBO 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                if(!hasCombo) hasCombo = true;
                RESULT = Component.COMBO;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("clase_content",50, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // multiple_string ::= string_contentP 
            {
              ArrayList<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                ArrayList<String> op = new ArrayList<>();
                op.add(s);
                RESULT = op;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("multiple_string",53, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // multiple_string ::= multiple_string VERTICAL_BAR string_contentP 
            {
              ArrayList<String> RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).right;
		ArrayList<String> op = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		
                op.add(s);
                RESULT = op;
                
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("multiple_string",53, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // string_contentP ::= string_content 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		 RESULT = s;
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_contentP",52, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // string_contentP ::= string_contentP string_content 
            {
              String RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s1 + " " + s2; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_contentP",52, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.elementAt(CUP$RequestParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // string_content ::= STRINGCONTENT 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_content",51, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // string_content ::= IDENTIFIER 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_content",51, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // string_content ::= DIGIT 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_content",51, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // string_content ::= NOMBRE 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_content",51, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // string_content ::= COLON 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_content",51, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // string_content ::= COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_content",51, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // string_content ::= QM 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$RequestParser$stack.peek()).value;
		RESULT = s; 
              CUP$RequestParser$result = parser.getSymbolFactory().newSymbol("string_content",51, ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestParser$stack.peek()), RESULT);
            }
          return CUP$RequestParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$RequestParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$RequestParser$do_action(
    int                        CUP$RequestParser$act_num,
    java_cup.runtime.lr_parser CUP$RequestParser$parser,
    java.util.Stack            CUP$RequestParser$stack,
    int                        CUP$RequestParser$top)
    throws java.lang.Exception
    {
              return CUP$RequestParser$do_action_part00000000(
                               CUP$RequestParser$act_num,
                               CUP$RequestParser$parser,
                               CUP$RequestParser$stack,
                               CUP$RequestParser$top);
    }
}

}
