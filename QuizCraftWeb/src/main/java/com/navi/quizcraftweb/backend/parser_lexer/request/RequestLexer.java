// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: RequestLexer.flex

package com.navi.quizcraftweb.backend.parser_lexer.request;
import java_cup.runtime.*;
import static com.navi.quizcraftweb.backend.parser_lexer.request.sym.*;
import com.navi.quizcraftweb.backend.parser_lexer.*;

@SuppressWarnings("fallthrough")
public class RequestLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\0\1\6\7\0\1\7\1\6\1\10"+
    "\1\0\1\11\1\12\10\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\0\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\33\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\33\1\51\1\52\1\0\1\53"+
    "\1\54\1\55\1\0\1\56\1\33\1\57\1\60\1\61"+
    "\1\62\2\33\1\63\2\33\1\64\1\33\1\65\1\66"+
    "\2\33\1\67\1\70\1\71\1\72\1\73\1\33\1\74"+
    "\1\33\1\51\1\75\1\76\1\77\43\0\1\54\10\0"+
    "\1\54\1\0\1\54\3\0\1\54\4\0\1\54\4\0"+
    "\1\54\4\0\30\54\1\0\37\54\1\0\u01ca\54\4\0"+
    "\14\54\16\0\5\54\7\0\1\54\1\0\1\54\21\0"+
    "\165\54\1\0\2\54\2\0\4\54\1\0\1\54\6\0"+
    "\1\54\1\0\3\54\1\0\1\54\1\0\24\54\1\0"+
    "\123\54\1\0\213\54\1\0\255\54\1\0\46\54\2\0"+
    "\1\54\6\0\51\54\10\0\55\54\1\0\1\54\1\0"+
    "\2\54\1\0\2\54\1\0\1\54\10\0\33\54\4\0"+
    "\4\54\35\0\13\54\5\0\112\54\4\0\146\54\1\0"+
    "\10\54\2\0\12\54\1\0\23\54\2\0\1\54\20\0"+
    "\73\54\2\0\145\54\16\0\66\54\4\0\1\54\2\0"+
    "\1\54\2\0\56\54\22\0\34\54\4\0\13\54\65\0"+
    "\25\54\1\0\10\54\25\0\17\54\1\0\201\54\2\0"+
    "\12\54\1\0\23\54\1\0\10\54\2\0\2\54\2\0"+
    "\26\54\1\0\7\54\1\0\1\54\3\0\4\54\2\0"+
    "\11\54\2\0\2\54\2\0\4\54\10\0\1\54\4\0"+
    "\2\54\1\0\5\54\2\0\14\54\12\0\1\54\1\0"+
    "\1\54\2\0\3\54\1\0\6\54\4\0\2\54\2\0"+
    "\26\54\1\0\7\54\1\0\2\54\1\0\2\54\1\0"+
    "\2\54\2\0\1\54\1\0\5\54\4\0\2\54\2\0"+
    "\3\54\3\0\1\54\7\0\4\54\1\0\1\54\7\0"+
    "\20\54\13\0\3\54\1\0\11\54\1\0\3\54\1\0"+
    "\26\54\1\0\7\54\1\0\2\54\1\0\5\54\2\0"+
    "\12\54\1\0\3\54\1\0\3\54\2\0\1\54\17\0"+
    "\4\54\2\0\12\54\11\0\7\54\1\0\3\54\1\0"+
    "\10\54\2\0\2\54\2\0\26\54\1\0\7\54\1\0"+
    "\2\54\1\0\5\54\2\0\11\54\2\0\2\54\2\0"+
    "\3\54\10\0\2\54\4\0\2\54\1\0\5\54\2\0"+
    "\12\54\1\0\1\54\20\0\2\54\1\0\6\54\3\0"+
    "\3\54\1\0\4\54\3\0\2\54\1\0\1\54\1\0"+
    "\2\54\3\0\2\54\3\0\3\54\3\0\14\54\4\0"+
    "\5\54\3\0\3\54\1\0\4\54\2\0\1\54\6\0"+
    "\1\54\16\0\12\54\20\0\15\54\1\0\3\54\1\0"+
    "\27\54\1\0\20\54\3\0\10\54\1\0\3\54\1\0"+
    "\4\54\7\0\2\54\1\0\3\54\5\0\4\54\2\0"+
    "\12\54\20\0\4\54\1\0\10\54\1\0\3\54\1\0"+
    "\27\54\1\0\12\54\1\0\5\54\2\0\11\54\1\0"+
    "\3\54\1\0\4\54\7\0\2\54\7\0\1\54\1\0"+
    "\4\54\2\0\12\54\1\0\2\54\15\0\4\54\1\0"+
    "\10\54\1\0\3\54\1\0\63\54\1\0\3\54\1\0"+
    "\5\54\5\0\4\54\7\0\5\54\2\0\12\54\12\0"+
    "\6\54\2\0\2\54\1\0\22\54\3\0\30\54\1\0"+
    "\11\54\1\0\1\54\2\0\7\54\3\0\1\54\4\0"+
    "\6\54\1\0\1\54\1\0\10\54\6\0\12\54\2\0"+
    "\2\54\15\0\72\54\5\0\17\54\1\0\12\54\47\0"+
    "\2\54\1\0\1\54\1\0\5\54\1\0\30\54\1\0"+
    "\1\54\1\0\27\54\2\0\5\54\1\0\1\54\1\0"+
    "\6\54\2\0\12\54\2\0\4\54\40\0\1\54\27\0"+
    "\2\54\6\0\12\54\13\0\1\54\1\0\1\54\1\0"+
    "\1\54\4\0\12\54\1\0\44\54\4\0\24\54\1\0"+
    "\22\54\1\0\44\54\11\0\1\54\71\0\112\54\6\0"+
    "\116\54\2\0\46\54\1\0\1\54\5\0\1\54\2\0"+
    "\53\54\1\0\115\54\1\0\4\54\2\0\7\54\1\0"+
    "\1\54\1\0\4\54\2\0\51\54\1\0\4\54\2\0"+
    "\41\54\1\0\4\54\2\0\7\54\1\0\1\54\1\0"+
    "\4\54\2\0\17\54\1\0\71\54\1\0\4\54\2\0"+
    "\103\54\2\0\3\54\40\0\20\54\20\0\126\54\2\0"+
    "\6\54\3\0\u016c\54\2\0\21\54\1\0\32\54\5\0"+
    "\113\54\3\0\13\54\7\0\15\54\1\0\7\54\13\0"+
    "\25\54\13\0\24\54\14\0\15\54\1\0\3\54\1\0"+
    "\2\54\14\0\124\54\3\0\1\54\4\0\2\54\2\0"+
    "\12\54\41\0\3\54\2\0\12\54\6\0\131\54\7\0"+
    "\53\54\5\0\106\54\12\0\37\54\1\0\14\54\4\0"+
    "\14\54\12\0\50\54\2\0\5\54\13\0\54\54\4\0"+
    "\32\54\6\0\12\54\46\0\34\54\4\0\77\54\1\0"+
    "\35\54\2\0\13\54\6\0\12\54\15\0\1\54\10\0"+
    "\17\54\101\0\114\54\4\0\12\54\21\0\11\54\14\0"+
    "\164\54\14\0\70\54\10\0\12\54\3\0\61\54\2\0"+
    "\11\54\7\0\53\54\2\0\3\54\20\0\3\54\1\0"+
    "\47\54\5\0\372\54\1\0\33\54\2\0\6\54\2\0"+
    "\46\54\2\0\6\54\2\0\10\54\1\0\1\54\1\0"+
    "\1\54\1\0\1\54\1\0\37\54\2\0\65\54\1\0"+
    "\7\54\1\0\1\54\3\0\3\54\1\0\7\54\3\0"+
    "\4\54\2\0\6\54\4\0\15\54\5\0\3\54\1\0"+
    "\7\54\102\0\2\54\23\0\1\54\34\0\1\54\15\0"+
    "\1\54\20\0\15\54\63\0\41\54\21\0\1\54\4\0"+
    "\1\54\2\0\12\54\1\0\1\54\3\0\5\54\6\0"+
    "\1\54\1\0\1\54\1\0\1\54\1\0\4\54\1\0"+
    "\13\54\2\0\4\54\5\0\5\54\4\0\1\54\21\0"+
    "\51\54\u022d\0\64\54\26\0\57\54\1\0\57\54\1\0"+
    "\205\54\6\0\11\54\14\0\46\54\1\0\1\54\5\0"+
    "\1\54\2\0\70\54\7\0\1\54\17\0\30\54\11\0"+
    "\7\54\1\0\7\54\1\0\7\54\1\0\7\54\1\0"+
    "\7\54\1\0\7\54\1\0\7\54\1\0\7\54\1\0"+
    "\40\54\57\0\1\54\325\0\3\54\31\0\17\54\1\0"+
    "\5\54\2\0\5\54\4\0\126\54\2\0\2\54\2\0"+
    "\3\54\1\0\132\54\1\0\4\54\5\0\53\54\1\0"+
    "\136\54\21\0\33\54\65\0\306\54\112\0\360\54\20\0"+
    "\215\54\103\0\56\54\2\0\15\54\3\0\34\54\24\0"+
    "\63\54\1\0\12\54\1\0\163\54\45\0\11\54\2\0"+
    "\147\54\2\0\65\54\2\0\5\54\60\0\61\54\30\0"+
    "\64\54\14\0\106\54\12\0\12\54\6\0\30\54\3\0"+
    "\1\54\1\0\61\54\2\0\44\54\14\0\35\54\3\0"+
    "\101\54\16\0\13\54\6\0\37\54\1\0\67\54\11\0"+
    "\16\54\2\0\12\54\6\0\27\54\3\0\111\54\30\0"+
    "\3\54\2\0\20\54\2\0\5\54\12\0\6\54\2\0"+
    "\6\54\2\0\6\54\11\0\7\54\1\0\7\54\1\0"+
    "\53\54\1\0\14\54\10\0\173\54\1\0\2\54\2\0"+
    "\12\54\6\0\244\54\14\0\27\54\4\0\61\54\4\0"+
    "\156\54\2\0\152\54\46\0\7\54\14\0\5\54\5\0"+
    "\14\54\1\0\15\54\1\0\5\54\1\0\1\54\1\0"+
    "\2\54\1\0\2\54\1\0\154\54\41\0\153\54\22\0"+
    "\100\54\2\0\66\54\50\0\14\54\4\0\20\54\20\0"+
    "\20\54\3\0\2\54\30\0\3\54\40\0\5\54\1\0"+
    "\207\54\23\0\12\54\7\0\32\54\4\0\1\54\1\0"+
    "\32\54\13\0\131\54\3\0\6\54\2\0\6\54\2\0"+
    "\6\54\2\0\3\54\43\0\14\54\1\0\32\54\1\0"+
    "\23\54\1\0\2\54\1\0\17\54\2\0\16\54\42\0"+
    "\173\54\105\0\65\54\210\0\1\54\202\0\35\54\3\0"+
    "\61\54\17\0\1\54\37\0\40\54\15\0\36\54\5\0"+
    "\53\54\5\0\36\54\2\0\44\54\4\0\10\54\1\0"+
    "\5\54\52\0\236\54\2\0\12\54\6\0\44\54\4\0"+
    "\44\54\4\0\50\54\10\0\64\54\234\0\67\54\11\0"+
    "\26\54\12\0\10\54\230\0\6\54\2\0\1\54\1\0"+
    "\54\54\1\0\2\54\3\0\1\54\2\0\27\54\12\0"+
    "\27\54\11\0\37\54\101\0\23\54\1\0\2\54\12\0"+
    "\26\54\12\0\32\54\106\0\70\54\6\0\2\54\100\0"+
    "\4\54\1\0\2\54\5\0\10\54\1\0\3\54\1\0"+
    "\35\54\2\0\3\54\4\0\1\54\40\0\35\54\3\0"+
    "\35\54\43\0\10\54\1\0\36\54\31\0\66\54\12\0"+
    "\26\54\12\0\23\54\15\0\22\54\156\0\111\54\67\0"+
    "\63\54\15\0\63\54\15\0\50\54\10\0\12\54\306\0"+
    "\35\54\12\0\1\54\10\0\41\54\217\0\27\54\11\0"+
    "\107\54\37\0\12\54\17\0\74\54\25\0\31\54\7\0"+
    "\12\54\6\0\65\54\1\0\12\54\4\0\3\54\11\0"+
    "\44\54\2\0\1\54\11\0\105\54\4\0\4\54\3\0"+
    "\13\54\1\0\1\54\43\0\22\54\1\0\45\54\6\0"+
    "\1\54\101\0\7\54\1\0\1\54\1\0\4\54\1\0"+
    "\17\54\1\0\12\54\7\0\73\54\5\0\12\54\6\0"+
    "\4\54\1\0\10\54\2\0\2\54\2\0\26\54\1\0"+
    "\7\54\1\0\2\54\1\0\5\54\1\0\12\54\2\0"+
    "\2\54\2\0\3\54\2\0\1\54\6\0\1\54\5\0"+
    "\7\54\2\0\7\54\3\0\5\54\213\0\113\54\5\0"+
    "\12\54\4\0\2\54\40\0\106\54\1\0\1\54\10\0"+
    "\12\54\246\0\66\54\2\0\11\54\27\0\6\54\42\0"+
    "\101\54\3\0\1\54\13\0\12\54\46\0\71\54\7\0"+
    "\12\54\66\0\33\54\2\0\17\54\4\0\12\54\306\0"+
    "\73\54\145\0\112\54\25\0\1\54\240\0\10\54\2\0"+
    "\56\54\2\0\10\54\1\0\2\54\33\0\77\54\10\0"+
    "\1\54\10\0\112\54\3\0\1\54\42\0\71\54\7\0"+
    "\11\54\1\0\55\54\1\0\11\54\17\0\12\54\30\0"+
    "\36\54\2\0\26\54\1\0\16\54\111\0\7\54\1\0"+
    "\2\54\1\0\54\54\3\0\1\54\1\0\2\54\1\0"+
    "\11\54\10\0\12\54\6\0\6\54\1\0\2\54\1\0"+
    "\45\54\1\0\2\54\1\0\6\54\7\0\12\54\u0136\0"+
    "\27\54\11\0\232\54\146\0\157\54\21\0\304\54\274\0"+
    "\57\54\321\0\107\54\271\0\71\54\7\0\37\54\1\0"+
    "\12\54\146\0\36\54\2\0\5\54\13\0\67\54\11\0"+
    "\4\54\14\0\12\54\11\0\25\54\5\0\23\54\260\0"+
    "\100\54\200\0\113\54\4\0\71\54\7\0\21\54\100\0"+
    "\2\54\1\0\1\54\34\0\370\54\10\0\363\54\15\0"+
    "\37\54\61\0\3\54\21\0\4\54\10\0\u018c\54\4\0"+
    "\153\54\5\0\15\54\3\0\11\54\7\0\12\54\3\0"+
    "\2\54\306\0\5\54\3\0\6\54\10\0\10\54\2\0"+
    "\7\54\36\0\4\54\224\0\3\54\273\0\125\54\1\0"+
    "\107\54\1\0\2\54\2\0\1\54\2\0\2\54\2\0"+
    "\4\54\1\0\14\54\1\0\1\54\1\0\7\54\1\0"+
    "\101\54\1\0\4\54\2\0\10\54\1\0\7\54\1\0"+
    "\34\54\1\0\4\54\1\0\5\54\1\0\1\54\3\0"+
    "\7\54\1\0\u0154\54\2\0\31\54\1\0\31\54\1\0"+
    "\37\54\1\0\31\54\1\0\37\54\1\0\31\54\1\0"+
    "\37\54\1\0\31\54\1\0\37\54\1\0\31\54\1\0"+
    "\10\54\2\0\151\54\4\0\62\54\10\0\1\54\16\0"+
    "\1\54\26\0\5\54\1\0\17\54\120\0\7\54\1\0"+
    "\21\54\2\0\7\54\1\0\2\54\1\0\5\54\325\0"+
    "\55\54\3\0\16\54\2\0\12\54\4\0\1\54\u0171\0"+
    "\72\54\6\0\305\54\13\0\7\54\51\0\114\54\4\0"+
    "\12\54\246\0\4\54\1\0\33\54\1\0\2\54\1\0"+
    "\1\54\2\0\1\54\1\0\12\54\1\0\4\54\1\0"+
    "\1\54\1\0\1\54\6\0\1\54\4\0\1\54\1\0"+
    "\1\54\1\0\1\54\1\0\3\54\1\0\2\54\1\0"+
    "\1\54\2\0\1\54\1\0\1\54\1\0\1\54\1\0"+
    "\1\54\1\0\1\54\1\0\2\54\1\0\1\54\2\0"+
    "\4\54\1\0\7\54\1\0\4\54\1\0\4\54\1\0"+
    "\1\54\1\0\12\54\1\0\21\54\5\0\3\54\1\0"+
    "\5\54\1\0\21\54\164\0\32\54\6\0\32\54\6\0"+
    "\32\54\166\0\327\54\51\0\65\54\13\0\336\54\2\0"+
    "\u0182\54\16\0\u0131\54\37\0\36\54\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\2\6"+
    "\1\7\1\10\1\11\1\12\1\13\21\14\1\15\1\16"+
    "\2\17\3\14\1\20\1\21\1\22\1\23\1\14\1\0"+
    "\15\14\1\24\22\14\1\23\1\25\17\14\1\17\25\14"+
    "\1\17\15\14\2\17\15\14\1\26\5\14\1\17\1\27"+
    "\1\17\1\14\1\17\2\14\1\30\1\14\1\31\5\14"+
    "\1\32\2\17\13\14\1\33\7\14\2\17\1\14\2\17"+
    "\2\14\1\17\1\14\1\34\1\17\1\14\2\17\1\35"+
    "\1\14\1\17\1\14\1\36\2\17\3\14\1\37\2\14"+
    "\1\17\1\14\1\40\2\14\2\17\1\14\2\17\2\14"+
    "\1\17\1\14\2\17\1\41\2\17\1\14\1\17\1\14"+
    "\2\17\5\14\2\17\1\42\1\43\1\17\1\44\3\17"+
    "\1\45\1\46\1\17\1\14\4\17\1\14\1\17\1\14"+
    "\2\17\1\47\1\14\1\50\2\14\15\17\1\51\1\14"+
    "\1\17\1\14\2\17\1\14\1\17\1\52\10\17\1\53"+
    "\10\17\1\14\4\17\1\14\11\17\1\54\7\17\1\55"+
    "\16\17\1\56\14\17\1\57\6\17\1\60\4\17\1\61"+
    "\6\17\1\62\7\17\1\63\3\17\1\64\4\17\1\65"+
    "\6\17\1\66\10\17\1\67\12\17\1\70\1\71\3\17"+
    "\1\72\4\17\1\73\4\17\1\74\6\17\1\75\1\17"+
    "\1\76\1\17\1\77\1\17\1\100\4\17\1\101\1\102"+
    "\7\17\1\103\1\17\1\104\2\17\1\105\3\17\1\106"+
    "\1\17\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\100\0\200\0\100\0\100\0\300\0\100"+
    "\0\u0100\0\u0140\0\100\0\100\0\100\0\100\0\100\0\u0180"+
    "\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380"+
    "\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580"+
    "\0\100\0\100\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\100"+
    "\0\100\0\100\0\300\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800"+
    "\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00"+
    "\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0c00"+
    "\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00"+
    "\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0600\0\100\0\u0f80"+
    "\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180"+
    "\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380"+
    "\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540\0\u1580"+
    "\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780"+
    "\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980"+
    "\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80"+
    "\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80"+
    "\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\u1f80"+
    "\0\u1fc0\0\u01c0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140"+
    "\0\u01c0\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280\0\u01c0\0\u22c0"+
    "\0\u01c0\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u01c0\0\u2440"+
    "\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640"+
    "\0\u2680\0\u26c0\0\u2700\0\u2740\0\u01c0\0\u2780\0\u27c0\0\u2800"+
    "\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0\0\u2a00"+
    "\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u01c0\0\u2b80\0\u2bc0"+
    "\0\u2c00\0\u2c40\0\u01c0\0\u2c80\0\u2cc0\0\u2d00\0\u01c0\0\u2d40"+
    "\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u01c0\0\u2e80\0\u2ec0\0\u2f00"+
    "\0\u2f40\0\u01c0\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0"+
    "\0\u3100\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280\0\u01c0"+
    "\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480"+
    "\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640\0\u01c0"+
    "\0\u3680\0\u05c0\0\u36c0\0\u3700\0\u3740\0\u01c0\0\u01c0\0\u3780"+
    "\0\u37c0\0\u3800\0\u3840\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980"+
    "\0\u39c0\0\u3a00\0\u01c0\0\u3a40\0\u01c0\0\u3a80\0\u3ac0\0\u3b00"+
    "\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u3c80\0\u3cc0\0\u3d00"+
    "\0\u3d40\0\u3d80\0\u3dc0\0\u3e00\0\u05c0\0\u3e40\0\u3e80\0\u3ec0"+
    "\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u01c0\0\u4000\0\u4040\0\u4080"+
    "\0\u40c0\0\u4100\0\u4140\0\u4180\0\u41c0\0\u05c0\0\u4200\0\u4240"+
    "\0\u4280\0\u42c0\0\u4300\0\u4340\0\u4380\0\u43c0\0\u4400\0\u4440"+
    "\0\u4480\0\u44c0\0\u4500\0\u4540\0\u4580\0\u45c0\0\u4600\0\u4640"+
    "\0\u4680\0\u46c0\0\u4700\0\u4740\0\u4780\0\u05c0\0\u47c0\0\u4800"+
    "\0\u4840\0\u4880\0\u48c0\0\u4900\0\u4940\0\u01c0\0\u4980\0\u49c0"+
    "\0\u4a00\0\u4a40\0\u4a80\0\u4ac0\0\u4b00\0\u4b40\0\u4b80\0\u4bc0"+
    "\0\u4c00\0\u4c40\0\u4c80\0\u4cc0\0\u05c0\0\u4d00\0\u4d40\0\u4d80"+
    "\0\u4dc0\0\u4e00\0\u4e40\0\u4e80\0\u4ec0\0\u4f00\0\u4f40\0\u4f80"+
    "\0\u4fc0\0\u05c0\0\u5000\0\u5040\0\u5080\0\u50c0\0\u5100\0\u5140"+
    "\0\u05c0\0\u5180\0\u51c0\0\u5200\0\u5240\0\u05c0\0\u5280\0\u52c0"+
    "\0\u5300\0\u5340\0\u5380\0\u53c0\0\u05c0\0\u5400\0\u5440\0\u5480"+
    "\0\u54c0\0\u5500\0\u5540\0\u5580\0\u05c0\0\u55c0\0\u5600\0\u5640"+
    "\0\u05c0\0\u5680\0\u56c0\0\u5700\0\u5740\0\u05c0\0\u5780\0\u57c0"+
    "\0\u5800\0\u5840\0\u5880\0\u58c0\0\u05c0\0\u5900\0\u5940\0\u5980"+
    "\0\u59c0\0\u5a00\0\u5a40\0\u5a80\0\u5ac0\0\u05c0\0\u5b00\0\u5b40"+
    "\0\u5b80\0\u5bc0\0\u5c00\0\u5c40\0\u5c80\0\u5cc0\0\u5d00\0\u5d40"+
    "\0\u05c0\0\u05c0\0\u5d80\0\u5dc0\0\u5e00\0\u05c0\0\u5e40\0\u5e80"+
    "\0\u5ec0\0\u5f00\0\u05c0\0\u5f40\0\u5f80\0\u5fc0\0\u6000\0\u05c0"+
    "\0\u6040\0\u6080\0\u60c0\0\u6100\0\u6140\0\u6180\0\u05c0\0\u61c0"+
    "\0\u05c0\0\u6200\0\u05c0\0\u6240\0\u05c0\0\u6280\0\u62c0\0\u6300"+
    "\0\u6340\0\u6380\0\u05c0\0\u63c0\0\u6400\0\u6440\0\u6480\0\u64c0"+
    "\0\u6500\0\u6540\0\u05c0\0\u6580\0\u05c0\0\u65c0\0\u6600\0\u05c0"+
    "\0\u6640\0\u6680\0\u66c0\0\u05c0\0\u6700\0\u05c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\11\1\13\1\2\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\21"+
    "\1\26\2\21\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\21\1\35\1\36\1\37\1\21\1\40\1\21\1\41"+
    "\1\42\1\43\1\44\4\21\1\45\4\21\1\46\3\21"+
    "\1\47\1\40\1\50\1\51\1\52\102\0\1\3\103\0"+
    "\1\53\2\0\3\53\6\0\30\53\3\0\20\53\11\0"+
    "\1\54\2\0\3\11\2\54\4\0\30\21\2\0\2\43"+
    "\17\21\11\0\1\54\1\0\1\55\3\11\2\54\4\0"+
    "\30\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\3\21\1\56\2\21\1\57\11\21\1\60"+
    "\7\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\30\21\2\0\2\43\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\1\61\6\21\1\62\3\21"+
    "\1\63\2\21\1\64\11\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\1\65\27\21\2\0"+
    "\2\43\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\13\21\1\66\5\21\1\67\6\21\2\0\2\43\17\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\4\21\1\70"+
    "\3\21\1\71\17\21\2\0\2\43\5\21\1\72\11\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\3\21\1\73"+
    "\11\21\1\74\12\21\2\0\2\43\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\16\21\1\75\11\21\2\0"+
    "\2\43\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\16\21\1\76\11\21\2\0\2\43\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\16\21\1\77\4\21\1\100"+
    "\4\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\17\21\1\101\10\21\2\0\2\43\17\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\1\102\22\21"+
    "\1\103\4\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\1\104\3\21\1\105\23\21\2\0"+
    "\2\43\3\21\1\106\13\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\4\21\1\107\3\21\1\110\7\21\1\111"+
    "\7\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\21\21\1\112\6\21\2\0\2\43\17\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\4\21\1\113"+
    "\23\21\2\0\2\43\3\21\1\114\13\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\21\21\1\115\6\21\2\0"+
    "\2\43\12\21\1\115\4\21\14\0\3\43\6\0\30\43"+
    "\2\0\21\43\11\0\1\53\2\0\3\116\6\0\30\116"+
    "\2\0\1\43\20\116\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\10\21\1\72\17\21\2\0\2\43\5\21\1\72"+
    "\11\21\11\0\1\54\2\0\3\21\2\54\4\0\4\21"+
    "\1\106\23\21\2\0\2\43\3\21\1\106\13\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\4\21\1\114\23\21"+
    "\2\0\2\43\3\21\1\114\13\21\11\0\1\54\2\0"+
    "\5\54\4\0\30\54\4\0\17\54\14\0\1\117\74\0"+
    "\1\54\2\0\3\21\2\54\4\0\3\21\1\120\24\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\20\21\1\121\7\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\4\21\1\122\23\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\14\21\1\123\13\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\4\21\1\124\23\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\1\125\27\21\2\0\2\43\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\13\21\1\126\1\127\13\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\22\21\1\130\5\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\10\21\1\131\17\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\22\21\1\132\5\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\2\21\1\133\25\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\2\21\1\134\10\21\1\135\1\21\1\136\12\21"+
    "\2\0\2\43\7\21\1\136\7\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\15\21\1\136\12\21\2\0\2\43"+
    "\7\21\1\136\7\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\30\21\2\0\1\43\1\137\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\3\21\1\140\15\21\1\141"+
    "\6\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\6\21\1\142\21\21\2\0\2\43\17\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\3\21\1\143"+
    "\24\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\14\21\1\144\13\21\2\0\2\43\17\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\4\21\1\145"+
    "\23\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\2\21\1\146\25\21\2\0\2\43\17\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\20\21\1\147"+
    "\1\150\6\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\15\21\1\151\12\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\3\21"+
    "\1\152\24\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\1\153\20\21\1\154\6\21\2\0"+
    "\2\43\1\153\16\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\1\153\27\21\2\0\2\43\1\153\16\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\14\21\1\155\11\21"+
    "\1\156\1\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\4\21\1\157\23\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\10\21"+
    "\1\160\17\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\23\21\1\161\4\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\20\21"+
    "\1\162\7\21\2\0\2\43\11\21\1\163\5\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\20\21\1\163\7\21"+
    "\2\0\2\43\11\21\1\163\5\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\16\21\1\164\11\21\2\0\2\43"+
    "\10\21\1\164\6\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\30\21\2\0\1\43\1\165\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\4\21\1\166\23\21\2\0"+
    "\2\43\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\1\167\27\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\17\21\1\170\10\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\2\21"+
    "\1\171\25\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\21\21\1\172\6\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\23\21"+
    "\1\173\4\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\1\21\1\174\26\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\16\21"+
    "\1\175\11\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\14\21\1\176\13\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\1\177"+
    "\27\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\7\21\1\200\20\21\2\0\2\43\17\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\7\21\1\201"+
    "\20\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\1\202\27\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\30\21\2\0\1\43"+
    "\1\203\17\21\14\0\3\43\6\0\22\43\1\204\5\43"+
    "\2\0\21\43\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\10\21\1\205\17\21\2\0\2\43\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\22\21\1\206\5\21\2\0"+
    "\2\43\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\10\21\1\207\17\21\2\0\2\43\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\10\21\1\210\17\21\2\0"+
    "\2\43\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\1\21\1\211\26\21\2\0\2\43\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\24\21\1\212\3\21\2\0"+
    "\2\43\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\10\21\1\213\17\21\2\0\2\43\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\1\214\27\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\21\21"+
    "\1\215\6\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\22\21\1\216\5\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\10\21"+
    "\1\217\17\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\13\21\1\220\14\21\2\0\2\43"+
    "\6\21\1\220\10\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\17\21\1\221\10\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\1\222\27\21\2\0"+
    "\2\43\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\22\21\1\223\5\21\2\0\2\43\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\14\21\1\224\13\21\2\0"+
    "\2\43\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\24\21\1\225\3\21\2\0\2\43\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\1\226\27\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\21\21"+
    "\1\227\6\21\2\0\1\43\1\230\12\21\1\227\4\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\21\21\1\227"+
    "\6\21\2\0\2\43\12\21\1\227\4\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\15\21\1\231\12\21\2\0"+
    "\2\43\7\21\1\231\7\21\14\0\3\43\6\0\3\43"+
    "\1\232\24\43\2\0\21\43\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\6\21\1\233\21\21\2\0\2\43\17\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\30\21\2\0"+
    "\1\43\1\234\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\16\21\1\235\11\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\12\21\1\236\15\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\4\21\1\237\23\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\14\21\1\240\13\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\16\21\1\241\11\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\21\21\1\242\6\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\10\21\1\243\17\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\3\21\1\244\24\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\1\245\27\21\2\0\2\43\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\4\21\1\246\23\21\2\0"+
    "\2\43\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\21\21\1\247\6\21\2\0\2\43\17\21\14\0\3\43"+
    "\6\0\21\43\1\250\6\43\2\0\14\43\1\250\4\43"+
    "\14\0\3\43\6\0\20\43\1\251\7\43\2\0\21\43"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\2\21\1\252"+
    "\25\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\10\21\1\253\17\21\2\0\2\43\17\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\15\21\1\254"+
    "\12\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\5\21\1\255\22\21\2\0\2\43\17\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\20\21\1\256"+
    "\7\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\1\257\15\21\1\260\11\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\16\21"+
    "\1\261\11\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\14\21\1\262\13\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\25\21"+
    "\1\263\2\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\4\21\1\264\23\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\16\21"+
    "\1\265\11\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\10\21\1\266\17\21\2\0\2\43"+
    "\5\21\1\266\11\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\23\21\1\267\4\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\16\21\1\270\11\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\17\21\1\271\10\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\10\21\1\272\17\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\20\21\1\273\7\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\10\21\1\274\17\21"+
    "\2\0\2\43\5\21\1\274\11\21\14\0\3\43\6\0"+
    "\22\43\1\275\5\43\2\0\21\43\14\0\3\43\6\0"+
    "\1\276\27\43\2\0\21\43\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\1\277\27\21\2\0\2\43\17\21\14\0"+
    "\3\43\6\0\22\43\1\300\5\43\2\0\21\43\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\30\21\2\0\1\43"+
    "\1\301\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\1\21\1\302\26\21\2\0\2\43\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\15\21\1\303\12\21\2\0"+
    "\2\43\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\30\21\2\0\1\43\1\304\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\15\21\1\305\12\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\16\21"+
    "\1\306\11\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\30\21\2\0\1\43\1\307\17\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\20\21\1\310"+
    "\7\21\2\0\2\43\17\21\14\0\3\43\6\0\16\43"+
    "\1\311\11\43\2\0\12\43\1\311\6\43\14\0\3\43"+
    "\6\0\10\43\1\312\17\43\2\0\21\43\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\4\21\1\313\23\21\2\0"+
    "\2\43\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\22\21\1\314\5\21\2\0\2\43\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\30\21\2\0\1\43\1\315"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\10\21"+
    "\1\316\17\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\4\21\1\317\23\21\2\0\2\43"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\30\21"+
    "\2\0\1\43\1\320\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\30\21\2\0\1\43\1\321\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\15\21\1\322\12\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\4\21\1\323\23\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\16\21\1\324\11\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\16\21\1\325\11\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\27\21\1\326\2\0"+
    "\2\43\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\4\21\1\327\23\21\2\0\2\43\17\21\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\30\21\2\0\1\43\1\330"+
    "\17\21\11\0\1\54\2\0\3\21\2\54\4\0\16\21"+
    "\1\331\11\21\2\0\2\43\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\1\332\27\21\2\0\2\43\17\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\10\21\1\333"+
    "\17\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\16\21\1\334\11\21\2\0\2\43\10\21"+
    "\1\334\6\21\14\0\3\43\6\0\20\43\1\335\7\43"+
    "\2\0\21\43\14\0\3\43\6\0\22\43\1\336\5\43"+
    "\2\0\21\43\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\20\21\1\337\7\21\2\0\2\43\17\21\14\0\3\43"+
    "\6\0\4\43\1\340\23\43\2\0\21\43\14\0\3\43"+
    "\6\0\22\43\1\341\5\43\2\0\21\43\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\16\21\1\342\11\21\2\0"+
    "\2\43\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\1\343\27\21\2\0\2\43\17\21\14\0\3\43\6\0"+
    "\23\43\1\344\4\43\2\0\21\43\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\1\345\27\21\2\0\2\43\17\21"+
    "\14\0\3\43\6\0\2\43\1\346\11\43\1\347\13\43"+
    "\2\0\21\43\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\16\21\1\350\11\21\2\0\2\43\17\21\14\0\3\43"+
    "\6\0\13\43\1\351\14\43\2\0\10\43\1\351\10\43"+
    "\14\0\3\43\6\0\24\43\1\352\3\43\2\0\21\43"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\23\21\1\353"+
    "\4\21\2\0\2\43\17\21\14\0\3\43\6\0\23\43"+
    "\1\354\4\43\2\0\21\43\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\2\21\1\355\25\21\2\0\2\43\17\21"+
    "\14\0\3\43\6\0\22\43\1\356\5\43\2\0\21\43"+
    "\14\0\3\43\6\0\17\43\1\357\10\43\2\0\21\43"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\4\21\1\360"+
    "\23\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\22\21\1\361\5\21\2\0\2\43\17\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\20\21\1\362"+
    "\7\21\2\0\2\43\17\21\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\1\363\27\21\2\0\2\43\1\363\16\21"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\21\21\1\364"+
    "\6\21\2\0\2\43\17\21\14\0\3\43\6\0\24\43"+
    "\1\365\3\43\2\0\21\43\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\30\21\2\0\1\43\1\366\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\16\21\1\367\11\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\15\21\1\370\12\21\2\0\2\43\7\21\1\370"+
    "\7\21\14\0\3\43\6\0\10\43\1\371\17\43\2\0"+
    "\21\43\14\0\3\43\6\0\1\372\27\43\2\0\21\43"+
    "\11\0\1\54\2\0\3\21\2\54\4\0\30\21\2\0"+
    "\1\43\1\373\17\21\14\0\3\43\6\0\26\43\1\374"+
    "\1\43\2\0\21\43\14\0\3\43\6\0\4\43\1\375"+
    "\23\43\2\0\21\43\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\26\21\1\376\1\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\21\21\1\377\6\21"+
    "\2\0\2\43\17\21\14\0\3\43\6\0\21\43\1\u0100"+
    "\6\43\2\0\21\43\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\20\21\1\u0101\7\21\2\0\2\43\17\21\14\0"+
    "\3\43\6\0\20\43\1\u0102\7\43\2\0\21\43\14\0"+
    "\3\43\6\0\16\43\1\u0103\11\43\2\0\21\43\14\0"+
    "\3\43\6\0\10\43\1\u0104\17\43\2\0\7\43\1\u0104"+
    "\11\43\14\0\3\43\6\0\10\43\1\u0105\17\43\2\0"+
    "\21\43\11\0\1\54\2\0\3\21\2\54\4\0\2\21"+
    "\1\u0106\25\21\2\0\2\43\17\21\14\0\3\43\6\0"+
    "\21\43\1\u0107\6\43\2\0\21\43\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\1\u0108\27\21\2\0\2\43\17\21"+
    "\14\0\3\43\6\0\20\43\1\u0109\7\43\2\0\21\43"+
    "\14\0\3\43\6\0\1\u010a\27\43\2\0\21\43\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\21\21\1\u010b\6\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\20\21\1\u010c\7\21\2\0\2\43\17\21\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\3\21\1\u010d\24\21"+
    "\2\0\2\43\17\21\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\20\21\1\u010e\7\21\2\0\2\43\11\21\1\u010e"+
    "\5\21\11\0\1\54\2\0\3\21\2\54\4\0\22\21"+
    "\1\u010f\5\21\2\0\2\43\17\21\14\0\3\43\6\0"+
    "\10\43\1\u0110\17\43\2\0\21\43\14\0\3\43\6\0"+
    "\17\43\1\u0111\2\43\1\u0112\5\43\2\0\21\43\11\0"+
    "\1\54\2\0\3\21\2\54\4\0\30\21\2\0\1\43"+
    "\1\u0113\17\21\14\0\3\43\6\0\24\43\1\u0114\3\43"+
    "\2\0\21\43\14\0\3\43\6\0\2\43\1\u0115\25\43"+
    "\2\0\21\43\14\0\3\43\6\0\22\43\1\u0116\5\43"+
    "\2\0\21\43\14\0\3\43\6\0\26\43\1\u0117\1\43"+
    "\2\0\21\43\14\0\3\43\6\0\23\43\1\u0118\4\43"+
    "\2\0\21\43\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\30\21\2\0\1\43\1\u0119\17\21\14\0\3\43\6\0"+
    "\4\43\1\u011a\23\43\2\0\21\43\14\0\3\43\6\0"+
    "\3\43\1\u011b\24\43\2\0\21\43\14\0\3\43\6\0"+
    "\2\43\1\u011c\25\43\2\0\3\43\1\u011c\15\43\14\0"+
    "\3\43\6\0\1\u011d\27\43\2\0\21\43\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\10\21\1\u011e\17\21\2\0"+
    "\2\43\17\21\14\0\3\43\6\0\23\43\1\u011f\4\43"+
    "\2\0\21\43\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\20\21\1\u0120\7\21\2\0\2\43\17\21\14\0\3\43"+
    "\6\0\10\43\1\u0121\17\43\2\0\21\43\14\0\3\43"+
    "\6\0\21\43\1\u0122\6\43\2\0\21\43\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\16\21\1\u0123\11\21\2\0"+
    "\2\43\17\21\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\30\21\2\0\1\43\1\u0124\17\21\11\0\1\54\2\0"+
    "\3\21\2\54\4\0\1\u0125\27\21\2\0\2\43\17\21"+
    "\14\0\3\43\6\0\21\43\1\u0126\6\43\2\0\21\43"+
    "\14\0\3\43\6\0\20\43\1\u0127\7\43\2\0\21\43"+
    "\14\0\3\43\6\0\16\43\1\u0128\11\43\2\0\21\43"+
    "\14\0\3\43\6\0\1\u0129\1\43\1\u012a\12\43\1\u012b"+
    "\12\43\2\0\21\43\14\0\3\43\6\0\10\43\1\u012c"+
    "\17\43\2\0\21\43\14\0\3\43\6\0\16\43\1\u012d"+
    "\11\43\2\0\21\43\14\0\3\43\6\0\16\43\1\u012e"+
    "\11\43\2\0\21\43\14\0\3\43\6\0\22\43\1\u012f"+
    "\5\43\2\0\21\43\14\0\3\43\6\0\1\u0130\27\43"+
    "\2\0\21\43\14\0\3\43\6\0\2\43\1\u0131\17\43"+
    "\1\u0132\1\u0133\4\43\2\0\21\43\14\0\3\43\6\0"+
    "\1\u0134\27\43\2\0\21\43\14\0\3\43\6\0\10\43"+
    "\1\u0135\17\43\2\0\21\43\14\0\3\43\6\0\10\43"+
    "\1\u0136\17\43\2\0\7\43\1\u0136\11\43\11\0\1\54"+
    "\2\0\3\21\2\54\4\0\16\21\1\u0137\11\21\2\0"+
    "\2\43\17\21\14\0\3\43\6\0\1\u0138\27\43\2\0"+
    "\21\43\11\0\1\54\2\0\3\21\2\54\4\0\30\21"+
    "\2\0\1\43\1\u0139\17\21\14\0\3\43\6\0\24\43"+
    "\1\u013a\3\43\2\0\21\43\14\0\3\43\6\0\21\43"+
    "\1\u013b\6\43\2\0\21\43\11\0\1\54\2\0\3\21"+
    "\2\54\4\0\21\21\1\u013c\6\21\2\0\2\43\17\21"+
    "\14\0\3\43\6\0\21\43\1\u013d\6\43\2\0\14\43"+
    "\1\u013d\4\43\14\0\3\43\6\0\10\43\1\u013e\17\43"+
    "\2\0\21\43\14\0\3\43\6\0\4\43\1\u013f\23\43"+
    "\2\0\21\43\14\0\3\43\6\0\22\43\1\u0140\5\43"+
    "\2\0\21\43\14\0\3\43\6\0\15\43\1\u0141\12\43"+
    "\2\0\21\43\14\0\3\43\6\0\20\43\1\u0142\7\43"+
    "\2\0\21\43\14\0\3\43\6\0\23\43\1\u0143\4\43"+
    "\2\0\21\43\14\0\3\43\6\0\1\u0144\27\43\2\0"+
    "\21\43\14\0\3\43\6\0\14\43\1\u0145\13\43\2\0"+
    "\21\43\14\0\3\43\6\0\16\43\1\u0146\11\43\2\0"+
    "\21\43\14\0\3\43\6\0\20\43\1\u0147\7\43\2\0"+
    "\21\43\14\0\3\43\6\0\16\43\1\u0148\11\43\2\0"+
    "\21\43\14\0\3\43\6\0\20\43\1\u0149\7\43\2\0"+
    "\21\43\14\0\3\43\6\0\21\43\1\u014a\6\43\2\0"+
    "\21\43\14\0\3\43\6\0\2\43\1\u014b\25\43\2\0"+
    "\21\43\14\0\3\43\6\0\5\43\1\u014c\22\43\2\0"+
    "\21\43\14\0\3\43\6\0\22\43\1\u014d\5\43\2\0"+
    "\15\43\1\u014d\3\43\11\0\1\54\2\0\3\21\2\54"+
    "\4\0\15\21\1\u014e\12\21\2\0\2\43\17\21\14\0"+
    "\3\43\6\0\20\43\1\u014f\7\43\2\0\21\43\14\0"+
    "\3\43\6\0\2\43\1\u0150\17\43\1\u0151\1\u0152\4\43"+
    "\2\0\21\43\14\0\3\43\6\0\10\43\1\u0153\17\43"+
    "\2\0\21\43\14\0\3\43\6\0\25\43\1\u0154\2\43"+
    "\2\0\21\43\11\0\1\54\2\0\3\21\2\54\4\0"+
    "\30\21\2\0\1\43\1\u0155\17\21\14\0\3\43\6\0"+
    "\16\43\1\u0156\11\43\2\0\12\43\1\u0156\6\43\14\0"+
    "\3\43\6\0\1\43\1\u0157\26\43\2\0\21\43\14\0"+
    "\3\43\6\0\6\43\1\u0158\21\43\2\0\21\43\14\0"+
    "\3\43\6\0\1\u0159\27\43\2\0\21\43\14\0\3\43"+
    "\6\0\22\43\1\u015a\5\43\2\0\21\43\14\0\3\43"+
    "\6\0\4\43\1\u015b\23\43\2\0\21\43\14\0\3\43"+
    "\6\0\4\43\1\u015c\23\43\2\0\21\43\14\0\3\43"+
    "\6\0\21\43\1\u015d\6\43\2\0\21\43\14\0\3\43"+
    "\6\0\17\43\1\u015e\10\43\2\0\21\43\14\0\3\43"+
    "\6\0\10\43\1\u015f\17\43\2\0\21\43\14\0\3\43"+
    "\6\0\14\43\1\u0160\13\43\2\0\21\43\14\0\3\43"+
    "\6\0\10\43\1\u0161\17\43\2\0\21\43\14\0\3\43"+
    "\6\0\23\43\1\u0162\4\43\2\0\21\43\14\0\3\43"+
    "\6\0\10\43\1\u0163\17\43\2\0\21\43\14\0\3\43"+
    "\6\0\10\43\1\u0164\17\43\2\0\21\43\14\0\3\43"+
    "\6\0\23\43\1\u0165\4\43\2\0\16\43\1\u0165\2\43"+
    "\14\0\3\43\6\0\10\43\1\u0166\17\43\2\0\21\43"+
    "\14\0\3\43\6\0\16\43\1\u0167\11\43\2\0\21\43"+
    "\14\0\3\43\6\0\20\43\1\u0168\7\43\2\0\21\43"+
    "\14\0\3\43\6\0\21\43\1\u0169\6\43\2\0\21\43"+
    "\14\0\3\43\6\0\1\u016a\27\43\2\0\21\43\14\0"+
    "\3\43\6\0\16\43\1\u016b\11\43\2\0\21\43\14\0"+
    "\3\43\6\0\2\43\1\u016c\17\43\1\u016d\5\43\2\0"+
    "\21\43\14\0\3\43\6\0\13\43\1\u016e\14\43\2\0"+
    "\10\43\1\u016e\10\43\14\0\3\43\6\0\13\43\1\u016f"+
    "\14\43\2\0\21\43\14\0\3\43\6\0\23\43\1\u0170"+
    "\4\43\2\0\21\43\14\0\3\43\6\0\13\43\1\u0171"+
    "\14\43\2\0\21\43\14\0\3\43\6\0\10\43\1\u0172"+
    "\17\43\2\0\21\43\14\0\3\43\6\0\1\u0173\27\43"+
    "\2\0\21\43\14\0\3\43\6\0\24\43\1\u0174\3\43"+
    "\2\0\21\43\14\0\3\43\6\0\16\43\1\u0175\11\43"+
    "\2\0\21\43\14\0\3\43\6\0\16\43\1\u0176\11\43"+
    "\2\0\21\43\14\0\3\43\6\0\17\43\1\u0177\10\43"+
    "\2\0\21\43\14\0\3\43\6\0\24\43\1\u0178\3\43"+
    "\2\0\21\43\14\0\3\43\6\0\1\u0179\27\43\2\0"+
    "\21\43\14\0\3\43\6\0\16\43\1\u017a\11\43\2\0"+
    "\21\43\14\0\3\43\6\0\2\43\1\u017b\25\43\2\0"+
    "\21\43\14\0\3\43\6\0\3\43\1\u017c\24\43\2\0"+
    "\4\43\1\u017c\14\43\14\0\3\43\6\0\16\43\1\u017d"+
    "\11\43\2\0\21\43\14\0\3\43\6\0\14\43\1\u017e"+
    "\13\43\2\0\21\43\14\0\3\43\6\0\10\43\1\u017f"+
    "\17\43\2\0\21\43\14\0\3\43\6\0\23\43\1\u0180"+
    "\4\43\2\0\21\43\14\0\3\43\6\0\20\43\1\u0181"+
    "\7\43\2\0\21\43\14\0\3\43\6\0\16\43\1\u0182"+
    "\11\43\2\0\21\43\14\0\3\43\6\0\20\43\1\u0183"+
    "\7\43\2\0\21\43\14\0\3\43\6\0\10\43\1\u0184"+
    "\17\43\2\0\7\43\1\u0184\11\43\14\0\3\43\6\0"+
    "\4\43\1\u0185\23\43\2\0\21\43\14\0\3\43\6\0"+
    "\15\43\1\u0186\12\43\2\0\21\43\14\0\3\43\6\0"+
    "\6\43\1\u0187\21\43\2\0\21\43\14\0\3\43\6\0"+
    "\2\43\1\u0188\25\43\2\0\21\43\14\0\3\43\6\0"+
    "\16\43\1\u0189\11\43\2\0\21\43\14\0\3\43\6\0"+
    "\15\43\1\u018a\12\43\2\0\21\43\14\0\3\43\6\0"+
    "\16\43\1\u018b\11\43\2\0\21\43\14\0\3\43\6\0"+
    "\10\43\1\u018c\17\43\2\0\21\43\14\0\3\43\6\0"+
    "\20\43\1\u018d\7\43\2\0\21\43\14\0\3\43\6\0"+
    "\15\43\1\u018e\12\43\2\0\21\43\14\0\3\43\6\0"+
    "\1\u018f\27\43\2\0\21\43\14\0\3\43\6\0\4\43"+
    "\1\u0190\23\43\2\0\1\43\1\u0191\3\43\1\u0190\13\43"+
    "\14\0\3\43\6\0\17\43\1\u0192\10\43\2\0\21\43"+
    "\14\0\3\43\6\0\24\43\1\u0193\3\43\2\0\21\43"+
    "\14\0\3\43\6\0\1\u0194\27\43\2\0\21\43\14\0"+
    "\3\43\6\0\3\43\1\u0195\24\43\2\0\21\43\14\0"+
    "\3\43\6\0\14\43\1\u0196\13\43\2\0\21\43\14\0"+
    "\3\43\6\0\10\43\1\u0197\17\43\2\0\21\43\14\0"+
    "\3\43\6\0\2\43\1\u0198\25\43\2\0\3\43\1\u0198"+
    "\15\43\14\0\3\43\6\0\22\43\1\u0199\5\43\2\0"+
    "\21\43\14\0\3\43\6\0\23\43\1\u019a\4\43\2\0"+
    "\21\43\14\0\3\43\6\0\10\43\1\u019b\17\43\2\0"+
    "\21\43\14\0\3\43\6\0\4\43\1\u019c\23\43\2\0"+
    "\21\43\14\0\3\43\6\0\15\43\1\u019d\12\43\2\0"+
    "\21\43\14\0\3\43\6\0\1\u019e\27\43\2\0\21\43"+
    "\14\0\3\43\6\0\10\43\1\u019f\17\43\2\0\21\43"+
    "\14\0\3\43\6\0\2\43\1\u01a0\25\43\2\0\21\43"+
    "\14\0\3\43\6\0\21\43\1\u01a1\6\43\2\0\14\43"+
    "\1\u01a1\4\43\14\0\3\43\6\0\20\43\1\u01a2\7\43"+
    "\2\0\13\43\1\u01a2\5\43\14\0\3\43\6\0\16\43"+
    "\1\u01a3\11\43\2\0\21\43\14\0\3\43\6\0\10\43"+
    "\1\u01a4\17\43\2\0\21\43\14\0\3\43\6\0\20\43"+
    "\1\u01a5\7\43\2\0\21\43\14\0\3\43\6\0\17\43"+
    "\1\u01a6\10\43\2\0\21\43\14\0\3\43\6\0\24\43"+
    "\1\u01a7\3\43\2\0\21\43\14\0\3\43\6\0\10\43"+
    "\1\u01a8\17\43\2\0\7\43\1\u01a8\11\43\14\0\3\43"+
    "\6\0\1\u01a9\27\43\2\0\21\43\14\0\3\43\6\0"+
    "\16\43\1\u01aa\11\43\2\0\21\43\14\0\3\43\6\0"+
    "\16\43\1\u01ab\11\43\2\0\21\43\14\0\3\43\6\0"+
    "\15\43\1\u01ac\12\43\2\0\21\43\14\0\3\43\6\0"+
    "\4\43\1\u01ad\23\43\2\0\21\43\14\0\3\43\6\0"+
    "\16\43\1\u01ae\11\43\2\0\21\43\14\0\3\43\6\0"+
    "\10\43\1\u01af\17\43\2\0\21\43\14\0\3\43\6\0"+
    "\30\43\2\0\1\43\1\u01b0\17\43\14\0\3\43\6\0"+
    "\4\43\1\u01b1\23\43\2\0\5\43\1\u01b1\13\43\14\0"+
    "\3\43\6\0\15\43\1\u01b2\12\43\2\0\21\43\14\0"+
    "\3\43\6\0\1\u01b3\27\43\2\0\21\43\14\0\3\43"+
    "\6\0\10\43\1\u01b4\17\43\2\0\21\43\14\0\3\43"+
    "\6\0\16\43\1\u01b5\11\43\2\0\21\43\14\0\3\43"+
    "\6\0\10\43\1\u01b6\17\43\2\0\21\43\14\0\3\43"+
    "\6\0\22\43\1\u01b7\5\43\2\0\15\43\1\u01b7\3\43"+
    "\14\0\3\43\6\0\15\43\1\u01b8\12\43\2\0\21\43"+
    "\14\0\3\43\6\0\22\43\1\u01b9\5\43\2\0\21\43"+
    "\14\0\3\43\6\0\15\43\1\u01ba\12\43\2\0\21\43"+
    "\14\0\3\43\6\0\16\43\1\u01bb\11\43\2\0\21\43"+
    "\14\0\3\43\6\0\20\43\1\u01bc\7\43\2\0\13\43"+
    "\1\u01bc\5\43\14\0\3\43\6\0\1\u01bd\27\43\2\0"+
    "\2\43\1\u01bd\16\43\14\0\3\43\6\0\4\43\1\u01be"+
    "\23\43\2\0\21\43\14\0\3\43\6\0\16\43\1\u01bf"+
    "\11\43\2\0\21\43\14\0\3\43\6\0\15\43\1\u01c0"+
    "\12\43\2\0\21\43\14\0\3\43\6\0\1\u01c1\27\43"+
    "\2\0\21\43\14\0\3\43\6\0\23\43\1\u01c2\4\43"+
    "\2\0\16\43\1\u01c2\2\43\14\0\3\43\6\0\4\43"+
    "\1\u01c3\23\43\2\0\21\43\14\0\3\43\6\0\22\43"+
    "\1\u01c4\5\43\2\0\21\43\14\0\3\43\6\0\15\43"+
    "\1\u01c5\12\43\2\0\21\43\14\0\3\43\6\0\4\43"+
    "\1\u01c6\23\43\2\0\5\43\1\u01c6\13\43\14\0\3\43"+
    "\6\0\13\43\1\u01c7\14\43\2\0\10\43\1\u01c7\10\43"+
    "\14\0\3\43\6\0\15\43\1\u01c8\12\43\2\0\21\43"+
    "\14\0\3\43\6\0\4\43\1\u01c9\23\43\2\0\21\43"+
    "\14\0\3\43\6\0\3\43\1\u01ca\24\43\2\0\4\43"+
    "\1\u01ca\14\43\14\0\3\43\6\0\4\43\1\u01cb\23\43"+
    "\2\0\21\43\14\0\3\43\6\0\1\u01cc\27\43\2\0"+
    "\2\43\1\u01cc\16\43\14\0\3\43\6\0\10\43\1\u01cd"+
    "\17\43\2\0\7\43\1\u01cd\11\43\14\0\3\43\6\0"+
    "\22\43\1\u01ce\5\43\2\0\21\43\14\0\3\43\6\0"+
    "\15\43\1\u01cf\12\43\2\0\21\43\14\0\3\43\6\0"+
    "\4\43\1\u01d0\23\43\2\0\5\43\1\u01d0\13\43\14\0"+
    "\3\43\6\0\13\43\1\u01d1\14\43\2\0\10\43\1\u01d1"+
    "\10\43\14\0\3\43\6\0\27\43\1\u01d2\2\0\21\43"+
    "\14\0\3\43\6\0\4\43\1\u01d3\23\43\2\0\21\43"+
    "\14\0\3\43\6\0\22\43\1\u01d4\5\43\2\0\21\43"+
    "\14\0\3\43\6\0\21\43\1\u01d5\6\43\2\0\14\43"+
    "\1\u01d5\4\43\14\0\3\43\6\0\10\43\1\u01d6\17\43"+
    "\2\0\7\43\1\u01d6\11\43\14\0\3\43\6\0\1\u01d7"+
    "\27\43\2\0\2\43\1\u01d7\16\43\14\0\3\43\6\0"+
    "\4\43\1\u01d8\23\43\2\0\21\43\14\0\3\43\6\0"+
    "\27\43\1\u01d9\2\0\21\43\14\0\3\43\6\0\3\43"+
    "\1\u01da\24\43\2\0\4\43\1\u01da\14\43\14\0\3\43"+
    "\6\0\1\u01db\27\43\2\0\2\43\1\u01db\16\43\14\0"+
    "\3\43\6\0\1\u01dc\27\43\2\0\2\43\1\u01dc\16\43"+
    "\14\0\3\43\6\0\3\43\1\u01dd\24\43\2\0\4\43"+
    "\1\u01dd\14\43\14\0\3\43\6\0\1\u01de\27\43\2\0"+
    "\2\43\1\u01de\16\43\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[26432];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\2\11\1\1\1\11\2\1\5\11"+
    "\21\1\2\11\5\1\3\11\2\1\1\0\41\1\1\11"+
    "\u018f\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[478];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type){
        return new Symbol(type, yyline+1,yycolumn+1);
    }
    private Symbol symbol(int type, Object value){
        //System.out.println(type + " line: " + (yyline+1) + " col: "+(yycolumn+1) + " " + value);
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }
    private void error(){
        ErrorsLP.addError(yytext(), yyline+1, yycolumn+1, "Error Léxico","Cadena no definida");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RequestLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error();
            }
          // fall through
          case 72: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 73: break;
          case 3:
            { return symbol(EX, yytext());
            }
          // fall through
          case 74: break;
          case 4:
            { return symbol(Q, yytext());
            }
          // fall through
          case 75: break;
          case 5:
            { return symbol(COMMA, yytext());
            }
          // fall through
          case 76: break;
          case 6:
            { return symbol(DIGIT, yytext());
            }
          // fall through
          case 77: break;
          case 7:
            { return symbol(COLON, yytext());
            }
          // fall through
          case 78: break;
          case 8:
            { return symbol(LT, yytext());
            }
          // fall through
          case 79: break;
          case 9:
            { return symbol(EQUAL, yytext());
            }
          // fall through
          case 80: break;
          case 10:
            { return symbol(GT, yytext());
            }
          // fall through
          case 81: break;
          case 11:
            { return symbol(QM, yytext());
            }
          // fall through
          case 82: break;
          case 12:
            { return symbol(STRINGCONTENT, yytext());
            }
          // fall through
          case 83: break;
          case 13:
            { return symbol(LBRACKET, yytext());
            }
          // fall through
          case 84: break;
          case 14:
            { return symbol(RBRACKET, yytext());
            }
          // fall through
          case 85: break;
          case 15:
            { ErrorsLP.addError(yytext(), yyline+1, yycolumn+1, "Error Léxico","Cadena no definida");
            }
          // fall through
          case 86: break;
          case 16:
            { return symbol(LBRACE, yytext());
            }
          // fall through
          case 87: break;
          case 17:
            { return symbol(VERTICAL_BAR, yytext());
            }
          // fall through
          case 88: break;
          case 18:
            { return symbol(RBRACE, yytext());
            }
          // fall through
          case 89: break;
          case 19:
            { return symbol(IDENTIFIER, yytext());
            }
          // fall through
          case 90: break;
          case 20:
            { return symbol(ID, yytext());
            }
          // fall through
          case 91: break;
          case 21:
            { return symbol(ONE, yytext());
            }
          // fall through
          case 92: break;
          case 22:
            { return symbol(TEMA, yytext());
            }
          // fall through
          case 93: break;
          case 23:
            { return symbol(XSON, yytext());
            }
          // fall through
          case 94: break;
          case 24:
            { return symbol(CLASE, yytext());
            }
          // fall through
          case 95: break;
          case 25:
            { return symbol(COMBO, yytext());
            }
          // fall through
          case 96: break;
          case 26:
            { return symbol(FILAS, yytext());
            }
          // fall through
          case 97: break;
          case 27:
            { return symbol(RADIO, yytext());
            }
          // fall through
          case 98: break;
          case 28:
            { return symbol(ESTADO, yytext());
            }
          // fall through
          case 99: break;
          case 29:
            { return symbol(INDICE, yytext());
            }
          // fall through
          case 100: break;
          case 30:
            { return symbol(NOMBRE, yytext());
            }
          // fall through
          case 101: break;
          case 31:
            { return symbol(PUNTEO, yytext());
            }
          // fall through
          case 102: break;
          case 32:
            { return symbol(TRIVIA, yytext());
            }
          // fall through
          case 103: break;
          case 33:
            { return symbol(FICHERO, yytext());
            }
          // fall through
          case 104: break;
          case 34:
            { return symbol(USUARIO, yytext());
            }
          // fall through
          case 105: break;
          case 35:
            { return symbol(VERSION, yytext());
            }
          // fall through
          case 106: break;
          case 36:
            { return symbol(ADD_DATA, yytext());
            }
          // fall through
          case 107: break;
          case 37:
            { return symbol(CHECKBOX, yytext());
            }
          // fall through
          case 108: break;
          case 38:
            { return symbol(COLUMNAS, yytext());
            }
          // fall through
          case 109: break;
          case 39:
            { return symbol(OPCIONES, yytext());
            }
          // fall through
          case 110: break;
          case 40:
            { return symbol(PASSWORD, yytext());
            }
          // fall through
          case 111: break;
          case 41:
            { return symbol(ID_TRIVIA, yytext());
            }
          // fall through
          case 112: break;
          case 42:
            { return symbol(RESPUESTA, yytext());
            }
          // fall through
          case 113: break;
          case 43:
            { return symbol(AREA_TEXTO, yytext());
            }
          // fall through
          case 114: break;
          case 44:
            { return symbol(CAMPO_TEXTO, yytext());
            }
          // fall through
          case 115: break;
          case 45:
            { return symbol(INSTITUCION, yytext());
            }
          // fall through
          case 116: break;
          case 46:
            { return symbol(VER_TRIVIAS, yytext());
            }
          // fall through
          case 117: break;
          case 47:
            { return symbol(NUEVA_TRIVIA, yytext());
            }
          // fall through
          case 118: break;
          case 48:
            { return symbol(TIEMPO_TOTAL, yytext());
            }
          // fall through
          case 119: break;
          case 49:
            { return symbol(DATOS_USUARIO, yytext());
            }
          // fall through
          case 120: break;
          case 50:
            { return symbol(LOGIN_USUARIO, yytext());
            }
          // fall through
          case 121: break;
          case 51:
            { return symbol(TEXTO_VISIBLE, yytext());
            }
          // fall through
          case 122: break;
          case 52:
            { return symbol(USUARIO_NUEVO, yytext());
            }
          // fall through
          case 123: break;
          case 53:
            { return symbol(FECHA_CREACION, yytext());
            }
          // fall through
          case 124: break;
          case 54:
            { return symbol(NUEVO_PASSWORD, yytext());
            }
          // fall through
          case 125: break;
          case 55:
            { return symbol(ELIMINAR_TRIVIA, yytext());
            }
          // fall through
          case 126: break;
          case 56:
            { return symbol(TIEMPO_PREGUNTA, yytext());
            }
          // fall through
          case 127: break;
          case 57:
            { return symbol(USUARIO_ANTIGUO, yytext());
            }
          // fall through
          case 128: break;
          case 58:
            { return symbol(ELIMINAR_USUARIO, yytext());
            }
          // fall through
          case 129: break;
          case 59:
            { return symbol(MODIFICAR_TRIVIA, yytext());
            }
          // fall through
          case 130: break;
          case 60:
            { return symbol(USUARIO_CREACION, yytext());
            }
          // fall through
          case 131: break;
          case 61:
            { return symbol(MODIFICAR_USUARIO, yytext());
            }
          // fall through
          case 132: break;
          case 62:
            { return symbol(PARAMETROS_TRIVIA, yytext());
            }
          // fall through
          case 133: break;
          case 63:
            { return symbol(AGREGAR_COMPONENTE, yytext());
            }
          // fall through
          case 134: break;
          case 64:
            { return symbol(FECHA_MODIFICACION, yytext());
            }
          // fall through
          case 135: break;
          case 65:
            { return symbol(REALIZAR_SOLICITUD, yytext());
            }
          // fall through
          case 136: break;
          case 66:
            { return symbol(ELIMINAR_COMPONENTE, yytext());
            }
          // fall through
          case 137: break;
          case 67:
            { return symbol(MODIFICAR_COMPONENTE, yytext());
            }
          // fall through
          case 138: break;
          case 68:
            { return symbol(REALIZAR_SOLICITUDES, yytext());
            }
          // fall through
          case 139: break;
          case 69:
            { return symbol(PARAMETROS_COMPONENTE, yytext());
            }
          // fall through
          case 140: break;
          case 70:
            { return symbol(FIN_SOLICITUD_REALIZADA, yytext());
            }
          // fall through
          case 141: break;
          case 71:
            { return symbol(FIN_SOLICITUDES_REALIZADA, yytext());
            }
          // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
