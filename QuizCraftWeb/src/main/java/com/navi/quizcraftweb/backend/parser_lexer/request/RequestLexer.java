// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: RequestLexer.flex

package com.navi.quizcraftweb.backend.parser_lexer.request;
import java_cup.runtime.*;
import static com.navi.quizcraftweb.backend.parser_lexer.request.sym.*;
import com.navi.quizcraftweb.backend.parser_lexer.*;

@SuppressWarnings("fallthrough")
public class RequestLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\0\1\6\7\0\1\7\1\6\1\10"+
    "\1\0\1\11\1\12\10\13\1\14\1\0\1\15\1\16"+
    "\1\17\1\20\1\0\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\32\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\32\1\50\1\51\1\0\1\52"+
    "\1\53\1\54\1\0\1\55\1\32\1\56\1\57\1\60"+
    "\1\61\2\32\1\62\2\32\1\63\1\32\1\64\1\65"+
    "\2\32\1\66\1\67\1\70\1\71\1\72\1\32\1\73"+
    "\1\32\1\50\1\74\1\75\1\76\43\0\1\53\10\0"+
    "\1\53\1\0\1\53\3\0\1\53\4\0\1\53\4\0"+
    "\1\53\4\0\30\53\1\0\37\53\1\0\u01ca\53\4\0"+
    "\14\53\16\0\5\53\7\0\1\53\1\0\1\53\21\0"+
    "\165\53\1\0\2\53\2\0\4\53\1\0\1\53\6\0"+
    "\1\53\1\0\3\53\1\0\1\53\1\0\24\53\1\0"+
    "\123\53\1\0\213\53\1\0\255\53\1\0\46\53\2\0"+
    "\1\53\6\0\51\53\10\0\55\53\1\0\1\53\1\0"+
    "\2\53\1\0\2\53\1\0\1\53\10\0\33\53\4\0"+
    "\4\53\35\0\13\53\5\0\112\53\4\0\146\53\1\0"+
    "\10\53\2\0\12\53\1\0\23\53\2\0\1\53\20\0"+
    "\73\53\2\0\145\53\16\0\66\53\4\0\1\53\2\0"+
    "\1\53\2\0\56\53\22\0\34\53\4\0\13\53\65\0"+
    "\25\53\1\0\10\53\25\0\17\53\1\0\201\53\2\0"+
    "\12\53\1\0\23\53\1\0\10\53\2\0\2\53\2\0"+
    "\26\53\1\0\7\53\1\0\1\53\3\0\4\53\2\0"+
    "\11\53\2\0\2\53\2\0\4\53\10\0\1\53\4\0"+
    "\2\53\1\0\5\53\2\0\14\53\12\0\1\53\1\0"+
    "\1\53\2\0\3\53\1\0\6\53\4\0\2\53\2\0"+
    "\26\53\1\0\7\53\1\0\2\53\1\0\2\53\1\0"+
    "\2\53\2\0\1\53\1\0\5\53\4\0\2\53\2\0"+
    "\3\53\3\0\1\53\7\0\4\53\1\0\1\53\7\0"+
    "\20\53\13\0\3\53\1\0\11\53\1\0\3\53\1\0"+
    "\26\53\1\0\7\53\1\0\2\53\1\0\5\53\2\0"+
    "\12\53\1\0\3\53\1\0\3\53\2\0\1\53\17\0"+
    "\4\53\2\0\12\53\11\0\7\53\1\0\3\53\1\0"+
    "\10\53\2\0\2\53\2\0\26\53\1\0\7\53\1\0"+
    "\2\53\1\0\5\53\2\0\11\53\2\0\2\53\2\0"+
    "\3\53\10\0\2\53\4\0\2\53\1\0\5\53\2\0"+
    "\12\53\1\0\1\53\20\0\2\53\1\0\6\53\3\0"+
    "\3\53\1\0\4\53\3\0\2\53\1\0\1\53\1\0"+
    "\2\53\3\0\2\53\3\0\3\53\3\0\14\53\4\0"+
    "\5\53\3\0\3\53\1\0\4\53\2\0\1\53\6\0"+
    "\1\53\16\0\12\53\20\0\15\53\1\0\3\53\1\0"+
    "\27\53\1\0\20\53\3\0\10\53\1\0\3\53\1\0"+
    "\4\53\7\0\2\53\1\0\3\53\5\0\4\53\2\0"+
    "\12\53\20\0\4\53\1\0\10\53\1\0\3\53\1\0"+
    "\27\53\1\0\12\53\1\0\5\53\2\0\11\53\1\0"+
    "\3\53\1\0\4\53\7\0\2\53\7\0\1\53\1\0"+
    "\4\53\2\0\12\53\1\0\2\53\15\0\4\53\1\0"+
    "\10\53\1\0\3\53\1\0\63\53\1\0\3\53\1\0"+
    "\5\53\5\0\4\53\7\0\5\53\2\0\12\53\12\0"+
    "\6\53\2\0\2\53\1\0\22\53\3\0\30\53\1\0"+
    "\11\53\1\0\1\53\2\0\7\53\3\0\1\53\4\0"+
    "\6\53\1\0\1\53\1\0\10\53\6\0\12\53\2\0"+
    "\2\53\15\0\72\53\5\0\17\53\1\0\12\53\47\0"+
    "\2\53\1\0\1\53\1\0\5\53\1\0\30\53\1\0"+
    "\1\53\1\0\27\53\2\0\5\53\1\0\1\53\1\0"+
    "\6\53\2\0\12\53\2\0\4\53\40\0\1\53\27\0"+
    "\2\53\6\0\12\53\13\0\1\53\1\0\1\53\1\0"+
    "\1\53\4\0\12\53\1\0\44\53\4\0\24\53\1\0"+
    "\22\53\1\0\44\53\11\0\1\53\71\0\112\53\6\0"+
    "\116\53\2\0\46\53\1\0\1\53\5\0\1\53\2\0"+
    "\53\53\1\0\115\53\1\0\4\53\2\0\7\53\1\0"+
    "\1\53\1\0\4\53\2\0\51\53\1\0\4\53\2\0"+
    "\41\53\1\0\4\53\2\0\7\53\1\0\1\53\1\0"+
    "\4\53\2\0\17\53\1\0\71\53\1\0\4\53\2\0"+
    "\103\53\2\0\3\53\40\0\20\53\20\0\126\53\2\0"+
    "\6\53\3\0\u016c\53\2\0\21\53\1\0\32\53\5\0"+
    "\113\53\3\0\13\53\7\0\15\53\1\0\7\53\13\0"+
    "\25\53\13\0\24\53\14\0\15\53\1\0\3\53\1\0"+
    "\2\53\14\0\124\53\3\0\1\53\4\0\2\53\2\0"+
    "\12\53\41\0\3\53\2\0\12\53\6\0\131\53\7\0"+
    "\53\53\5\0\106\53\12\0\37\53\1\0\14\53\4\0"+
    "\14\53\12\0\50\53\2\0\5\53\13\0\54\53\4\0"+
    "\32\53\6\0\12\53\46\0\34\53\4\0\77\53\1\0"+
    "\35\53\2\0\13\53\6\0\12\53\15\0\1\53\10\0"+
    "\17\53\101\0\114\53\4\0\12\53\21\0\11\53\14\0"+
    "\164\53\14\0\70\53\10\0\12\53\3\0\61\53\2\0"+
    "\11\53\7\0\53\53\2\0\3\53\20\0\3\53\1\0"+
    "\47\53\5\0\372\53\1\0\33\53\2\0\6\53\2\0"+
    "\46\53\2\0\6\53\2\0\10\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\37\53\2\0\65\53\1\0"+
    "\7\53\1\0\1\53\3\0\3\53\1\0\7\53\3\0"+
    "\4\53\2\0\6\53\4\0\15\53\5\0\3\53\1\0"+
    "\7\53\102\0\2\53\23\0\1\53\34\0\1\53\15\0"+
    "\1\53\20\0\15\53\63\0\41\53\21\0\1\53\4\0"+
    "\1\53\2\0\12\53\1\0\1\53\3\0\5\53\6\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\4\53\1\0"+
    "\13\53\2\0\4\53\5\0\5\53\4\0\1\53\21\0"+
    "\51\53\u022d\0\64\53\26\0\57\53\1\0\57\53\1\0"+
    "\205\53\6\0\11\53\14\0\46\53\1\0\1\53\5\0"+
    "\1\53\2\0\70\53\7\0\1\53\17\0\30\53\11\0"+
    "\7\53\1\0\7\53\1\0\7\53\1\0\7\53\1\0"+
    "\7\53\1\0\7\53\1\0\7\53\1\0\7\53\1\0"+
    "\40\53\57\0\1\53\325\0\3\53\31\0\17\53\1\0"+
    "\5\53\2\0\5\53\4\0\126\53\2\0\2\53\2\0"+
    "\3\53\1\0\132\53\1\0\4\53\5\0\53\53\1\0"+
    "\136\53\21\0\33\53\65\0\306\53\112\0\360\53\20\0"+
    "\215\53\103\0\56\53\2\0\15\53\3\0\34\53\24\0"+
    "\63\53\1\0\12\53\1\0\163\53\45\0\11\53\2\0"+
    "\147\53\2\0\65\53\2\0\5\53\60\0\61\53\30\0"+
    "\64\53\14\0\106\53\12\0\12\53\6\0\30\53\3\0"+
    "\1\53\1\0\61\53\2\0\44\53\14\0\35\53\3\0"+
    "\101\53\16\0\13\53\6\0\37\53\1\0\67\53\11\0"+
    "\16\53\2\0\12\53\6\0\27\53\3\0\111\53\30\0"+
    "\3\53\2\0\20\53\2\0\5\53\12\0\6\53\2\0"+
    "\6\53\2\0\6\53\11\0\7\53\1\0\7\53\1\0"+
    "\53\53\1\0\14\53\10\0\173\53\1\0\2\53\2\0"+
    "\12\53\6\0\244\53\14\0\27\53\4\0\61\53\4\0"+
    "\156\53\2\0\152\53\46\0\7\53\14\0\5\53\5\0"+
    "\14\53\1\0\15\53\1\0\5\53\1\0\1\53\1\0"+
    "\2\53\1\0\2\53\1\0\154\53\41\0\153\53\22\0"+
    "\100\53\2\0\66\53\50\0\14\53\4\0\20\53\20\0"+
    "\20\53\3\0\2\53\30\0\3\53\40\0\5\53\1\0"+
    "\207\53\23\0\12\53\7\0\32\53\4\0\1\53\1\0"+
    "\32\53\13\0\131\53\3\0\6\53\2\0\6\53\2\0"+
    "\6\53\2\0\3\53\43\0\14\53\1\0\32\53\1\0"+
    "\23\53\1\0\2\53\1\0\17\53\2\0\16\53\42\0"+
    "\173\53\105\0\65\53\210\0\1\53\202\0\35\53\3\0"+
    "\61\53\17\0\1\53\37\0\40\53\15\0\36\53\5\0"+
    "\53\53\5\0\36\53\2\0\44\53\4\0\10\53\1\0"+
    "\5\53\52\0\236\53\2\0\12\53\6\0\44\53\4\0"+
    "\44\53\4\0\50\53\10\0\64\53\234\0\67\53\11\0"+
    "\26\53\12\0\10\53\230\0\6\53\2\0\1\53\1\0"+
    "\54\53\1\0\2\53\3\0\1\53\2\0\27\53\12\0"+
    "\27\53\11\0\37\53\101\0\23\53\1\0\2\53\12\0"+
    "\26\53\12\0\32\53\106\0\70\53\6\0\2\53\100\0"+
    "\4\53\1\0\2\53\5\0\10\53\1\0\3\53\1\0"+
    "\35\53\2\0\3\53\4\0\1\53\40\0\35\53\3\0"+
    "\35\53\43\0\10\53\1\0\36\53\31\0\66\53\12\0"+
    "\26\53\12\0\23\53\15\0\22\53\156\0\111\53\67\0"+
    "\63\53\15\0\63\53\15\0\50\53\10\0\12\53\306\0"+
    "\35\53\12\0\1\53\10\0\41\53\217\0\27\53\11\0"+
    "\107\53\37\0\12\53\17\0\74\53\25\0\31\53\7\0"+
    "\12\53\6\0\65\53\1\0\12\53\4\0\3\53\11\0"+
    "\44\53\2\0\1\53\11\0\105\53\4\0\4\53\3\0"+
    "\13\53\1\0\1\53\43\0\22\53\1\0\45\53\6\0"+
    "\1\53\101\0\7\53\1\0\1\53\1\0\4\53\1\0"+
    "\17\53\1\0\12\53\7\0\73\53\5\0\12\53\6\0"+
    "\4\53\1\0\10\53\2\0\2\53\2\0\26\53\1\0"+
    "\7\53\1\0\2\53\1\0\5\53\1\0\12\53\2\0"+
    "\2\53\2\0\3\53\2\0\1\53\6\0\1\53\5\0"+
    "\7\53\2\0\7\53\3\0\5\53\213\0\113\53\5\0"+
    "\12\53\4\0\2\53\40\0\106\53\1\0\1\53\10\0"+
    "\12\53\246\0\66\53\2\0\11\53\27\0\6\53\42\0"+
    "\101\53\3\0\1\53\13\0\12\53\46\0\71\53\7\0"+
    "\12\53\66\0\33\53\2\0\17\53\4\0\12\53\306\0"+
    "\73\53\145\0\112\53\25\0\1\53\240\0\10\53\2\0"+
    "\56\53\2\0\10\53\1\0\2\53\33\0\77\53\10\0"+
    "\1\53\10\0\112\53\3\0\1\53\42\0\71\53\7\0"+
    "\11\53\1\0\55\53\1\0\11\53\17\0\12\53\30\0"+
    "\36\53\2\0\26\53\1\0\16\53\111\0\7\53\1\0"+
    "\2\53\1\0\54\53\3\0\1\53\1\0\2\53\1\0"+
    "\11\53\10\0\12\53\6\0\6\53\1\0\2\53\1\0"+
    "\45\53\1\0\2\53\1\0\6\53\7\0\12\53\u0136\0"+
    "\27\53\11\0\232\53\146\0\157\53\21\0\304\53\274\0"+
    "\57\53\321\0\107\53\271\0\71\53\7\0\37\53\1\0"+
    "\12\53\146\0\36\53\2\0\5\53\13\0\67\53\11\0"+
    "\4\53\14\0\12\53\11\0\25\53\5\0\23\53\260\0"+
    "\100\53\200\0\113\53\4\0\71\53\7\0\21\53\100\0"+
    "\2\53\1\0\1\53\34\0\370\53\10\0\363\53\15\0"+
    "\37\53\61\0\3\53\21\0\4\53\10\0\u018c\53\4\0"+
    "\153\53\5\0\15\53\3\0\11\53\7\0\12\53\3\0"+
    "\2\53\306\0\5\53\3\0\6\53\10\0\10\53\2\0"+
    "\7\53\36\0\4\53\224\0\3\53\273\0\125\53\1\0"+
    "\107\53\1\0\2\53\2\0\1\53\2\0\2\53\2\0"+
    "\4\53\1\0\14\53\1\0\1\53\1\0\7\53\1\0"+
    "\101\53\1\0\4\53\2\0\10\53\1\0\7\53\1\0"+
    "\34\53\1\0\4\53\1\0\5\53\1\0\1\53\3\0"+
    "\7\53\1\0\u0154\53\2\0\31\53\1\0\31\53\1\0"+
    "\37\53\1\0\31\53\1\0\37\53\1\0\31\53\1\0"+
    "\37\53\1\0\31\53\1\0\37\53\1\0\31\53\1\0"+
    "\10\53\2\0\151\53\4\0\62\53\10\0\1\53\16\0"+
    "\1\53\26\0\5\53\1\0\17\53\120\0\7\53\1\0"+
    "\21\53\2\0\7\53\1\0\2\53\1\0\5\53\325\0"+
    "\55\53\3\0\16\53\2\0\12\53\4\0\1\53\u0171\0"+
    "\72\53\6\0\305\53\13\0\7\53\51\0\114\53\4\0"+
    "\12\53\246\0\4\53\1\0\33\53\1\0\2\53\1\0"+
    "\1\53\2\0\1\53\1\0\12\53\1\0\4\53\1\0"+
    "\1\53\1\0\1\53\6\0\1\53\4\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\3\53\1\0\2\53\1\0"+
    "\1\53\2\0\1\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\2\53\1\0\1\53\2\0"+
    "\4\53\1\0\7\53\1\0\4\53\1\0\4\53\1\0"+
    "\1\53\1\0\12\53\1\0\21\53\5\0\3\53\1\0"+
    "\5\53\1\0\21\53\164\0\32\53\6\0\32\53\6\0"+
    "\32\53\166\0\327\53\51\0\65\53\13\0\336\53\2\0"+
    "\u0182\53\16\0\u0131\53\37\0\36\53\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\2\6"+
    "\1\7\1\10\1\11\1\12\1\13\21\14\1\15\1\16"+
    "\2\17\2\14\1\20\1\21\1\22\1\23\1\0\13\14"+
    "\1\24\20\14\1\23\1\25\15\14\1\17\37\14\2\17"+
    "\14\14\1\26\5\14\1\27\1\14\1\17\2\14\1\30"+
    "\1\14\1\31\4\14\1\32\2\17\12\14\1\33\10\14"+
    "\2\17\2\14\1\17\1\14\1\17\1\14\2\17\1\34"+
    "\1\14\1\17\1\14\1\35\2\17\5\14\1\17\1\14"+
    "\1\36\3\14\2\17\2\14\1\17\1\14\2\17\1\37"+
    "\2\17\1\14\1\17\1\14\2\17\5\14\2\17\1\40"+
    "\1\41\3\17\1\42\1\43\1\17\1\14\4\17\1\14"+
    "\1\17\1\14\2\17\1\44\1\14\1\45\2\14\13\17"+
    "\1\46\1\14\1\17\1\14\2\17\1\14\1\17\1\47"+
    "\6\17\1\50\10\17\1\14\4\17\1\14\7\17\1\51"+
    "\7\17\1\52\31\17\1\53\12\17\1\54\6\17\1\55"+
    "\7\17\1\56\3\17\1\57\4\17\1\60\6\17\1\61"+
    "\10\17\1\62\12\17\1\63\1\64\3\17\1\65\4\17"+
    "\1\66\4\17\1\67\6\17\1\70\1\17\1\71\1\17"+
    "\1\72\1\17\1\73\4\17\1\74\1\75\7\17\1\76"+
    "\1\17\1\77\2\17\1\100\3\17\1\101\1\17\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[444];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\176\0\77\0\77\0\275\0\77"+
    "\0\374\0\u013b\0\77\0\77\0\77\0\77\0\77\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\77\0\77\0\u05a9\0\u05e8\0\u0627\0\u0666\0\77\0\77"+
    "\0\77\0\275\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0"+
    "\0\u081f\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8"+
    "\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0"+
    "\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u05e8"+
    "\0\77\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb\0\u113a"+
    "\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3\0\u1332"+
    "\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722"+
    "\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a"+
    "\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12"+
    "\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u01b9\0\u1c4d\0\u1c8c\0\u1ccb"+
    "\0\u1d0a\0\u1d49\0\u01b9\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u01b9"+
    "\0\u1e84\0\u01b9\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u01b9\0\u1fbf"+
    "\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7"+
    "\0\u21f6\0\u2235\0\u2274\0\u01b9\0\u22b3\0\u22f2\0\u2331\0\u2370"+
    "\0\u23af\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea\0\u2529\0\u2568"+
    "\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2\0\u01b9\0\u2721"+
    "\0\u2760\0\u279f\0\u01b9\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da"+
    "\0\u2919\0\u2958\0\u2997\0\u29d6\0\u01b9\0\u2a15\0\u2a54\0\u2a93"+
    "\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u2c8b"+
    "\0\u01b9\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44"+
    "\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c"+
    "\0\u01b9\0\u307b\0\u30ba\0\u30f9\0\u01b9\0\u01b9\0\u3138\0\u3177"+
    "\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f"+
    "\0\u33ae\0\u01b9\0\u33ed\0\u01b9\0\u342c\0\u346b\0\u34aa\0\u34e9"+
    "\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2\0\u36e1"+
    "\0\u3720\0\u05a9\0\u375f\0\u379e\0\u37dd\0\u381c\0\u385b\0\u389a"+
    "\0\u38d9\0\u01b9\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14\0\u3a53"+
    "\0\u05a9\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c"+
    "\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\u3d86\0\u3dc5\0\u3e04"+
    "\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u05a9\0\u3fbd"+
    "\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u01b9\0\u4176"+
    "\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e"+
    "\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8\0\u4527\0\u4566"+
    "\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e"+
    "\0\u05a9\0\u479d\0\u47dc\0\u481b\0\u485a\0\u4899\0\u48d8\0\u4917"+
    "\0\u4956\0\u4995\0\u49d4\0\u05a9\0\u4a13\0\u4a52\0\u4a91\0\u4ad0"+
    "\0\u4b0f\0\u4b4e\0\u05a9\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89"+
    "\0\u4cc8\0\u4d07\0\u05a9\0\u4d46\0\u4d85\0\u4dc4\0\u05a9\0\u4e03"+
    "\0\u4e42\0\u4e81\0\u4ec0\0\u05a9\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc"+
    "\0\u4ffb\0\u503a\0\u05a9\0\u5079\0\u50b8\0\u50f7\0\u5136\0\u5175"+
    "\0\u51b4\0\u51f3\0\u5232\0\u05a9\0\u5271\0\u52b0\0\u52ef\0\u532e"+
    "\0\u536d\0\u53ac\0\u53eb\0\u542a\0\u5469\0\u54a8\0\u05a9\0\u05a9"+
    "\0\u54e7\0\u5526\0\u5565\0\u05a9\0\u55a4\0\u55e3\0\u5622\0\u5661"+
    "\0\u05a9\0\u56a0\0\u56df\0\u571e\0\u575d\0\u05a9\0\u579c\0\u57db"+
    "\0\u581a\0\u5859\0\u5898\0\u58d7\0\u05a9\0\u5916\0\u05a9\0\u5955"+
    "\0\u05a9\0\u5994\0\u05a9\0\u59d3\0\u5a12\0\u5a51\0\u5a90\0\u5acf"+
    "\0\u05a9\0\u5b0e\0\u5b4d\0\u5b8c\0\u5bcb\0\u5c0a\0\u5c49\0\u5c88"+
    "\0\u05a9\0\u5cc7\0\u05a9\0\u5d06\0\u5d45\0\u05a9\0\u5d84\0\u5dc3"+
    "\0\u5e02\0\u05a9\0\u5e41\0\u05a9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[444];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\11\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\21\1\26"+
    "\2\21\1\27\1\30\1\31\1\32\1\33\1\34\1\21"+
    "\1\35\1\36\1\37\1\21\1\40\1\21\1\41\1\42"+
    "\1\43\1\44\4\21\1\45\4\21\1\46\3\21\1\37"+
    "\1\40\1\47\1\50\1\51\101\0\1\3\102\0\1\52"+
    "\2\0\3\52\5\0\30\52\3\0\20\52\14\0\3\11"+
    "\5\0\30\21\2\0\2\43\17\21\13\0\1\53\3\11"+
    "\5\0\30\21\2\0\2\43\17\21\14\0\3\21\5\0"+
    "\6\21\1\54\11\21\1\55\7\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\30\21\2\0\2\43\17\21\14\0"+
    "\3\21\5\0\1\56\6\21\1\57\3\21\1\60\2\21"+
    "\1\61\11\21\2\0\2\43\17\21\14\0\3\21\5\0"+
    "\1\62\27\21\2\0\2\43\17\21\14\0\3\21\5\0"+
    "\13\21\1\63\14\21\2\0\2\43\17\21\14\0\3\21"+
    "\5\0\4\21\1\64\3\21\1\65\17\21\2\0\2\43"+
    "\5\21\1\66\11\21\14\0\3\21\5\0\3\21\1\67"+
    "\11\21\1\70\12\21\2\0\2\43\17\21\14\0\3\21"+
    "\5\0\16\21\1\71\11\21\2\0\2\43\17\21\14\0"+
    "\3\21\5\0\16\21\1\72\11\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\16\21\1\73\4\21\1\74\4\21"+
    "\2\0\2\43\17\21\14\0\3\21\5\0\17\21\1\75"+
    "\10\21\2\0\2\43\17\21\14\0\3\21\5\0\1\76"+
    "\27\21\2\0\2\43\17\21\14\0\3\21\5\0\1\77"+
    "\3\21\1\100\23\21\2\0\2\43\3\21\1\101\13\21"+
    "\14\0\3\21\5\0\4\21\1\102\3\21\1\103\7\21"+
    "\1\104\7\21\2\0\2\43\17\21\14\0\3\21\5\0"+
    "\21\21\1\105\6\21\2\0\2\43\17\21\14\0\3\21"+
    "\5\0\4\21\1\106\23\21\2\0\2\43\3\21\1\106"+
    "\13\21\14\0\3\21\5\0\21\21\1\107\6\21\2\0"+
    "\2\43\12\21\1\107\4\21\14\0\3\43\5\0\30\43"+
    "\2\0\21\43\11\0\1\52\2\0\3\110\5\0\30\110"+
    "\2\0\1\43\20\110\14\0\3\21\5\0\10\21\1\66"+
    "\17\21\2\0\2\43\5\21\1\66\11\21\14\0\3\21"+
    "\5\0\4\21\1\101\23\21\2\0\2\43\3\21\1\101"+
    "\13\21\14\0\1\111\76\0\3\21\5\0\20\21\1\112"+
    "\7\21\2\0\2\43\17\21\14\0\3\21\5\0\4\21"+
    "\1\113\23\21\2\0\2\43\17\21\14\0\3\21\5\0"+
    "\14\21\1\114\13\21\2\0\2\43\17\21\14\0\3\21"+
    "\5\0\4\21\1\115\23\21\2\0\2\43\17\21\14\0"+
    "\3\21\5\0\1\116\27\21\2\0\2\43\17\21\14\0"+
    "\3\21\5\0\13\21\1\117\1\120\13\21\2\0\2\43"+
    "\17\21\14\0\3\21\5\0\22\21\1\121\5\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\10\21\1\122\17\21"+
    "\2\0\2\43\17\21\14\0\3\21\5\0\2\21\1\123"+
    "\25\21\2\0\2\43\17\21\14\0\3\21\5\0\2\21"+
    "\1\124\10\21\1\125\1\21\1\126\12\21\2\0\2\43"+
    "\7\21\1\126\7\21\14\0\3\21\5\0\15\21\1\126"+
    "\12\21\2\0\2\43\7\21\1\126\7\21\14\0\3\21"+
    "\5\0\30\21\2\0\1\43\1\127\17\21\14\0\3\21"+
    "\5\0\3\21\1\130\15\21\1\131\6\21\2\0\2\43"+
    "\17\21\14\0\3\21\5\0\6\21\1\132\21\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\3\21\1\133\24\21"+
    "\2\0\2\43\17\21\14\0\3\21\5\0\14\21\1\134"+
    "\13\21\2\0\2\43\17\21\14\0\3\21\5\0\4\21"+
    "\1\135\23\21\2\0\2\43\17\21\14\0\3\21\5\0"+
    "\2\21\1\136\25\21\2\0\2\43\17\21\14\0\3\21"+
    "\5\0\20\21\1\137\1\140\6\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\3\21\1\141\24\21\2\0\2\43"+
    "\17\21\14\0\3\21\5\0\1\142\20\21\1\143\6\21"+
    "\2\0\2\43\1\142\16\21\14\0\3\21\5\0\1\142"+
    "\27\21\2\0\2\43\1\142\16\21\14\0\3\21\5\0"+
    "\14\21\1\144\11\21\1\145\1\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\4\21\1\146\23\21\2\0\2\43"+
    "\17\21\14\0\3\21\5\0\10\21\1\147\17\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\23\21\1\150\4\21"+
    "\2\0\2\43\17\21\14\0\3\21\5\0\20\21\1\151"+
    "\7\21\2\0\2\43\11\21\1\151\5\21\14\0\3\21"+
    "\5\0\16\21\1\152\11\21\2\0\2\43\10\21\1\152"+
    "\6\21\14\0\3\21\5\0\4\21\1\153\23\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\1\154\27\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\17\21\1\155\10\21"+
    "\2\0\2\43\17\21\14\0\3\21\5\0\2\21\1\156"+
    "\25\21\2\0\2\43\17\21\14\0\3\21\5\0\21\21"+
    "\1\157\6\21\2\0\2\43\17\21\14\0\3\21\5\0"+
    "\23\21\1\160\4\21\2\0\2\43\17\21\14\0\3\21"+
    "\5\0\1\21\1\161\26\21\2\0\2\43\17\21\14\0"+
    "\3\21\5\0\16\21\1\162\11\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\14\21\1\163\13\21\2\0\2\43"+
    "\17\21\14\0\3\21\5\0\7\21\1\164\20\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\7\21\1\165\20\21"+
    "\2\0\2\43\17\21\14\0\3\21\5\0\1\166\27\21"+
    "\2\0\2\43\17\21\14\0\3\21\5\0\30\21\2\0"+
    "\1\43\1\167\17\21\14\0\3\43\5\0\22\43\1\170"+
    "\5\43\2\0\21\43\14\0\3\21\5\0\10\21\1\171"+
    "\17\21\2\0\2\43\17\21\14\0\3\21\5\0\22\21"+
    "\1\172\5\21\2\0\2\43\17\21\14\0\3\21\5\0"+
    "\10\21\1\173\17\21\2\0\2\43\17\21\14\0\3\21"+
    "\5\0\10\21\1\174\17\21\2\0\2\43\17\21\14\0"+
    "\3\21\5\0\1\21\1\175\26\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\24\21\1\176\3\21\2\0\2\43"+
    "\17\21\14\0\3\21\5\0\10\21\1\177\17\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\1\200\27\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\21\21\1\201\6\21"+
    "\2\0\2\43\17\21\14\0\3\21\5\0\10\21\1\202"+
    "\17\21\2\0\2\43\17\21\14\0\3\21\5\0\13\21"+
    "\1\203\14\21\2\0\2\43\6\21\1\203\10\21\14\0"+
    "\3\21\5\0\17\21\1\204\10\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\1\205\27\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\22\21\1\206\5\21\2\0\2\43"+
    "\17\21\14\0\3\21\5\0\14\21\1\207\13\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\24\21\1\210\3\21"+
    "\2\0\2\43\17\21\14\0\3\21\5\0\1\211\27\21"+
    "\2\0\2\43\17\21\14\0\3\21\5\0\21\21\1\212"+
    "\6\21\2\0\2\43\12\21\1\212\4\21\14\0\3\21"+
    "\5\0\15\21\1\213\12\21\2\0\2\43\7\21\1\213"+
    "\7\21\14\0\3\21\5\0\6\21\1\214\21\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\30\21\2\0\1\43"+
    "\1\215\17\21\14\0\3\21\5\0\16\21\1\216\11\21"+
    "\2\0\2\43\17\21\14\0\3\21\5\0\12\21\1\217"+
    "\15\21\2\0\2\43\17\21\14\0\3\21\5\0\4\21"+
    "\1\220\23\21\2\0\2\43\17\21\14\0\3\21\5\0"+
    "\14\21\1\221\13\21\2\0\2\43\17\21\14\0\3\21"+
    "\5\0\16\21\1\222\11\21\2\0\2\43\17\21\14\0"+
    "\3\21\5\0\21\21\1\223\6\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\10\21\1\224\17\21\2\0\2\43"+
    "\17\21\14\0\3\21\5\0\1\225\27\21\2\0\2\43"+
    "\17\21\14\0\3\21\5\0\4\21\1\226\23\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\21\21\1\227\6\21"+
    "\2\0\2\43\17\21\14\0\3\43\5\0\21\43\1\230"+
    "\6\43\2\0\14\43\1\230\4\43\14\0\3\43\5\0"+
    "\20\43\1\231\7\43\2\0\21\43\14\0\3\21\5\0"+
    "\2\21\1\232\25\21\2\0\2\43\17\21\14\0\3\21"+
    "\5\0\10\21\1\233\17\21\2\0\2\43\17\21\14\0"+
    "\3\21\5\0\15\21\1\234\12\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\5\21\1\235\22\21\2\0\2\43"+
    "\17\21\14\0\3\21\5\0\20\21\1\236\7\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\1\237\15\21\1\240"+
    "\11\21\2\0\2\43\17\21\14\0\3\21\5\0\16\21"+
    "\1\241\11\21\2\0\2\43\17\21\14\0\3\21\5\0"+
    "\14\21\1\242\13\21\2\0\2\43\17\21\14\0\3\21"+
    "\5\0\25\21\1\243\2\21\2\0\2\43\17\21\14\0"+
    "\3\21\5\0\16\21\1\244\11\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\10\21\1\245\17\21\2\0\2\43"+
    "\5\21\1\245\11\21\14\0\3\21\5\0\23\21\1\246"+
    "\4\21\2\0\2\43\17\21\14\0\3\21\5\0\16\21"+
    "\1\247\11\21\2\0\2\43\17\21\14\0\3\21\5\0"+
    "\17\21\1\250\10\21\2\0\2\43\17\21\14\0\3\21"+
    "\5\0\10\21\1\251\17\21\2\0\2\43\17\21\14\0"+
    "\3\21\5\0\20\21\1\252\7\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\10\21\1\253\17\21\2\0\2\43"+
    "\5\21\1\253\11\21\14\0\3\21\5\0\1\254\27\21"+
    "\2\0\2\43\17\21\14\0\3\43\5\0\22\43\1\255"+
    "\5\43\2\0\21\43\14\0\3\21\5\0\30\21\2\0"+
    "\1\43\1\256\17\21\14\0\3\21\5\0\1\21\1\257"+
    "\26\21\2\0\2\43\17\21\14\0\3\21\5\0\15\21"+
    "\1\260\12\21\2\0\2\43\17\21\14\0\3\21\5\0"+
    "\30\21\2\0\1\43\1\261\17\21\14\0\3\21\5\0"+
    "\15\21\1\262\12\21\2\0\2\43\17\21\14\0\3\21"+
    "\5\0\30\21\2\0\1\43\1\263\17\21\14\0\3\21"+
    "\5\0\20\21\1\264\7\21\2\0\2\43\17\21\14\0"+
    "\3\43\5\0\16\43\1\265\11\43\2\0\12\43\1\265"+
    "\6\43\14\0\3\43\5\0\10\43\1\266\17\43\2\0"+
    "\21\43\14\0\3\21\5\0\4\21\1\267\23\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\22\21\1\270\5\21"+
    "\2\0\2\43\17\21\14\0\3\21\5\0\30\21\2\0"+
    "\1\43\1\271\17\21\14\0\3\21\5\0\10\21\1\272"+
    "\17\21\2\0\2\43\17\21\14\0\3\21\5\0\4\21"+
    "\1\273\23\21\2\0\2\43\17\21\14\0\3\21\5\0"+
    "\30\21\2\0\1\43\1\274\17\21\14\0\3\21\5\0"+
    "\30\21\2\0\1\43\1\275\17\21\14\0\3\21\5\0"+
    "\15\21\1\276\12\21\2\0\2\43\17\21\14\0\3\21"+
    "\5\0\4\21\1\277\23\21\2\0\2\43\17\21\14\0"+
    "\3\21\5\0\16\21\1\300\11\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\27\21\1\301\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\4\21\1\302\23\21\2\0\2\43"+
    "\17\21\14\0\3\21\5\0\30\21\2\0\1\43\1\303"+
    "\17\21\14\0\3\21\5\0\16\21\1\304\11\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\1\305\27\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\10\21\1\306\17\21"+
    "\2\0\2\43\17\21\14\0\3\21\5\0\16\21\1\307"+
    "\11\21\2\0\2\43\10\21\1\307\6\21\14\0\3\21"+
    "\5\0\20\21\1\310\7\21\2\0\2\43\17\21\14\0"+
    "\3\43\5\0\4\43\1\311\23\43\2\0\21\43\14\0"+
    "\3\43\5\0\22\43\1\312\5\43\2\0\21\43\14\0"+
    "\3\21\5\0\16\21\1\313\11\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\1\314\27\21\2\0\2\43\17\21"+
    "\14\0\3\43\5\0\23\43\1\315\4\43\2\0\21\43"+
    "\14\0\3\21\5\0\1\316\27\21\2\0\2\43\17\21"+
    "\14\0\3\43\5\0\2\43\1\317\11\43\1\320\13\43"+
    "\2\0\21\43\14\0\3\21\5\0\16\21\1\321\11\21"+
    "\2\0\2\43\17\21\14\0\3\43\5\0\13\43\1\322"+
    "\14\43\2\0\10\43\1\322\10\43\14\0\3\43\5\0"+
    "\24\43\1\323\3\43\2\0\21\43\14\0\3\21\5\0"+
    "\23\21\1\324\4\21\2\0\2\43\17\21\14\0\3\43"+
    "\5\0\23\43\1\325\4\43\2\0\21\43\14\0\3\21"+
    "\5\0\2\21\1\326\25\21\2\0\2\43\17\21\14\0"+
    "\3\43\5\0\22\43\1\327\5\43\2\0\21\43\14\0"+
    "\3\43\5\0\17\43\1\330\10\43\2\0\21\43\14\0"+
    "\3\21\5\0\4\21\1\331\23\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\22\21\1\332\5\21\2\0\2\43"+
    "\17\21\14\0\3\21\5\0\20\21\1\333\7\21\2\0"+
    "\2\43\17\21\14\0\3\21\5\0\1\334\27\21\2\0"+
    "\2\43\1\334\16\21\14\0\3\21\5\0\21\21\1\335"+
    "\6\21\2\0\2\43\17\21\14\0\3\43\5\0\24\43"+
    "\1\336\3\43\2\0\21\43\14\0\3\21\5\0\30\21"+
    "\2\0\1\43\1\337\17\21\14\0\3\21\5\0\16\21"+
    "\1\340\11\21\2\0\2\43\17\21\14\0\3\21\5\0"+
    "\15\21\1\341\12\21\2\0\2\43\7\21\1\341\7\21"+
    "\14\0\3\21\5\0\30\21\2\0\1\43\1\342\17\21"+
    "\14\0\3\43\5\0\26\43\1\343\1\43\2\0\21\43"+
    "\14\0\3\43\5\0\4\43\1\344\23\43\2\0\21\43"+
    "\14\0\3\21\5\0\26\21\1\345\1\21\2\0\2\43"+
    "\17\21\14\0\3\21\5\0\21\21\1\346\6\21\2\0"+
    "\2\43\17\21\14\0\3\43\5\0\21\43\1\347\6\43"+
    "\2\0\21\43\14\0\3\21\5\0\20\21\1\350\7\21"+
    "\2\0\2\43\17\21\14\0\3\43\5\0\20\43\1\351"+
    "\7\43\2\0\21\43\14\0\3\43\5\0\16\43\1\352"+
    "\11\43\2\0\21\43\14\0\3\43\5\0\10\43\1\353"+
    "\17\43\2\0\7\43\1\353\11\43\14\0\3\43\5\0"+
    "\10\43\1\354\17\43\2\0\21\43\14\0\3\21\5\0"+
    "\2\21\1\355\25\21\2\0\2\43\17\21\14\0\3\43"+
    "\5\0\21\43\1\356\6\43\2\0\21\43\14\0\3\21"+
    "\5\0\1\357\27\21\2\0\2\43\17\21\14\0\3\43"+
    "\5\0\20\43\1\360\7\43\2\0\21\43\14\0\3\43"+
    "\5\0\1\361\27\43\2\0\21\43\14\0\3\21\5\0"+
    "\21\21\1\362\6\21\2\0\2\43\17\21\14\0\3\21"+
    "\5\0\20\21\1\363\7\21\2\0\2\43\17\21\14\0"+
    "\3\21\5\0\3\21\1\364\24\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\20\21\1\365\7\21\2\0\2\43"+
    "\11\21\1\365\5\21\14\0\3\21\5\0\22\21\1\366"+
    "\5\21\2\0\2\43\17\21\14\0\3\43\5\0\10\43"+
    "\1\367\17\43\2\0\21\43\14\0\3\43\5\0\17\43"+
    "\1\370\10\43\2\0\21\43\14\0\3\21\5\0\30\21"+
    "\2\0\1\43\1\371\17\21\14\0\3\43\5\0\2\43"+
    "\1\372\25\43\2\0\21\43\14\0\3\43\5\0\22\43"+
    "\1\373\5\43\2\0\21\43\14\0\3\43\5\0\26\43"+
    "\1\374\1\43\2\0\21\43\14\0\3\43\5\0\23\43"+
    "\1\375\4\43\2\0\21\43\14\0\3\21\5\0\30\21"+
    "\2\0\1\43\1\376\17\21\14\0\3\43\5\0\4\43"+
    "\1\377\23\43\2\0\21\43\14\0\3\43\5\0\3\43"+
    "\1\u0100\24\43\2\0\21\43\14\0\3\43\5\0\2\43"+
    "\1\u0101\25\43\2\0\3\43\1\u0101\15\43\14\0\3\43"+
    "\5\0\1\u0102\27\43\2\0\21\43\14\0\3\21\5\0"+
    "\10\21\1\u0103\17\21\2\0\2\43\17\21\14\0\3\43"+
    "\5\0\23\43\1\u0104\4\43\2\0\21\43\14\0\3\21"+
    "\5\0\20\21\1\u0105\7\21\2\0\2\43\17\21\14\0"+
    "\3\43\5\0\10\43\1\u0106\17\43\2\0\21\43\14\0"+
    "\3\43\5\0\21\43\1\u0107\6\43\2\0\21\43\14\0"+
    "\3\21\5\0\16\21\1\u0108\11\21\2\0\2\43\17\21"+
    "\14\0\3\21\5\0\30\21\2\0\1\43\1\u0109\17\21"+
    "\14\0\3\21\5\0\1\u010a\27\21\2\0\2\43\17\21"+
    "\14\0\3\43\5\0\21\43\1\u010b\6\43\2\0\21\43"+
    "\14\0\3\43\5\0\20\43\1\u010c\7\43\2\0\21\43"+
    "\14\0\3\43\5\0\1\u010d\1\43\1\u010e\12\43\1\u010f"+
    "\12\43\2\0\21\43\14\0\3\43\5\0\16\43\1\u0110"+
    "\11\43\2\0\21\43\14\0\3\43\5\0\16\43\1\u0111"+
    "\11\43\2\0\21\43\14\0\3\43\5\0\22\43\1\u0112"+
    "\5\43\2\0\21\43\14\0\3\43\5\0\1\u0113\27\43"+
    "\2\0\21\43\14\0\3\43\5\0\2\43\1\u0114\17\43"+
    "\1\u0115\1\u0116\4\43\2\0\21\43\14\0\3\43\5\0"+
    "\1\u0117\27\43\2\0\21\43\14\0\3\43\5\0\10\43"+
    "\1\u0118\17\43\2\0\21\43\14\0\3\43\5\0\10\43"+
    "\1\u0119\17\43\2\0\7\43\1\u0119\11\43\14\0\3\21"+
    "\5\0\16\21\1\u011a\11\21\2\0\2\43\17\21\14\0"+
    "\3\43\5\0\1\u011b\27\43\2\0\21\43\14\0\3\21"+
    "\5\0\30\21\2\0\1\43\1\u011c\17\21\14\0\3\43"+
    "\5\0\24\43\1\u011d\3\43\2\0\21\43\14\0\3\43"+
    "\5\0\21\43\1\u011e\6\43\2\0\21\43\14\0\3\21"+
    "\5\0\21\21\1\u011f\6\21\2\0\2\43\17\21\14\0"+
    "\3\43\5\0\21\43\1\u0120\6\43\2\0\14\43\1\u0120"+
    "\4\43\14\0\3\43\5\0\10\43\1\u0121\17\43\2\0"+
    "\21\43\14\0\3\43\5\0\4\43\1\u0122\23\43\2\0"+
    "\21\43\14\0\3\43\5\0\15\43\1\u0123\12\43\2\0"+
    "\21\43\14\0\3\43\5\0\20\43\1\u0124\7\43\2\0"+
    "\21\43\14\0\3\43\5\0\23\43\1\u0125\4\43\2\0"+
    "\21\43\14\0\3\43\5\0\14\43\1\u0126\13\43\2\0"+
    "\21\43\14\0\3\43\5\0\16\43\1\u0127\11\43\2\0"+
    "\21\43\14\0\3\43\5\0\20\43\1\u0128\7\43\2\0"+
    "\21\43\14\0\3\43\5\0\16\43\1\u0129\11\43\2\0"+
    "\21\43\14\0\3\43\5\0\20\43\1\u012a\7\43\2\0"+
    "\21\43\14\0\3\43\5\0\21\43\1\u012b\6\43\2\0"+
    "\21\43\14\0\3\43\5\0\2\43\1\u012c\25\43\2\0"+
    "\21\43\14\0\3\43\5\0\5\43\1\u012d\22\43\2\0"+
    "\21\43\14\0\3\43\5\0\22\43\1\u012e\5\43\2\0"+
    "\15\43\1\u012e\3\43\14\0\3\21\5\0\15\21\1\u012f"+
    "\12\21\2\0\2\43\17\21\14\0\3\43\5\0\20\43"+
    "\1\u0130\7\43\2\0\21\43\14\0\3\43\5\0\2\43"+
    "\1\u0131\17\43\1\u0132\1\u0133\4\43\2\0\21\43\14\0"+
    "\3\43\5\0\10\43\1\u0134\17\43\2\0\21\43\14\0"+
    "\3\43\5\0\25\43\1\u0135\2\43\2\0\21\43\14\0"+
    "\3\21\5\0\30\21\2\0\1\43\1\u0136\17\21\14\0"+
    "\3\43\5\0\16\43\1\u0137\11\43\2\0\12\43\1\u0137"+
    "\6\43\14\0\3\43\5\0\1\43\1\u0138\26\43\2\0"+
    "\21\43\14\0\3\43\5\0\6\43\1\u0139\21\43\2\0"+
    "\21\43\14\0\3\43\5\0\22\43\1\u013a\5\43\2\0"+
    "\21\43\14\0\3\43\5\0\4\43\1\u013b\23\43\2\0"+
    "\21\43\14\0\3\43\5\0\4\43\1\u013c\23\43\2\0"+
    "\21\43\14\0\3\43\5\0\17\43\1\u013d\10\43\2\0"+
    "\21\43\14\0\3\43\5\0\10\43\1\u013e\17\43\2\0"+
    "\21\43\14\0\3\43\5\0\14\43\1\u013f\13\43\2\0"+
    "\21\43\14\0\3\43\5\0\10\43\1\u0140\17\43\2\0"+
    "\21\43\14\0\3\43\5\0\23\43\1\u0141\4\43\2\0"+
    "\21\43\14\0\3\43\5\0\10\43\1\u0142\17\43\2\0"+
    "\21\43\14\0\3\43\5\0\10\43\1\u0143\17\43\2\0"+
    "\21\43\14\0\3\43\5\0\23\43\1\u0144\4\43\2\0"+
    "\16\43\1\u0144\2\43\14\0\3\43\5\0\10\43\1\u0145"+
    "\17\43\2\0\21\43\14\0\3\43\5\0\16\43\1\u0146"+
    "\11\43\2\0\21\43\14\0\3\43\5\0\20\43\1\u0147"+
    "\7\43\2\0\21\43\14\0\3\43\5\0\21\43\1\u0148"+
    "\6\43\2\0\21\43\14\0\3\43\5\0\1\u0149\27\43"+
    "\2\0\21\43\14\0\3\43\5\0\16\43\1\u014a\11\43"+
    "\2\0\21\43\14\0\3\43\5\0\2\43\1\u014b\17\43"+
    "\1\u014c\5\43\2\0\21\43\14\0\3\43\5\0\13\43"+
    "\1\u014d\14\43\2\0\10\43\1\u014d\10\43\14\0\3\43"+
    "\5\0\13\43\1\u014e\14\43\2\0\21\43\14\0\3\43"+
    "\5\0\23\43\1\u014f\4\43\2\0\21\43\14\0\3\43"+
    "\5\0\10\43\1\u0150\17\43\2\0\21\43\14\0\3\43"+
    "\5\0\1\u0151\27\43\2\0\21\43\14\0\3\43\5\0"+
    "\24\43\1\u0152\3\43\2\0\21\43\14\0\3\43\5\0"+
    "\16\43\1\u0153\11\43\2\0\21\43\14\0\3\43\5\0"+
    "\16\43\1\u0154\11\43\2\0\21\43\14\0\3\43\5\0"+
    "\17\43\1\u0155\10\43\2\0\21\43\14\0\3\43\5\0"+
    "\24\43\1\u0156\3\43\2\0\21\43\14\0\3\43\5\0"+
    "\1\u0157\27\43\2\0\21\43\14\0\3\43\5\0\16\43"+
    "\1\u0158\11\43\2\0\21\43\14\0\3\43\5\0\2\43"+
    "\1\u0159\25\43\2\0\21\43\14\0\3\43\5\0\3\43"+
    "\1\u015a\24\43\2\0\4\43\1\u015a\14\43\14\0\3\43"+
    "\5\0\16\43\1\u015b\11\43\2\0\21\43\14\0\3\43"+
    "\5\0\14\43\1\u015c\13\43\2\0\21\43\14\0\3\43"+
    "\5\0\10\43\1\u015d\17\43\2\0\21\43\14\0\3\43"+
    "\5\0\23\43\1\u015e\4\43\2\0\21\43\14\0\3\43"+
    "\5\0\20\43\1\u015f\7\43\2\0\21\43\14\0\3\43"+
    "\5\0\16\43\1\u0160\11\43\2\0\21\43\14\0\3\43"+
    "\5\0\20\43\1\u0161\7\43\2\0\21\43\14\0\3\43"+
    "\5\0\10\43\1\u0162\17\43\2\0\7\43\1\u0162\11\43"+
    "\14\0\3\43\5\0\4\43\1\u0163\23\43\2\0\21\43"+
    "\14\0\3\43\5\0\15\43\1\u0164\12\43\2\0\21\43"+
    "\14\0\3\43\5\0\6\43\1\u0165\21\43\2\0\21\43"+
    "\14\0\3\43\5\0\2\43\1\u0166\25\43\2\0\21\43"+
    "\14\0\3\43\5\0\16\43\1\u0167\11\43\2\0\21\43"+
    "\14\0\3\43\5\0\15\43\1\u0168\12\43\2\0\21\43"+
    "\14\0\3\43\5\0\16\43\1\u0169\11\43\2\0\21\43"+
    "\14\0\3\43\5\0\10\43\1\u016a\17\43\2\0\21\43"+
    "\14\0\3\43\5\0\20\43\1\u016b\7\43\2\0\21\43"+
    "\14\0\3\43\5\0\15\43\1\u016c\12\43\2\0\21\43"+
    "\14\0\3\43\5\0\1\u016d\27\43\2\0\21\43\14\0"+
    "\3\43\5\0\4\43\1\u016e\23\43\2\0\1\43\1\u016f"+
    "\3\43\1\u016e\13\43\14\0\3\43\5\0\17\43\1\u0170"+
    "\10\43\2\0\21\43\14\0\3\43\5\0\24\43\1\u0171"+
    "\3\43\2\0\21\43\14\0\3\43\5\0\1\u0172\27\43"+
    "\2\0\21\43\14\0\3\43\5\0\3\43\1\u0173\24\43"+
    "\2\0\21\43\14\0\3\43\5\0\14\43\1\u0174\13\43"+
    "\2\0\21\43\14\0\3\43\5\0\10\43\1\u0175\17\43"+
    "\2\0\21\43\14\0\3\43\5\0\2\43\1\u0176\25\43"+
    "\2\0\3\43\1\u0176\15\43\14\0\3\43\5\0\22\43"+
    "\1\u0177\5\43\2\0\21\43\14\0\3\43\5\0\23\43"+
    "\1\u0178\4\43\2\0\21\43\14\0\3\43\5\0\10\43"+
    "\1\u0179\17\43\2\0\21\43\14\0\3\43\5\0\4\43"+
    "\1\u017a\23\43\2\0\21\43\14\0\3\43\5\0\15\43"+
    "\1\u017b\12\43\2\0\21\43\14\0\3\43\5\0\1\u017c"+
    "\27\43\2\0\21\43\14\0\3\43\5\0\10\43\1\u017d"+
    "\17\43\2\0\21\43\14\0\3\43\5\0\2\43\1\u017e"+
    "\25\43\2\0\21\43\14\0\3\43\5\0\21\43\1\u017f"+
    "\6\43\2\0\14\43\1\u017f\4\43\14\0\3\43\5\0"+
    "\20\43\1\u0180\7\43\2\0\13\43\1\u0180\5\43\14\0"+
    "\3\43\5\0\16\43\1\u0181\11\43\2\0\21\43\14\0"+
    "\3\43\5\0\10\43\1\u0182\17\43\2\0\21\43\14\0"+
    "\3\43\5\0\20\43\1\u0183\7\43\2\0\21\43\14\0"+
    "\3\43\5\0\17\43\1\u0184\10\43\2\0\21\43\14\0"+
    "\3\43\5\0\24\43\1\u0185\3\43\2\0\21\43\14\0"+
    "\3\43\5\0\10\43\1\u0186\17\43\2\0\7\43\1\u0186"+
    "\11\43\14\0\3\43\5\0\1\u0187\27\43\2\0\21\43"+
    "\14\0\3\43\5\0\16\43\1\u0188\11\43\2\0\21\43"+
    "\14\0\3\43\5\0\16\43\1\u0189\11\43\2\0\21\43"+
    "\14\0\3\43\5\0\15\43\1\u018a\12\43\2\0\21\43"+
    "\14\0\3\43\5\0\4\43\1\u018b\23\43\2\0\21\43"+
    "\14\0\3\43\5\0\16\43\1\u018c\11\43\2\0\21\43"+
    "\14\0\3\43\5\0\10\43\1\u018d\17\43\2\0\21\43"+
    "\14\0\3\43\5\0\30\43\2\0\1\43\1\u018e\17\43"+
    "\14\0\3\43\5\0\4\43\1\u018f\23\43\2\0\5\43"+
    "\1\u018f\13\43\14\0\3\43\5\0\15\43\1\u0190\12\43"+
    "\2\0\21\43\14\0\3\43\5\0\1\u0191\27\43\2\0"+
    "\21\43\14\0\3\43\5\0\10\43\1\u0192\17\43\2\0"+
    "\21\43\14\0\3\43\5\0\16\43\1\u0193\11\43\2\0"+
    "\21\43\14\0\3\43\5\0\10\43\1\u0194\17\43\2\0"+
    "\21\43\14\0\3\43\5\0\22\43\1\u0195\5\43\2\0"+
    "\15\43\1\u0195\3\43\14\0\3\43\5\0\15\43\1\u0196"+
    "\12\43\2\0\21\43\14\0\3\43\5\0\22\43\1\u0197"+
    "\5\43\2\0\21\43\14\0\3\43\5\0\15\43\1\u0198"+
    "\12\43\2\0\21\43\14\0\3\43\5\0\16\43\1\u0199"+
    "\11\43\2\0\21\43\14\0\3\43\5\0\20\43\1\u019a"+
    "\7\43\2\0\13\43\1\u019a\5\43\14\0\3\43\5\0"+
    "\1\u019b\27\43\2\0\2\43\1\u019b\16\43\14\0\3\43"+
    "\5\0\4\43\1\u019c\23\43\2\0\21\43\14\0\3\43"+
    "\5\0\16\43\1\u019d\11\43\2\0\21\43\14\0\3\43"+
    "\5\0\15\43\1\u019e\12\43\2\0\21\43\14\0\3\43"+
    "\5\0\1\u019f\27\43\2\0\21\43\14\0\3\43\5\0"+
    "\23\43\1\u01a0\4\43\2\0\16\43\1\u01a0\2\43\14\0"+
    "\3\43\5\0\4\43\1\u01a1\23\43\2\0\21\43\14\0"+
    "\3\43\5\0\22\43\1\u01a2\5\43\2\0\21\43\14\0"+
    "\3\43\5\0\15\43\1\u01a3\12\43\2\0\21\43\14\0"+
    "\3\43\5\0\4\43\1\u01a4\23\43\2\0\5\43\1\u01a4"+
    "\13\43\14\0\3\43\5\0\13\43\1\u01a5\14\43\2\0"+
    "\10\43\1\u01a5\10\43\14\0\3\43\5\0\15\43\1\u01a6"+
    "\12\43\2\0\21\43\14\0\3\43\5\0\4\43\1\u01a7"+
    "\23\43\2\0\21\43\14\0\3\43\5\0\3\43\1\u01a8"+
    "\24\43\2\0\4\43\1\u01a8\14\43\14\0\3\43\5\0"+
    "\4\43\1\u01a9\23\43\2\0\21\43\14\0\3\43\5\0"+
    "\1\u01aa\27\43\2\0\2\43\1\u01aa\16\43\14\0\3\43"+
    "\5\0\10\43\1\u01ab\17\43\2\0\7\43\1\u01ab\11\43"+
    "\14\0\3\43\5\0\22\43\1\u01ac\5\43\2\0\21\43"+
    "\14\0\3\43\5\0\15\43\1\u01ad\12\43\2\0\21\43"+
    "\14\0\3\43\5\0\4\43\1\u01ae\23\43\2\0\5\43"+
    "\1\u01ae\13\43\14\0\3\43\5\0\13\43\1\u01af\14\43"+
    "\2\0\10\43\1\u01af\10\43\14\0\3\43\5\0\27\43"+
    "\1\u01b0\2\0\21\43\14\0\3\43\5\0\4\43\1\u01b1"+
    "\23\43\2\0\21\43\14\0\3\43\5\0\22\43\1\u01b2"+
    "\5\43\2\0\21\43\14\0\3\43\5\0\21\43\1\u01b3"+
    "\6\43\2\0\14\43\1\u01b3\4\43\14\0\3\43\5\0"+
    "\10\43\1\u01b4\17\43\2\0\7\43\1\u01b4\11\43\14\0"+
    "\3\43\5\0\1\u01b5\27\43\2\0\2\43\1\u01b5\16\43"+
    "\14\0\3\43\5\0\4\43\1\u01b6\23\43\2\0\21\43"+
    "\14\0\3\43\5\0\27\43\1\u01b7\2\0\21\43\14\0"+
    "\3\43\5\0\3\43\1\u01b8\24\43\2\0\4\43\1\u01b8"+
    "\14\43\14\0\3\43\5\0\1\u01b9\27\43\2\0\2\43"+
    "\1\u01b9\16\43\14\0\3\43\5\0\1\u01ba\27\43\2\0"+
    "\2\43\1\u01ba\16\43\14\0\3\43\5\0\3\43\1\u01bb"+
    "\24\43\2\0\4\43\1\u01bb\14\43\14\0\3\43\5\0"+
    "\1\u01bc\27\43\2\0\2\43\1\u01bc\16\43\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[24192];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\2\11\1\1\1\11\2\1\5\11"+
    "\21\1\2\11\4\1\3\11\1\1\1\0\35\1\1\11"+
    "\u0173\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[444];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type){
        return new Symbol(type, yyline+1,yycolumn+1);
    }
    private Symbol symbol(int type, Object value){
        //System.out.println(type + " line: " + (yyline+1) + " col: "+(yycolumn+1) + " " + value);
        return new Symbol(type, yyline+1, yycolumn+1, value);
    }
    private void error(){
        ErrorsLP.addError(yytext(), yyline+1, yycolumn+1, "Error Léxico","Cadena no definida");
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public RequestLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error();
            }
          // fall through
          case 67: break;
          case 2:
            { /* ignore */
            }
          // fall through
          case 68: break;
          case 3:
            { return symbol(EX, yytext());
            }
          // fall through
          case 69: break;
          case 4:
            { return symbol(Q, yytext());
            }
          // fall through
          case 70: break;
          case 5:
            { return symbol(COMMA, yytext());
            }
          // fall through
          case 71: break;
          case 6:
            { return symbol(DIGIT, Integer.parseInt(yytext()));
            }
          // fall through
          case 72: break;
          case 7:
            { return symbol(COLON, yytext());
            }
          // fall through
          case 73: break;
          case 8:
            { return symbol(LT, yytext());
            }
          // fall through
          case 74: break;
          case 9:
            { return symbol(EQUAL, yytext());
            }
          // fall through
          case 75: break;
          case 10:
            { return symbol(GT, yytext());
            }
          // fall through
          case 76: break;
          case 11:
            { return symbol(QM, yytext());
            }
          // fall through
          case 77: break;
          case 12:
            { return symbol(STRINGCONTENT, yytext());
            }
          // fall through
          case 78: break;
          case 13:
            { return symbol(LBRACKET, yytext());
            }
          // fall through
          case 79: break;
          case 14:
            { return symbol(RBRACKET, yytext());
            }
          // fall through
          case 80: break;
          case 15:
            { ErrorsLP.addError(yytext(), yyline+1, yycolumn+1, "Error Léxico","Cadena no definida");
            }
          // fall through
          case 81: break;
          case 16:
            { return symbol(LBRACE, yytext());
            }
          // fall through
          case 82: break;
          case 17:
            { return symbol(VERTICAL_BAR, yytext());
            }
          // fall through
          case 83: break;
          case 18:
            { return symbol(RBRACE, yytext());
            }
          // fall through
          case 84: break;
          case 19:
            { return symbol(IDENTIFIER, yytext());
            }
          // fall through
          case 85: break;
          case 20:
            { return symbol(ID, yytext());
            }
          // fall through
          case 86: break;
          case 21:
            { return symbol(ONE, yytext());
            }
          // fall through
          case 87: break;
          case 22:
            { return symbol(TEMA, yytext());
            }
          // fall through
          case 88: break;
          case 23:
            { return symbol(XSON, yytext());
            }
          // fall through
          case 89: break;
          case 24:
            { return symbol(CLASE, yytext());
            }
          // fall through
          case 90: break;
          case 25:
            { return symbol(COMBO, yytext());
            }
          // fall through
          case 91: break;
          case 26:
            { return symbol(FILAS, yytext());
            }
          // fall through
          case 92: break;
          case 27:
            { return symbol(RADIO, yytext());
            }
          // fall through
          case 93: break;
          case 28:
            { return symbol(INDICE, yytext());
            }
          // fall through
          case 94: break;
          case 29:
            { return symbol(NOMBRE, yytext());
            }
          // fall through
          case 95: break;
          case 30:
            { return symbol(TRIVIA, yytext());
            }
          // fall through
          case 96: break;
          case 31:
            { return symbol(FICHERO, yytext());
            }
          // fall through
          case 97: break;
          case 32:
            { return symbol(USUARIO, yytext());
            }
          // fall through
          case 98: break;
          case 33:
            { return symbol(VERSION, yytext());
            }
          // fall through
          case 99: break;
          case 34:
            { return symbol(CHECKBOX, yytext());
            }
          // fall through
          case 100: break;
          case 35:
            { return symbol(COLUMNAS, yytext());
            }
          // fall through
          case 101: break;
          case 36:
            { return symbol(OPCIONES, yytext());
            }
          // fall through
          case 102: break;
          case 37:
            { return symbol(PASSWORD, yytext());
            }
          // fall through
          case 103: break;
          case 38:
            { return symbol(ID_TRIVIA, yytext());
            }
          // fall through
          case 104: break;
          case 39:
            { return symbol(RESPUESTA, yytext());
            }
          // fall through
          case 105: break;
          case 40:
            { return symbol(AREA_TEXTO, yytext());
            }
          // fall through
          case 106: break;
          case 41:
            { return symbol(CAMPO_TEXTO, yytext());
            }
          // fall through
          case 107: break;
          case 42:
            { return symbol(INSTITUCION, yytext());
            }
          // fall through
          case 108: break;
          case 43:
            { return symbol(NUEVA_TRIVIA, yytext());
            }
          // fall through
          case 109: break;
          case 44:
            { return symbol(DATOS_USUARIO, yytext());
            }
          // fall through
          case 110: break;
          case 45:
            { return symbol(LOGIN_USUARIO, yytext());
            }
          // fall through
          case 111: break;
          case 46:
            { return symbol(TEXTO_VISIBLE, yytext());
            }
          // fall through
          case 112: break;
          case 47:
            { return symbol(USUARIO_NUEVO, yytext());
            }
          // fall through
          case 113: break;
          case 48:
            { return symbol(FECHA_CREACION, yytext());
            }
          // fall through
          case 114: break;
          case 49:
            { return symbol(NUEVO_PASSWORD, yytext());
            }
          // fall through
          case 115: break;
          case 50:
            { return symbol(ELIMINAR_TRIVIA, yytext());
            }
          // fall through
          case 116: break;
          case 51:
            { return symbol(TIEMPO_PREGUNTA, yytext());
            }
          // fall through
          case 117: break;
          case 52:
            { return symbol(USUARIO_ANTIGUO, yytext());
            }
          // fall through
          case 118: break;
          case 53:
            { return symbol(ELIMINAR_USUARIO, yytext());
            }
          // fall through
          case 119: break;
          case 54:
            { return symbol(MODIFICAR_TRIVIA, yytext());
            }
          // fall through
          case 120: break;
          case 55:
            { return symbol(USUARIO_CREACION, yytext());
            }
          // fall through
          case 121: break;
          case 56:
            { return symbol(MODIFICAR_USUARIO, yytext());
            }
          // fall through
          case 122: break;
          case 57:
            { return symbol(PARAMETROS_TRIVIA, yytext());
            }
          // fall through
          case 123: break;
          case 58:
            { return symbol(AGREGAR_COMPONENTE, yytext());
            }
          // fall through
          case 124: break;
          case 59:
            { return symbol(FECHA_MODIFICACION, yytext());
            }
          // fall through
          case 125: break;
          case 60:
            { return symbol(REALIZAR_SOLICITUD, yytext());
            }
          // fall through
          case 126: break;
          case 61:
            { return symbol(ELIMINAR_COMPONENTE, yytext());
            }
          // fall through
          case 127: break;
          case 62:
            { return symbol(MODIFICAR_COMPONENTE, yytext());
            }
          // fall through
          case 128: break;
          case 63:
            { return symbol(REALIZAR_SOLICITUDES, yytext());
            }
          // fall through
          case 129: break;
          case 64:
            { return symbol(PARAMETROS_COMPONENTE, yytext());
            }
          // fall through
          case 130: break;
          case 65:
            { return symbol(FIN_SOLICITUD_REALIZADA, yytext());
            }
          // fall through
          case 131: break;
          case 66:
            { return symbol(FIN_SOLICITUDES_REALIZADA, yytext());
            }
          // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
