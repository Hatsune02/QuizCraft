
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navi.quizcraftweb.backend.parser_lexer.db;

import java_cup.runtime.*;
import java.util.*;
import java.text.DecimalFormat;
import com.navi.quizcraftweb.backend.parser_lexer.*;
import com.navi.quizcraftweb.backend.model.*;
import com.navi.quizcraftweb.backend.parser_lexer.db.objs.Position;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class DBParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public DBParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public DBParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DBParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\003\006\000\002\003\005" +
    "\000\002\007\003\000\002\007\005\000\002\006\012\000" +
    "\002\010\006\000\002\011\006\000\002\012\006\000\002" +
    "\013\006\000\002\014\006\000\002\015\005\000\002\004" +
    "\006\000\002\004\005\000\002\005\006\000\002\017\003" +
    "\000\002\017\005\000\002\016\014\000\002\020\006\000" +
    "\002\021\006\000\002\023\006\000\002\022\006\000\002" +
    "\026\010\000\002\026\007\000\002\025\003\000\002\025" +
    "\005\000\002\024\015\000\002\027\006\000\002\030\006" +
    "\000\002\034\006\000\002\045\006\000\002\031\006\000" +
    "\002\032\006\000\002\036\006\000\002\037\006\000\002" +
    "\033\005\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\042\006\000\002\042\007\000" +
    "\002\041\003\000\002\041\005\000\002\040\011\000\002" +
    "\043\006\000\002\046\006\000\002\044\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\010\004\004\005\005\006\006\001\002\000" +
    "\004\033\227\001\002\000\004\033\220\001\002\000\004" +
    "\033\014\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\013\001\002\000\004\002\ufffe\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002\000\004\035\015\001" +
    "\002\000\004\007\021\001\002\000\004\034\017\001\002" +
    "\000\004\002\ufff0\001\002\000\004\050\026\001\002\000" +
    "\004\053\022\001\002\000\004\044\023\001\002\000\004" +
    "\054\024\001\002\000\004\050\uffec\001\002\000\004\012" +
    "\032\001\002\000\004\053\027\001\002\000\004\044\030" +
    "\001\002\000\004\054\031\001\002\000\006\012\ufff6\047" +
    "\ufff6\001\002\000\004\053\215\001\002\000\004\010\034" +
    "\001\002\000\004\053\212\001\002\000\004\011\037\001" +
    "\002\000\004\051\043\001\002\000\004\053\040\001\002" +
    "\000\004\044\041\001\002\000\004\054\042\001\002\000" +
    "\004\051\uffe9\001\002\000\004\053\207\001\002\000\004" +
    "\037\046\001\002\000\004\040\147\001\002\000\004\053" +
    "\047\001\002\000\004\033\050\001\002\000\006\034\052" +
    "\035\051\001\002\000\004\013\062\001\002\000\004\054" +
    "\061\001\002\000\006\034\uffe6\054\uffe6\001\002\000\006" +
    "\034\056\054\055\001\002\000\004\035\051\001\002\000" +
    "\004\054\057\001\002\000\004\040\uffe8\001\002\000\006" +
    "\034\uffe5\054\uffe5\001\002\000\004\040\uffe7\001\002\000" +
    "\004\053\143\001\002\000\004\014\064\001\002\000\004" +
    "\053\140\001\002\000\004\015\066\001\002\000\004\053" +
    "\126\001\002\000\004\016\071\001\002\000\004\017\075" +
    "\001\002\000\004\053\072\001\002\000\004\055\073\001" +
    "\002\000\004\054\074\001\002\000\004\017\uffe0\001\002" +
    "\000\004\053\123\001\002\000\004\020\100\001\002\000" +
    "\004\021\105\001\002\000\004\053\101\001\002\000\004" +
    "\044\102\001\002\000\004\054\103\001\002\000\004\021" +
    "\uffde\001\002\000\004\022\112\001\002\000\004\053\106" +
    "\001\002\000\004\055\107\001\002\000\004\054\110\001" +
    "\002\000\004\022\uffdd\001\002\000\004\023\116\001\002" +
    "\000\004\053\113\001\002\000\004\055\114\001\002\000" +
    "\004\054\115\001\002\000\004\023\uffdc\001\002\000\004" +
    "\053\121\001\002\000\004\036\120\001\002\000\006\034" +
    "\uffe4\054\uffe4\001\002\000\004\044\122\001\002\000\004" +
    "\036\uffdb\001\002\000\004\044\124\001\002\000\004\054" +
    "\125\001\002\000\004\020\uffdf\001\002\000\020\024\130" +
    "\025\132\026\131\027\127\030\135\031\133\032\134\001" +
    "\002\000\004\054\uffd7\001\002\000\004\054\uffda\001\002" +
    "\000\004\054\uffd8\001\002\000\004\054\uffd9\001\002\000" +
    "\004\054\uffd5\001\002\000\004\054\uffd4\001\002\000\004" +
    "\054\uffd6\001\002\000\004\054\137\001\002\000\004\016" +
    "\uffe1\001\002\000\004\044\141\001\002\000\004\054\142" +
    "\001\002\000\006\015\uffe2\041\uffe2\001\002\000\004\044" +
    "\144\001\002\000\004\054\145\001\002\000\004\014\uffe3" +
    "\001\002\000\004\036\206\001\002\000\004\053\150\001" +
    "\002\000\004\033\151\001\002\000\006\034\153\035\152" +
    "\001\002\000\004\045\161\001\002\000\004\036\uffd3\001" +
    "\002\000\006\034\uffd1\054\uffd1\001\002\000\006\034\157" +
    "\054\156\001\002\000\004\035\152\001\002\000\004\036" +
    "\uffd2\001\002\000\006\034\uffd0\054\uffd0\001\002\000\004" +
    "\053\203\001\002\000\004\014\064\001\002\000\004\041" +
    "\164\001\002\000\004\053\200\001\002\000\004\043\167" +
    "\001\002\000\004\042\173\001\002\000\004\053\170\001" +
    "\002\000\004\044\171\001\002\000\004\054\172\001\002" +
    "\000\004\042\uffcd\001\002\000\004\053\176\001\002\000" +
    "\004\036\175\001\002\000\006\034\uffcf\054\uffcf\001\002" +
    "\000\004\055\177\001\002\000\004\036\uffcc\001\002\000" +
    "\004\055\201\001\002\000\004\054\202\001\002\000\004" +
    "\043\uffce\001\002\000\004\044\204\001\002\000\004\054" +
    "\205\001\002\000\006\014\ufff8\046\ufff8\001\002\000\006" +
    "\034\uffed\054\uffed\001\002\000\004\044\210\001\002\000" +
    "\004\054\211\001\002\000\006\037\ufff4\052\ufff4\001\002" +
    "\000\004\055\213\001\002\000\004\054\214\001\002\000" +
    "\004\011\uffea\001\002\000\004\044\216\001\002\000\004" +
    "\054\217\001\002\000\004\010\uffeb\001\002\000\006\034" +
    "\221\035\015\001\002\000\004\002\ufff1\001\002\000\006" +
    "\034\uffef\054\uffef\001\002\000\006\034\225\054\224\001" +
    "\002\000\004\035\015\001\002\000\004\002\ufff2\001\002" +
    "\000\006\034\uffee\054\uffee\001\002\000\006\034\231\035" +
    "\230\001\002\000\004\045\161\001\002\000\004\002\ufffc" +
    "\001\002\000\006\034\ufffb\054\ufffb\001\002\000\006\034" +
    "\235\054\234\001\002\000\004\035\230\001\002\000\004" +
    "\002\ufffd\001\002\000\006\034\ufffa\054\ufffa\001\002\000" +
    "\004\046\241\001\002\000\004\050\026\001\002\000\004" +
    "\053\242\001\002\000\004\044\243\001\002\000\004\054" +
    "\244\001\002\000\004\050\ufff7\001\002\000\004\047\247" +
    "\001\002\000\004\051\043\001\002\000\004\053\250\001" +
    "\002\000\004\044\251\001\002\000\004\054\252\001\002" +
    "\000\004\051\ufff5\001\002\000\004\052\255\001\002\000" +
    "\004\036\260\001\002\000\004\053\256\001\002\000\004" +
    "\044\257\001\002\000\004\036\ufff3\001\002\000\006\034" +
    "\ufff9\054\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\012\002\007\003\011\004\006\005\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\015\001\001" +
    "\000\004\020\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\034\001\001\000\002\001\001\000\004\022\035\001\001" +
    "\000\004\014\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\044\001\001\000\004\042\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\052\025\053" +
    "\001\001\000\004\027\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\064\001\001" +
    "\000\002\001\001\000\004\034\066\001\001\000\002\001" +
    "\001\000\004\045\067\001\001\000\004\031\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\076\001\001" +
    "\000\004\036\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\040\153\041\154" +
    "\001\001\000\004\010\161\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\162\001\001\000\004\043\164\001\001\000\002" +
    "\001\001\000\004\046\165\001\001\000\004\044\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\221\017\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\231\007\232\001\001" +
    "\000\004\010\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\237\001\001\000" +
    "\004\012\244\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\245\001" +
    "\001\000\004\014\252\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DBParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DBParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DBParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<Position> positions = new ArrayList<>();
    public Position finalPos = new Position();
    public ArrayList<Position> positionsTrivia = new ArrayList<>();
    public Position finalPosTrivia = new Position();
    public HashMap<String, Position> positionsComponents = new HashMap<>();
    public HashMap<String, Position> finalPosComponent = new HashMap<>();

    public ArrayList<String> idsUser = new ArrayList<>();
    public ArrayList<User> users = new ArrayList<>();

    public ArrayList<String> idsTrivia = new ArrayList<>();
    public ArrayList<Trivia> trivias = new ArrayList<>();

    public HashMap<String, ArrayList<String>> idsComponent = new HashMap<>();

    public DBParser(DBLexer lex) {
        super(lex);
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        addError(lexeme, line, col, " ");
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        addError(lexeme, line, col, " ");
    }

    private void addError(String lexeme, int line, int col, String description){
        ErrorsLP.addError(lexeme, line, col, "Error Sintáctico", description);
    }

    private void addParameterError(String type, int line, int col){
        addError(type, line, col, "Parametro " + type + " duplicado");
    }
    private void addPError(String type, int line, int col){
        addError(type, line, col, "Parametro " + type + " no esperado");
    }
    protected int error_sync_size() {
            return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$DBParser$actions {
  private final DBParser parser;

  /** Constructor */
  CUP$DBParser$actions(DBParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$DBParser$do_action_part00000000(
    int                        CUP$DBParser$act_num,
    java_cup.runtime.lr_parser CUP$DBParser$parser,
    java.util.Stack            CUP$DBParser$stack,
    int                        CUP$DBParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DBParser$result;

      /* select the action based on the action number */
      switch (CUP$DBParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		RESULT = start_val;
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DBParser$parser.done_parsing();
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= db_user 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= db_trivia 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= new_trivia 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // db_user ::= DB_USER LPAREN users RPAREN 
            {
              Object RESULT =null;
		int usleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int usright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		ArrayList<User> us = (ArrayList<User>)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
        finalPos = new Position(fleft, fright);
        users = us;
        
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("db_user",1, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // db_user ::= DB_USER LPAREN RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
        finalPos = new Position(fleft, fright);
        users = new ArrayList<>();
        
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("db_user",1, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // users ::= user 
            {
              ArrayList<User> RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		User u = (User)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
        ArrayList<User> users = new ArrayList<>();
        users.add(u);
        RESULT = users;
        
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("users",5, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // users ::= users COMMA user 
            {
              ArrayList<User> RESULT =null;
		int usleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).left;
		int usright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).right;
		ArrayList<User> us = (ArrayList<User>)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		User u = (User)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
        us.add(u);
        RESULT = us;
        
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("users",5, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // user ::= LBRACE username password name institution creation_date update_date RBRACE 
            {
              User RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-7)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-7)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-7)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-6)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
        positions.add(new Position(b1left, b1right, b2left, b2right));

        User usr = new User(u,p,n,i);
        if(c.equals("null")) usr.setCreateDate(null);
        else usr.setCreateDateString(c);

        if(e.equals("null")) usr.setUpdateDate(null);
        else usr.setUpdateDateString(e);

        idsUser.add(u);
        RESULT = usr;
        
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("user",4, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-7)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // username ::= USUARIO COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("username",6, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // password ::= PASSWORD COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("password",7, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // name ::= NOMBRE COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("name",8, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // institution ::= INSTITUCION COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("institution",9, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // creation_date ::= FECHA_CREACION COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("creation_date",10, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // update_date ::= FECHA_MODIFICACION COLON STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("update_date",11, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // db_trivia ::= DB_TRIVIA LPAREN trivias RPAREN 
            {
              Object RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		ArrayList<Trivia> ts = (ArrayList<Trivia>)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
            finalPosTrivia = new Position(fleft, fright);
            trivias = ts;
            
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("db_trivia",2, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // db_trivia ::= DB_TRIVIA LPAREN RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
            finalPosTrivia = new Position(fleft, fright);
            trivias = new ArrayList<>();
            
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("db_trivia",2, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // new_trivia ::= NEW_TRIVIA LPAREN trivia RPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		Trivia t = (Trivia)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		
            trivias = new ArrayList<>();
            trivias.add(t);
            
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("new_trivia",3, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // trivias ::= trivia 
            {
              ArrayList<Trivia> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		Trivia t = (Trivia)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
            ArrayList<Trivia> trivias = new ArrayList<>();
            trivias.add(t);
            RESULT = trivias;
            
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("trivias",13, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // trivias ::= trivias COMMA trivia 
            {
              ArrayList<Trivia> RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).right;
		ArrayList<Trivia> ts = (ArrayList<Trivia>)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		Trivia t = (Trivia)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
            ts.add(t);
            RESULT = ts;
            
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("trivias",13, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // trivia ::= LBRACE id_triva name topic question_time creation_user creation_date structure datas RBRACE 
            {
              Trivia RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-9)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-9)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-9)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-6)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).right;
		Integer q = (Integer)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).right;
		String cd = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).right;
		ArrayList<Component> s = (ArrayList<Component>)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		ArrayList<CollectedData> d = (ArrayList<CollectedData>)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
            positionsTrivia.add(new Position(b1left, b1right, b2left, b2right));
            RESULT = new Trivia(i, n, t, q, c, cd, s, d);
            
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("trivia",12, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-9)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // id_triva ::= ID_TRIVIA COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		
            idsTrivia.add(s.replaceAll("\"",""));
            RESULT = s.replaceAll("\"", "");
            
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("id_triva",14, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // topic ::= TEMA COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("topic",15, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // question_time ::= TIEMPO_PREGUNTA COLON DIGIT COMMA 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = d; 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("question_time",17, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // creation_user ::= USUARIO_CREACION COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("creation_user",16, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // structure ::= ESTRUCTURA COLON LPAREN components RPAREN COMMA 
            {
              ArrayList<Component> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).right;
		ArrayList<Component> c = (ArrayList<Component>)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		
            String t = idsTrivia.get(idsTrivia.size()-1);
            positionsComponents.put(t, new Position(ileft, iright, fleft, fright-1));
            finalPosComponent.put(t, new Position(fleft, fright-1));
            RESULT = c;
            
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("structure",20, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // structure ::= ESTRUCTURA COLON LPAREN RPAREN COMMA 
            {
              ArrayList<Component> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		
            String t = idsTrivia.get(idsTrivia.size()-1);
            positionsComponents.put(t, new Position(ileft, iright, fleft, fright-1));
            finalPosComponent.put(t, new Position(fleft, fright-1));
            RESULT = new ArrayList<Component>();
            
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("structure",20, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // components ::= component 
            {
              ArrayList<Component> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
            ArrayList<Component> components = new ArrayList<>();
            components.add(c);
            RESULT = components;
            
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("components",19, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // components ::= components COMMA component 
            {
              ArrayList<Component> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).right;
		ArrayList<Component> cs = (ArrayList<Component>)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		Component c = (Component)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
            cs.add(c);
            RESULT = cs;
            
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("components",19, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // component ::= LBRACE id_component param_trivia clase index visible_text options lines columns answer RBRACE 
            {
              Component RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-10)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-10)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-10)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-9)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-9)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-7)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-7)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-6)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-6)).right;
		Integer in = (Integer)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-6)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).right;
		ArrayList<String> o = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).right;
		Integer col = (Integer)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		ArrayList<String> a = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
            Component component = new Component(i, t, c, in, v, a);
            if(!o.equals("null")) component.setOptions(o);
            component.setLine(l);
            component.setColumns(col);
            //Agregar ids del componente
            if(!idsComponent.containsKey(t)){
                idsComponent.put(t, new ArrayList<>());
            }
            idsComponent.get(t).add(i);

            RESULT = component;
            
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("component",18, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-10)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // id_component ::= ID COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("id_component",21, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // param_trivia ::= TRIVIA COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("param_trivia",22, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // clase ::= CLASE COLON class_type COMMA 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = c; 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("clase",26, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // index ::= INDICE COLON DIGIT COMMA 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = d; 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("index",35, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // visible_text ::= TEXTO_VISIBLE COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("visible_text",23, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // options ::= OPCIONES COLON STRING COMMA 
            {
              ArrayList<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		
            String op =  s.replaceAll("\"", "");
            String[] parts = op.split("\\|");
            RESULT = new ArrayList<String>(Arrays.asList(parts));
            
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("options",24, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lines ::= FILAS COLON DIGIT COMMA 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = d; 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("lines",28, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // columns ::= COLUMNAS COLON DIGIT COMMA 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = d; 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("columns",29, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // answer ::= RESPUESTA COLON STRING 
            {
              ArrayList<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
            String op =  s.replaceAll("\"", "");
            String[] parts = op.split("\\|");
            RESULT = new ArrayList<String>(Arrays.asList(parts));
            
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("answer",25, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // class_type ::= CAMPO_TEXTO 
            {
              Integer RESULT =null;
		 RESULT = Component.CAMPO_TEXTO; 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("class_type",27, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // class_type ::= AREA_TEXTO 
            {
              Integer RESULT =null;
		 RESULT = Component.AREA_TEXTO; 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("class_type",27, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // class_type ::= CHECKBOX 
            {
              Integer RESULT =null;
		 RESULT = Component.CHECKBOX; 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("class_type",27, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // class_type ::= RADIO 
            {
              Integer RESULT =null;
		 RESULT = Component.RADIO; 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("class_type",27, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // class_type ::= FICHERO 
            {
              Integer RESULT =null;
		 RESULT = Component.FICHERO; 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("class_type",27, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // class_type ::= COMBO 
            {
              Integer RESULT =null;
		 RESULT = Component.COMBO; 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("class_type",27, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // class_type ::= NONE 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("class_type",27, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // datas ::= DATOS_RECOPILADOS COLON LPAREN RPAREN 
            {
              ArrayList<CollectedData> RESULT =null;
		
        RESULT = new ArrayList<CollectedData>();
        
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("datas",32, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // datas ::= DATOS_RECOPILADOS COLON LPAREN collected_data RPAREN 
            {
              ArrayList<CollectedData> RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		ArrayList<CollectedData> cd = (ArrayList<CollectedData>)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		
        RESULT = cd;
        
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("datas",32, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // collected_data ::= data 
            {
              ArrayList<CollectedData> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		CollectedData d = (CollectedData)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
                ArrayList<CollectedData> collectedDataList = new ArrayList<>();
                collectedDataList.add(d);
                RESULT = collectedDataList;
                
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("collected_data",31, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // collected_data ::= collected_data COMMA data 
            {
              ArrayList<CollectedData> RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).right;
		ArrayList<CollectedData> cd = (ArrayList<CollectedData>)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		CollectedData d = (CollectedData)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
                cd.add(d);
                RESULT = cd;
                
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("collected_data",31, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // data ::= LBRACE username param_trivia total_time done score RBRACE 
            {
              CollectedData RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).right;
		Integer ti = (Integer)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		
        boolean b = false;
        if(d.equals("Completado")) b = true;
        if(d.equals("Fallo")) b = false;
        RESULT =  new CollectedData(u, t, ti, s, b);
        
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("data",30, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-6)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // total_time ::= TIEMPO_TOTAL COLON DIGIT COMMA 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = d; 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("total_time",33, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // done ::= ESTADO COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("done",36, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // score ::= PUNTEO COLON DIGIT 
            {
              Integer RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		 RESULT = d; 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("score",34, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$DBParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$DBParser$do_action(
    int                        CUP$DBParser$act_num,
    java_cup.runtime.lr_parser CUP$DBParser$parser,
    java.util.Stack            CUP$DBParser$stack,
    int                        CUP$DBParser$top)
    throws java.lang.Exception
    {
              return CUP$DBParser$do_action_part00000000(
                               CUP$DBParser$act_num,
                               CUP$DBParser$parser,
                               CUP$DBParser$stack,
                               CUP$DBParser$top);
    }
}

}
