
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navi.quizcraftweb.backend.parser_lexer.db;

import java_cup.runtime.*;
import java.util.*;
import java.text.DecimalFormat;
import com.navi.quizcraftweb.backend.parser_lexer.*;
import com.navi.quizcraftweb.backend.model.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class DBParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public DBParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public DBParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public DBParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\006\000\002\006\003\000\002\006\005" +
    "\000\002\005\012\000\002\007\006\000\002\010\006\000" +
    "\002\011\006\000\002\012\006\000\002\013\006\000\002" +
    "\014\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\004\004\004\001\002\000\004\040\011\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\010\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002\000" +
    "\004\042\012\001\002\000\004\046\020\001\002\000\006" +
    "\041\ufffd\055\ufffd\001\002\000\006\041\016\055\015\001" +
    "\002\000\004\042\012\001\002\000\004\002\ufffe\001\002" +
    "\000\006\041\ufffc\055\ufffc\001\002\000\004\054\053\001" +
    "\002\000\004\047\023\001\002\000\004\051\030\001\002" +
    "\000\004\054\024\001\002\000\004\044\025\001\002\000" +
    "\004\055\026\001\002\000\004\051\ufff9\001\002\000\004" +
    "\050\035\001\002\000\004\054\031\001\002\000\004\044" +
    "\032\001\002\000\004\055\033\001\002\000\004\050\ufff8" +
    "\001\002\000\004\052\041\001\002\000\004\054\036\001" +
    "\002\000\004\044\037\001\002\000\004\055\040\001\002" +
    "\000\004\052\ufff7\001\002\000\004\054\050\001\002\000" +
    "\004\053\044\001\002\000\004\043\047\001\002\000\004" +
    "\054\045\001\002\000\004\044\046\001\002\000\004\043" +
    "\ufff5\001\002\000\006\041\ufffb\055\ufffb\001\002\000\004" +
    "\044\051\001\002\000\004\055\052\001\002\000\004\053" +
    "\ufff6\001\002\000\004\044\054\001\002\000\004\055\055" +
    "\001\002\000\004\047\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\010\002\005\003\006\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\012\006\013\001" +
    "\001\000\004\007\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\021\001\001" +
    "\000\004\011\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$DBParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$DBParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$DBParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<String> idUsers = new ArrayList<>();
    public ArrayList<User> users = new ArrayList<>();
    public DBParser(DBLexer lex) {
        super(lex);
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        addError(lexeme, line, col, " ");
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        addError(lexeme, line, col, " ");
    }

    private void addError(String lexeme, int line, int col, String description){
        ErrorsLP.addError(lexeme, line, col, "Error Sintáctico", description);
    }

    private void addParameterError(String type, int line, int col){
        addError(type, line, col, "Parametro " + type + " duplicado");
    }
    private void addPError(String type, int line, int col){
        addError(type, line, col, "Parametro " + type + " no esperado");
    }
    protected int error_sync_size() {
            return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$DBParser$actions {
  private final DBParser parser;

  /** Constructor */
  CUP$DBParser$actions(DBParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$DBParser$do_action_part00000000(
    int                        CUP$DBParser$act_num,
    java_cup.runtime.lr_parser CUP$DBParser$parser,
    java.util.Stack            CUP$DBParser$stack,
    int                        CUP$DBParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$DBParser$result;

      /* select the action based on the action number */
      switch (CUP$DBParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		RESULT = start_val;
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$DBParser$parser.done_parsing();
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= db_user 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= db_trivia 
            {
              Object RESULT =null;

              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // db_user ::= DB_USER LPAREN users RPAREN 
            {
              Object RESULT =null;
		int usleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int usright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		ArrayList<User> us = (ArrayList<User>)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		
        users = us;
        
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("db_user",1, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // users ::= user 
            {
              ArrayList<User> RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		User u = (User)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
        ArrayList<User> users = new ArrayList<>();
        users.add(u);
        RESULT = users;
        
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("users",4, ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // users ::= users COMMA user 
            {
              ArrayList<User> RESULT =null;
		int usleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).left;
		int usright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).right;
		ArrayList<User> us = (ArrayList<User>)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		User u = (User)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		
        us.add(u);
        RESULT = us;
        
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("users",4, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // user ::= LBRACE username password name institution creation_date update_date RBRACE 
            {
              User RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-6)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		
        User usr = new User(u,p,n,i);
        if(c.equals("null")) usr.setCreateDate(null);
        else usr.setCreateDateString(c);

        if(e.equals("null")) usr.setUpdateDate(null);
        else usr.setUpdateDateString(e);
        System.out.println(usr);
        idUsers.add(u);
        RESULT = usr;
        
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("user",3, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-7)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // username ::= USUARIO COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("username",5, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // password ::= PASSWORD COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("password",6, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // name ::= NOMBRE COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("name",7, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // institution ::= INSTITUCION COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("institution",8, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // creation_date ::= FECHA_CREACION COLON STRING COMMA 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.elementAt(CUP$DBParser$top-1)).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("creation_date",9, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-3)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // update_date ::= FECHA_MODIFICACION COLON STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$DBParser$stack.peek()).value;
		 RESULT = s.replaceAll("\"", ""); 
              CUP$DBParser$result = parser.getSymbolFactory().newSymbol("update_date",10, ((java_cup.runtime.Symbol)CUP$DBParser$stack.elementAt(CUP$DBParser$top-2)), ((java_cup.runtime.Symbol)CUP$DBParser$stack.peek()), RESULT);
            }
          return CUP$DBParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$DBParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$DBParser$do_action(
    int                        CUP$DBParser$act_num,
    java_cup.runtime.lr_parser CUP$DBParser$parser,
    java.util.Stack            CUP$DBParser$stack,
    int                        CUP$DBParser$top)
    throws java.lang.Exception
    {
              return CUP$DBParser$do_action_part00000000(
                               CUP$DBParser$act_num,
                               CUP$DBParser$parser,
                               CUP$DBParser$stack,
                               CUP$DBParser$top);
    }
}

}
